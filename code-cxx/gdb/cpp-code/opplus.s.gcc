	.file	"opplus.cpp"
	.intel_syntax noprefix
# GNU C++ (Debian 4.9.2-10) version 4.9.2 (x86_64-linux-gnu)
#	compiled by GNU C version 4.9.2, GMP version 6.0.0, MPFR version 3.1.2-p3, MPC version 1.0.2
# GGC heuristics: --param ggc-min-expand=100 --param ggc-min-heapsize=131072
# options passed:  -imultiarch x86_64-linux-gnu -D_GNU_SOURCE opplus.cpp
# -masm=intel -mtune=generic -march=x86-64 -auxbase-strip opplus.s.gcc
# -fverbose-asm
# options enabled:  -faggressive-loop-optimizations
# -fasynchronous-unwind-tables -fauto-inc-dec -fcommon
# -fdelete-null-pointer-checks -fdwarf2-cfi-asm -fearly-inlining
# -feliminate-unused-debug-types -fexceptions -ffunction-cse -fgcse-lm
# -fgnu-runtime -fgnu-unique -fident -finline-atomics -fira-hoist-pressure
# -fira-share-save-slots -fira-share-spill-slots -fivopts
# -fkeep-static-consts -fleading-underscore -fmath-errno
# -fmerge-debug-strings -fpeephole -fprefetch-loop-arrays
# -freg-struct-return -fsched-critical-path-heuristic
# -fsched-dep-count-heuristic -fsched-group-heuristic -fsched-interblock
# -fsched-last-insn-heuristic -fsched-rank-heuristic -fsched-spec
# -fsched-spec-insn-heuristic -fsched-stalled-insns-dep -fshow-column
# -fsigned-zeros -fsplit-ivs-in-unroller -fstrict-volatile-bitfields
# -fsync-libcalls -ftrapping-math -ftree-coalesce-vars -ftree-cselim
# -ftree-forwprop -ftree-loop-if-convert -ftree-loop-im -ftree-loop-ivcanon
# -ftree-loop-optimize -ftree-parallelize-loops= -ftree-phiprop
# -ftree-reassoc -ftree-scev-cprop -funit-at-a-time -funwind-tables
# -fverbose-asm -fzero-initialized-in-bss -m128bit-long-double -m64 -m80387
# -malign-stringops -mavx256-split-unaligned-load
# -mavx256-split-unaligned-store -mfancy-math-387 -mfp-ret-in-387 -mfxsr
# -mglibc -mieee-fp -mlong-double-80 -mmmx -mno-sse4 -mpush-args -mred-zone
# -msse -msse2 -mtls-direct-seg-refs

	.local	_ZStL8__ioinit
	.comm	_ZStL8__ioinit,1,1
	.section	.text._ZN3FooC2Ei,"axG",@progbits,_ZN3FooC5Ei,comdat
	.align 2
	.weak	_ZN3FooC2Ei
	.type	_ZN3FooC2Ei, @function
_ZN3FooC2Ei:
.LFB1021:
	.cfi_startproc
	push	rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	mov	rbp, rsp	#,
	.cfi_def_cfa_register 6
	mov	QWORD PTR [rbp-8], rdi	# this, this
	mov	DWORD PTR [rbp-12], esi	# value, value
	mov	rax, QWORD PTR [rbp-8]	# tmp83, this
	mov	edx, DWORD PTR [rbp-12]	# tmp84, value
	mov	DWORD PTR [rax], edx	# this_1(D)->value_, tmp84
	pop	rbp	#
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE1021:
	.size	_ZN3FooC2Ei, .-_ZN3FooC2Ei
	.weak	_ZN3FooC1Ei
	.set	_ZN3FooC1Ei,_ZN3FooC2Ei
	.section	.text._ZN3FooD2Ev,"axG",@progbits,_ZN3FooD5Ev,comdat
	.align 2
	.weak	_ZN3FooD2Ev
	.type	_ZN3FooD2Ev, @function
_ZN3FooD2Ev:
.LFB1024:
	.cfi_startproc
	push	rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	mov	rbp, rsp	#,
	.cfi_def_cfa_register 6
	mov	QWORD PTR [rbp-8], rdi	# this, this
	pop	rbp	#
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE1024:
	.size	_ZN3FooD2Ev, .-_ZN3FooD2Ev
	.weak	_ZN3FooD1Ev
	.set	_ZN3FooD1Ev,_ZN3FooD2Ev
	.section	.text._ZN3FoopLERKS_,"axG",@progbits,_ZN3FoopLERKS_,comdat
	.align 2
	.weak	_ZN3FoopLERKS_
	.type	_ZN3FoopLERKS_, @function
_ZN3FoopLERKS_:
.LFB1026:
	.cfi_startproc
	push	rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	mov	rbp, rsp	#,
	.cfi_def_cfa_register 6
	mov	QWORD PTR [rbp-8], rdi	# this, this
	mov	QWORD PTR [rbp-16], rsi	# f, f
	mov	rax, QWORD PTR [rbp-8]	# tmp88, this
	mov	edx, DWORD PTR [rax]	# D.21504, this_1(D)->value_
	mov	rax, QWORD PTR [rbp-16]	# tmp89, f
	mov	eax, DWORD PTR [rax]	# D.21504, f_3(D)->value_
	add	edx, eax	# D.21504, D.21504
	mov	rax, QWORD PTR [rbp-8]	# tmp90, this
	mov	DWORD PTR [rax], edx	# this_1(D)->value_, D.21504
	mov	rax, QWORD PTR [rbp-8]	# D.21505, this
	pop	rbp	#
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE1026:
	.size	_ZN3FoopLERKS_, .-_ZN3FoopLERKS_
	.section	.rodata
.LC0:
	.string	"Foo::PrintValue: "
	.section	.text._ZN3Foo10PrintValueEv,"axG",@progbits,_ZN3Foo10PrintValueEv,comdat
	.align 2
	.weak	_ZN3Foo10PrintValueEv
	.type	_ZN3Foo10PrintValueEv, @function
_ZN3Foo10PrintValueEv:
.LFB1027:
	.cfi_startproc
	push	rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	mov	rbp, rsp	#,
	.cfi_def_cfa_register 6
	push	rbx	#
	sub	rsp, 24	#,
	.cfi_offset 3, -24
	mov	QWORD PTR [rbp-24], rdi	# this, this
	mov	rax, QWORD PTR [rbp-24]	# tmp86, this
	mov	ebx, DWORD PTR [rax]	# D.21506, this_1(D)->value_
	mov	esi, OFFSET FLAT:.LC0	#,
	mov	edi, OFFSET FLAT:_ZSt4cout	#,
	call	_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc	#
	mov	esi, ebx	#, D.21506
	mov	rdi, rax	#, D.21507
	call	_ZNSolsEi	#
	mov	esi, OFFSET FLAT:_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_	#,
	mov	rdi, rax	#, D.21507
	call	_ZNSolsEPFRSoS_E	#
	add	rsp, 24	#,
	pop	rbx	#
	pop	rbp	#
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE1027:
	.size	_ZN3Foo10PrintValueEv, .-_ZN3Foo10PrintValueEv
	.section	.text._ZN3Foo8op_plus1ERKS_S1_,"axG",@progbits,_ZN3Foo8op_plus1ERKS_S1_,comdat
	.align 2
	.weak	_ZN3Foo8op_plus1ERKS_S1_
	.type	_ZN3Foo8op_plus1ERKS_S1_, @function
_ZN3Foo8op_plus1ERKS_S1_:
.LFB1028:
	.cfi_startproc
	push	rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	mov	rbp, rsp	#,
	.cfi_def_cfa_register 6
	sub	rsp, 32	#,
	mov	QWORD PTR [rbp-8], rdi	# .result_ptr, .result_ptr
	mov	QWORD PTR [rbp-16], rsi	# this, this
	mov	QWORD PTR [rbp-24], rdx	# a, a
	mov	QWORD PTR [rbp-32], rcx	# b, b
	mov	rax, QWORD PTR [rbp-8]	# tmp83, .result_ptr
	mov	rdx, QWORD PTR [rbp-24]	# tmp84, a
	mov	edx, DWORD PTR [rdx]	# tmp85, *a_2(D)
	mov	DWORD PTR [rax], edx	# *r_1(D), tmp85
	mov	rdx, QWORD PTR [rbp-32]	# tmp86, b
	mov	rax, QWORD PTR [rbp-8]	# tmp87, .result_ptr
	mov	rsi, rdx	#, tmp86
	mov	rdi, rax	#, tmp87
	call	_ZN3FoopLERKS_	#
	nop
	mov	rax, QWORD PTR [rbp-8]	#, .result_ptr
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE1028:
	.size	_ZN3Foo8op_plus1ERKS_S1_, .-_ZN3Foo8op_plus1ERKS_S1_
	.section	.text._ZN3Foo8op_plus2ERKS_S1_,"axG",@progbits,_ZN3Foo8op_plus2ERKS_S1_,comdat
	.align 2
	.weak	_ZN3Foo8op_plus2ERKS_S1_
	.type	_ZN3Foo8op_plus2ERKS_S1_, @function
_ZN3Foo8op_plus2ERKS_S1_:
.LFB1029:
	.cfi_startproc
	push	rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	mov	rbp, rsp	#,
	.cfi_def_cfa_register 6
	sub	rsp, 48	#,
	mov	QWORD PTR [rbp-24], rdi	# .result_ptr, .result_ptr
	mov	QWORD PTR [rbp-32], rsi	# this, this
	mov	QWORD PTR [rbp-40], rdx	# a, a
	mov	QWORD PTR [rbp-48], rcx	# b, b
	mov	rax, QWORD PTR [rbp-40]	# tmp84, a
	mov	eax, DWORD PTR [rax]	# tmp85, *a_1(D)
	mov	DWORD PTR [rbp-16], eax	# D.21354, tmp85
	mov	rdx, QWORD PTR [rbp-48]	# tmp86, b
	lea	rax, [rbp-16]	# tmp87,
	mov	rsi, rdx	#, tmp86
	mov	rdi, rax	#, tmp87
	call	_ZN3FoopLERKS_	#
	mov	rdx, rax	# D.21510,
	mov	rax, QWORD PTR [rbp-24]	# tmp88, .result_ptr
	mov	edx, DWORD PTR [rdx]	# tmp89, MEM[(const struct Foo &)_3]
	mov	DWORD PTR [rax], edx	# *_4(D), tmp89
	lea	rax, [rbp-16]	# tmp90,
	mov	rdi, rax	#, tmp90
	call	_ZN3FooD1Ev	#
	nop
	mov	rax, QWORD PTR [rbp-24]	#, .result_ptr
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE1029:
	.size	_ZN3Foo8op_plus2ERKS_S1_, .-_ZN3Foo8op_plus2ERKS_S1_
	.text
	.globl	main
	.type	main, @function
main:
.LFB1030:
	.cfi_startproc
	.cfi_personality 0x3,__gxx_personality_v0
	.cfi_lsda 0x3,.LLSDA1030
	push	rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	mov	rbp, rsp	#,
	.cfi_def_cfa_register 6
	push	rbx	#
	sub	rsp, 72	#,
	.cfi_offset 3, -24
	lea	rax, [rbp-32]	# tmp86,
	mov	esi, 10	#,
	mov	rdi, rax	#, tmp86
	call	_ZN3FooC1Ei	#
	lea	rax, [rbp-48]	# tmp87,
	mov	esi, 20	#,
	mov	rdi, rax	#, tmp87
	call	_ZN3FooC1Ei	#
	lea	rax, [rbp-64]	# tmp88,
	lea	rcx, [rbp-48]	# tmp89,
	lea	rdx, [rbp-32]	# tmp90,
	lea	rsi, [rbp-32]	# tmp91,
	mov	rdi, rax	#, tmp88
	call	_ZN3Foo8op_plus1ERKS_S1_	#
	lea	rax, [rbp-64]	# tmp92,
	mov	rdi, rax	#, tmp92
.LEHB0:
	call	_ZN3Foo10PrintValueEv	#
.LEHE0:
	lea	rax, [rbp-80]	# tmp93,
	lea	rcx, [rbp-48]	# tmp94,
	lea	rdx, [rbp-32]	# tmp95,
	lea	rsi, [rbp-32]	# tmp96,
	mov	rdi, rax	#, tmp93
	call	_ZN3Foo8op_plus2ERKS_S1_	#
	lea	rax, [rbp-80]	# tmp97,
	mov	rdi, rax	#, tmp97
.LEHB1:
	call	_ZN3Foo10PrintValueEv	#
.LEHE1:
	mov	ebx, 0	# D.21513,
	lea	rax, [rbp-80]	# tmp98,
	mov	rdi, rax	#, tmp98
	call	_ZN3FooD1Ev	#
	lea	rax, [rbp-64]	# tmp99,
	mov	rdi, rax	#, tmp99
	call	_ZN3FooD1Ev	#
	lea	rax, [rbp-48]	# tmp100,
	mov	rdi, rax	#, tmp100
	call	_ZN3FooD1Ev	#
	lea	rax, [rbp-32]	# tmp101,
	mov	rdi, rax	#, tmp101
	call	_ZN3FooD1Ev	#
	mov	eax, ebx	# <retval>, D.21513
	jmp	.L17	#
.L16:
	mov	rbx, rax	# tmp105,
	lea	rax, [rbp-80]	# tmp103,
	mov	rdi, rax	#, tmp103
	call	_ZN3FooD1Ev	#
	jmp	.L14	#
.L15:
	mov	rbx, rax	# tmp104,
.L14:
	lea	rax, [rbp-64]	# tmp108,
	mov	rdi, rax	#, tmp108
	call	_ZN3FooD1Ev	#
	lea	rax, [rbp-48]	# tmp111,
	mov	rdi, rax	#, tmp111
	call	_ZN3FooD1Ev	#
	lea	rax, [rbp-32]	# tmp114,
	mov	rdi, rax	#, tmp114
	call	_ZN3FooD1Ev	#
	mov	rax, rbx	# D.21512, tmp112
	mov	rdi, rax	#, D.21512
.LEHB2:
	call	_Unwind_Resume	#
.LEHE2:
.L17:
	add	rsp, 72	#,
	pop	rbx	#
	pop	rbp	#
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE1030:
	.globl	__gxx_personality_v0
	.section	.gcc_except_table,"a",@progbits
.LLSDA1030:
	.byte	0xff
	.byte	0xff
	.byte	0x1
	.uleb128 .LLSDACSE1030-.LLSDACSB1030
.LLSDACSB1030:
	.uleb128 .LEHB0-.LFB1030
	.uleb128 .LEHE0-.LEHB0
	.uleb128 .L15-.LFB1030
	.uleb128 0
	.uleb128 .LEHB1-.LFB1030
	.uleb128 .LEHE1-.LEHB1
	.uleb128 .L16-.LFB1030
	.uleb128 0
	.uleb128 .LEHB2-.LFB1030
	.uleb128 .LEHE2-.LEHB2
	.uleb128 0
	.uleb128 0
.LLSDACSE1030:
	.text
	.size	main, .-main
	.type	_Z41__static_initialization_and_destruction_0ii, @function
_Z41__static_initialization_and_destruction_0ii:
.LFB1039:
	.cfi_startproc
	push	rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	mov	rbp, rsp	#,
	.cfi_def_cfa_register 6
	sub	rsp, 16	#,
	mov	DWORD PTR [rbp-4], edi	# __initialize_p, __initialize_p
	mov	DWORD PTR [rbp-8], esi	# __priority, __priority
	cmp	DWORD PTR [rbp-4], 1	# __initialize_p,
	jne	.L18	#,
	cmp	DWORD PTR [rbp-8], 65535	# __priority,
	jne	.L18	#,
	mov	edi, OFFSET FLAT:_ZStL8__ioinit	#,
	call	_ZNSt8ios_base4InitC1Ev	#
	mov	edx, OFFSET FLAT:__dso_handle	#,
	mov	esi, OFFSET FLAT:_ZStL8__ioinit	#,
	mov	edi, OFFSET FLAT:_ZNSt8ios_base4InitD1Ev	#,
	call	__cxa_atexit	#
.L18:
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE1039:
	.size	_Z41__static_initialization_and_destruction_0ii, .-_Z41__static_initialization_and_destruction_0ii
	.type	_GLOBAL__sub_I_main, @function
_GLOBAL__sub_I_main:
.LFB1040:
	.cfi_startproc
	push	rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	mov	rbp, rsp	#,
	.cfi_def_cfa_register 6
	mov	esi, 65535	#,
	mov	edi, 1	#,
	call	_Z41__static_initialization_and_destruction_0ii	#
	pop	rbp	#
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE1040:
	.size	_GLOBAL__sub_I_main, .-_GLOBAL__sub_I_main
	.section	.init_array,"aw"
	.align 8
	.quad	_GLOBAL__sub_I_main
	.hidden	__dso_handle
	.ident	"GCC: (Debian 4.9.2-10) 4.9.2"
	.section	.note.GNU-stack,"",@progbits
