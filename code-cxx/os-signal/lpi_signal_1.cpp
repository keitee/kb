// #include "lpi_lib.h"
#include "lpi_error.h"
#include <chrono>
#include <iostream>
#include <signal.h>
#include <thread>

/*
Listing 20-1: Installing a handler for SIGINT

When we run the program in Listing 20-1, we see the following:
$ ./ouch
0
Type Control-C
Ouch!
1
2
Main program loops, displaying successive integers
Signal handler is executed, and returns
Control has returned to main program
Type Control-C again
Ouch!
3
Type Control-\ (the terminal quit character)
Quit (core dumped)


SIGQUIT is generated by the terminal driver when we type the terminal quit
character, usually Control-\.)

*/

static void sigHandler(int sig)
{
  std::cout << "sigHandler: SIGINT delivered\n";

  // to see if signal *really* `interrupt the main program flow`
  std::this_thread::sleep_for(std::chrono::seconds(10));
}

int main(int argc, char **argv)
{
  int j;

  if (signal(SIGINT, sigHandler) == SIG_ERR)
    errExit("signal error");

  for (j = 0;; j++)
  {
    std::cout << "loops " << j << std::endl;
    std::this_thread::sleep_for(std::chrono::seconds(3));
  }
}
