# SYNOPSIS:
#
#   make [all]  - makes everything.
#   make clean  - removes all files generated by make.

# *TN*
# g++ (Debian 6.3.0-18+deb9u1) 6.3.0 20170516
# have to use absloute path. don't know why

# why `relative path` do not work?
# GTEST_DIR = ~/works/googletest/googletest
# GMOCK_DIR = ~/works/googletest/googlemock

GTEST_DIR = $(HOME)/works/googletest/googletest
GMOCK_DIR = $(HOME)/works/googletest/googlemock


TARGET1 = string_01
TARGET2 = string_02
TARGET3 = string_ex

# Where to find user code.
USER_DIR = .

CPPFLAGS += -isystem $(GTEST_DIR)/include -I$(GTEST_DIR) \
			-isystem $(GMOCK_DIR)/include -I$(GMOCK_DIR)

# CXXFLAGS += -std=c++11 -g -Wall -Wextra -pthread -lboost_regex -D_GLIBCXX_DEBUG -D_GLIBCXX_DEBUG_PEDANTIC
CXXFLAGS += -std=c++11 -g -Wall -Wextra -pthread -D_GLIBCXX_DEBUG -D_GLIBCXX_DEBUG_PEDANTIC

TESTS = $(TARGET1)_out \
				$(TARGET2)_out \
				$(TARGET3)_out

GTEST_HEADERS = $(GTEST_DIR)/include/gtest/*.h \
                $(GTEST_DIR)/include/gtest/internal/*.h

GMOCK_HEADERS = $(GMOCK_DIR)/include/gmock/*.h \
                $(GMOCK_DIR)/include/gmock/internal/*.h

# House-keeping build targets.
all : $(TESTS)

clean :
	rm -f $(TESTS) *.a *.o

$(TARGET1): $(TARGET1)_out

$(TARGET2): $(TARGET2)_out


# Builds gtest.a and gtest_main.a.
GTEST_SRCS_ = $(GTEST_DIR)/src/*.cc $(GTEST_DIR)/src/*.h $(GTEST_HEADERS)

# For simplicity and to avoid depending on Google Test's
gtest-all.o : $(GTEST_SRCS_)
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -c \
            $(GTEST_DIR)/src/gtest-all.cc

# Builds gtest.a and gtest_main.a.
GMOCK_SRCS_ = $(GMOCK_DIR)/src/*.cc $(GMOCK_HEADERS)

# For simplicity and to avoid depending on Google Test's
gmock-all.o : $(GMOCK_SRCS_)
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -c \
            $(GMOCK_DIR)/src/gmock-all.cc

gmock.a : gmock-all.o
	$(AR) $(ARFLAGS) $@ $^

gtest.a : gtest-all.o
	$(AR) $(ARFLAGS) $@ $^

#
$(TARGET1).o : $(TARGET1).cpp $(GTEST_HEADERS)
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -c $(TARGET1).cpp -o $(TARGET1).o

$(TARGET1)_out : $(TARGET1).o gtest.a gmock.a
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -lpthread -lboost_regex $^ -o $@

#
$(TARGET2).o : $(TARGET2).cpp $(GTEST_HEADERS)
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -c $(TARGET2).cpp -o $(TARGET2).o

$(TARGET2)_out : $(TARGET2).o gtest.a gmock.a
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -lpthread $^ -o $@

#
$(TARGET3).o : $(TARGET3).cpp $(GTEST_HEADERS)
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -c $(TARGET3).cpp -o $(TARGET3).o

$(TARGET3)_out : $(TARGET3).o gtest.a gmock.a
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -lpthread $^ -o $@
