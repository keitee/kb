# SYNOPSIS:
#
#   make [all]  - makes everything.
#   make clean  - removes all files generated by make.

GTEST_DIR = $(HOME)/works/googletest/googletest
GMOCK_DIR = $(HOME)/works/googletest/googlemock

SIMPLE_TARGET = t_ex_query_simple
EXTEND_TARGET = t_ex_query_extend

# Where to find user code.
USER_DIR = .

CPPFLAGS += -isystem $(GTEST_DIR)/include -isystem $(GMOCK_DIR)/include 
# CPPFLAGS += -isystem $(GTEST_DIR)/include

CXXFLAGS += -std=c++11 -g -Wall -Wextra -pthread -D_GLIBCXX_DEBUG -pg
# CXXFLAGS += -std=c++11 -g -Wall -Wextra -pthread -D_GLIBCXX_DEBUG
#CXXFLAGS += -std=c++11 -g -Wall -Wextra -pthread -fno-elide-constructors
#CXXFLAGS += -std=c++11 -g -Wall -Wextra -pthread

SIMPLE_TESTS = $(SIMPLE_TARGET)
EXTEND_TESTS = $(EXTEND_TARGET)

GTEST_HEADERS = $(GTEST_DIR)/include/gtest/*.h \
                $(GTEST_DIR)/include/gtest/internal/*.h

GMOCK_HEADERS = $(GMOCK_DIR)/include/gmock/*.h \
                $(GMOCK_DIR)/include/gmock/internal/*.h

# House-keeping build targets.
all : $(SIMPLE_TESTS) $(EXTEND_TESTS)

clean :
	rm -f $(TESTS) *.a *.o

# Builds gtest.a and gtest_main.a.
GTEST_SRCS_ = $(GTEST_DIR)/src/*.cc $(GTEST_DIR)/src/*.h $(GTEST_HEADERS)

# For simplicity and to avoid depending on Google Test's
gtest-all.o : $(GTEST_SRCS_)
	$(CXX) $(CPPFLAGS) -I$(GTEST_DIR) $(CXXFLAGS) -c \
            $(GTEST_DIR)/src/gtest-all.cc

# Builds gtest.a and gtest_main.a.
GMOCK_SRCS_ = $(GMOCK_DIR)/src/*.cc $(GMOCK_HEADERS)

# For simplicity and to avoid depending on Google Test's
gmock-all.o : $(GMOCK_SRCS_)
	$(CXX) $(CPPFLAGS) -I$(GMOCK_DIR) $(CXXFLAGS) -c \
            $(GMOCK_DIR)/src/gmock-all.cc

gmock.a : gmock-all.o
	$(AR) $(ARFLAGS) $@ $^

gtest.a : gtest-all.o
	$(AR) $(ARFLAGS) $@ $^

#
$(SIMPLE_TARGET).o : $(SIMPLE_TARGET).cpp $(GTEST_HEADERS)
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -c $(SIMPLE_TARGET).cpp -o $(SIMPLE_TARGET).o

$(SIMPLE_TESTS) : $(SIMPLE_TARGET).o gtest.a gmock.a
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -lpthread $^ -o $@

$(EXTEND_TARGET).o : $(EXTEND_TARGET).cpp $(GTEST_HEADERS)
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -c $(EXTEND_TARGET).cpp -o $(EXTEND_TARGET).o

$(EXTEND_TESTS) : $(EXTEND_TARGET).o gtest.a gmock.a
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -lpthread $^ -o $@
