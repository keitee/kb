/*
https://doc.qt.io/qt-5/qdbuscontext.html

When a slot is called in an object due to a signal delivery or due to a remote
method call, it is sometimes necessary to know the context in which that
happened. In particular, if the slot determines that it wants to send the reply
at a later opportunity or if it wants to reply with an error, the context is
needed.

The QDBusContext class is an alternative to accessing the context that doesn't
involve modifying the code generated by the Qt D-Bus XML compiler
(qdbusxml2cpp).

QDBusContext is used by subclassing it from the objects being exported using
QDBusConnection::registerObject(). 

QDBusConnection QDBusContext::connection() const Returns the connection from
which this call was received.
 
*/

#include "dbusabstractadaptor.h"

DBusAbstractAdaptor::DBusAbstractAdaptor(QObject *parent)
  : QDBusAbstractAdaptor(parent)
    , m_parentContext(nullptr)
{
  // sanity check that the parent object is publically inherited from
  // QDBusContext, we need this so that we can get the QDBusConnection object
  // that sent the request

  if (parent)
  {
    void *ptr = parent->qt_metacast("QDBusContext");
    m_parentContext = reinterpret_cast<QDBusContext *>(ptr);
  }

  if (!m_parentContext)
    qWarning("DBusAbstractAdaptor::DBusAbstractAdaptor: failed to get dbus "
             "context object of the parent");

  qDebug("DBusAbstractAdaptor::DBusAbstractAdaptor: get dbus "
         "context object of the parent");
}

/* ={--------------------------------------------------------------------------
adds the dbus connection to the internal list of dbus connections to send
property change notifications.
 
*/

void DBusAbstractAdaptor::registerConnection(const QDBusConnection &conn)
{
  m_dbusConnections.append(conn);
}

void DBusAbstractAdaptor::unregisterConnection(const QDBusConnection &conn)
{
  Q_UNUSED(conn);
}

/* ={--------------------------------------------------------------------------
sends out a dbus error message with name and message.

This must be called from the dbus slot.
 
*/

void DBusAbstractAdaptor::sendErrorReply(const QDBusMessage &request,
        const QString &name, const QString &message) const
{
  // needs the parent context so we can get the dbus connection that the request
  // is sent on

  if (Q_UNLIKELY(nullptr == m_parentContext))
  {
    qWarning("missing parent dbus context");
    return;
  }

  request.setDelayedReply(true);

  QDBusMessage error = request.createErrorReply(name, message);

  qDebug() << "DBusAbstractAdaptor::sendErrorReply:";
  qDebug() << error;

  if (!m_parentContext->connection().send(error))
  {
    qWarning() << "failed to send error reply " << name << message;
  }
}

void DBusAbstractAdaptor::sendReply(const QDBusMessage &request,
        const QVariant &result) const
{
  // needs the parent context so we can get the dbus connection that the request
  // is sent on

  if (Q_UNLIKELY(nullptr == m_parentContext))
  {
    qWarning("missing parent dbus context");
    return;
  }

  request.setDelayedReply(true);

  QDBusMessage reply = request.createReply();

  // append arg if it's valid
  if (result.isValid())
    reply << result;

  qDebug() << "DBusAbstractAdaptor::sendReply:";
  qDebug() << reply;

  if (!m_parentContext->connection().send(reply))
  {
    qWarning() << "failed to send a reply ";
  }
}
