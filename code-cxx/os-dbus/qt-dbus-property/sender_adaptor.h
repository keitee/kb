/*
 * This file was generated by qdbusxml2cpp version 0.8
 * Command line was: qdbusxml2cpp -a sender_adaptor.h: org.example.sender.xml
 *
 * qdbusxml2cpp is Copyright (C) 2019 The Qt Company Ltd.
 *
 * This is an auto-generated file.
 * This file may have been hand-edited. Look for HAND-EDIT comments
 * before re-generating it.
 */

#ifndef SENDER_ADAPTOR_H
#define SENDER_ADAPTOR_H

#include <QtCore/QObject>
#include <QtDBus/QtDBus>
QT_BEGIN_NAMESPACE
class QByteArray;
template <class T> class QList;
template <class Key, class Value> class QMap;
class QString;
class QStringList;
class QVariant;
QT_END_NAMESPACE

/*
 * Adaptor class for interface org.example.sender
 */
class SenderAdaptor : public QDBusAbstractAdaptor
{
  Q_OBJECT
  Q_CLASSINFO("D-Bus Interface", "org.example.sender")
  Q_CLASSINFO(
    "D-Bus Introspection",
    ""
    "  <interface name=\"org.example.sender\">\n"
    "    <method name=\"ConnectProfile\">\n"
    "      <arg direction=\"in\" type=\"s\" name=\"UUID\"/>\n"
    "    </method>\n"
    "    <signal name=\"action\">\n"
    "      <arg direction=\"out\" type=\"s\" name=\"nickname\"/>\n"
    "      <arg direction=\"out\" type=\"s\" name=\"text\"/>\n"
    "    </signal>\n"
    "    <signal name=\"aboutToQuit\">\n"
    "    </signal>\n"
    "    <property access=\"readwrite\" type=\"b\" name=\"Powered\"/>\n"
    "  </interface>\n"
    "")
public:
  SenderAdaptor(QObject *parent);
  virtual ~SenderAdaptor();

public: // PROPERTIES
  // Q_PROPERTY(bool Powered READ powered WRITE setPowered)
  Q_PROPERTY(bool Powered READ powered WRITE setPowered NOTIFY powerChanged)
  bool powered() const;
  void setPowered(bool value);

public Q_SLOTS: // METHODS
  // void ConnectProfile(const QString &UUID);
  // void SendCommand(const QString &command);

  void ConnectProfile(const QString &UUID, const QDBusMessage &message);
  void SendCommand(const QString &command, const QDBusMessage &message);
  void onTimerExpired();
  void onPowerChanged(bool power);

Q_SIGNALS: // SIGNALS
  void action(const QString &nickname, const QString &text);
  // as with complexping example, it is to signal client to quit
  void aboutToQuit();

  // need to define signal as well
  void powerChanged(bool powered);

private:
  void notifyPropertyChanged();
  bool m_powered{false};
};

#endif
