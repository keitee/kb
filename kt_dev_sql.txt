*kt_dev_07*                                                                tw=100

kt.dev.sql

/^[#=]{
Use #{ for a group and ={ for a item

|kt_dev_sql_001| sql-validator
|kt_dev_sql_001| sql-intro
*kt_dev_sql_002* sql-different-user
*kt_dev_sql_002* sql-show-db-and-tables
|kt_dev_sql_002| sql-select sql-wildcard
|kt_dev_sql_003| sql-order-by sql-function
*kt_dev_sql_003* sql-join
*kt_dev_sql_003* sql-create
*kt_dev_sql_003* sql-insert sql-update sql-delete
*kt_dev_sql_003* sql-examples


# ============================================================================
#{
={============================================================================
*kt_dev_sql_001* sql-validator

http://developer.mimer.com/validator/parser200x/index.tml


={============================================================================
*kt_dev_sql_001* sql-intro

* SQL, Structured Query Language

* special-purpose programming language
  to manipulate relational database
  contains both a data definition syntax and data manipulation syntax

* Primary key
  if more than on table uses the same primary key, you can then `merge` those
  two tables together.

* Foreign kay
  `links` that table to another table's primary key

* SQL is `not case-sensitive`


={============================================================================
*kt_dev_sql_002* sql-different-user

$ mysql -u root

={============================================================================
*kt_dev_sql_002* sql-show-db-and-tables

mysql> show databases;
+--------------------+
| Database           |
+--------------------+
| information_schema |
| mysql              |
| redmine            |
| test               |
| tools              |
| uploads            |
| wombatskyd         |
+--------------------+

mysql> use uploads;

mysql> show tables from uploads;
+-------------------+
| Tables_in_uploads |
+-------------------+
| all_tests_found   |
| box_pairings      |
| django_migrations |
| growing_pools     |
| upload            |
| upload_tmp        |
+-------------------+

mysql> show columns from all_tests_found;
+------------+----------+------+-----+---------+-------+
| Field      | Type     | Null | Key | Default | Extra |
+------------+----------+------+-----+---------+-------+
| id         | int(11)  | NO   | MUL | NULL    |       |
| test_id    | int(11)  | YES  |     | NULL    |       |
| priority   | int(11)  | YES  |     | NULL    |       |
| line_no    | int(11)  | YES  |     | NULL    |       |
| found_time | datetime | YES  |     | NULL    |       |
+------------+----------+------+-----+---------+-------+
5 rows in set (0.07 sec)

mysql> show columns from upload;
+----------------+------------+------+-----+---------+----------------+
| Field          | Type       | Null | Key | Default | Extra          |
+----------------+------------+------+-----+---------+----------------+
| project        | char(10)   | YES  |     | NULL    |                |
| filename       | char(255)  | YES  | UNI | NULL    |                |
| version        | char(40)   | YES  | MUL | NULL    |                |
| platform       | char(20)   | YES  | MUL | NULL    |                |
| boxname        | char(80)   | YES  | MUL | NULL    |                |
| mac            | char(12)   | YES  | MUL | NULL    |                |
| md5sum         | char(32)   | YES  | MUL | NULL    |                |
| upload_time    | datetime   | YES  | MUL | NULL    |                |
| parser_result  | char(255)  | YES  |     | NULL    |                |
| lastlogtime    | float      | YES  |     | NULL    |                |
| corrupt        | char(10)   | YES  |     | NULL    |                |
| diskerrors     | char(10)   | YES  |     | NULL    |                |
| pcat_status    | char(20)   | YES  |     | NULL    |                |
| nvram_status   | char(20)   | YES  |     | NULL    |                |
| parser_testid  | int(11)    | YES  |     | NULL    |                |
| priority       | int(11)    | YES  |     | NULL    |                |
| directory_name | char(255)  | YES  |     | NULL    |                |
| html           | char(255)  | YES  |     | NULL    |                |
| from_time      | datetime   | YES  |     | NULL    |                |
| to_time        | datetime   | YES  |     | NULL    |                |
| skykeycode     | char(4)    | YES  |     | NULL    |                |
| iterative      | tinyint(1) | YES  |     | NULL    |                |
| dylan          | tinyint(1) | YES  |     | NULL    |                |
| viewing_card   | char(9)    | YES  |     | NULL    |                |
| id             | int(11)    | NO   | PRI | NULL    | auto_increment |
| wake_reason    | char(2)    | YES  |     | NULL    |                |
| boot_token     | char(64)   | YES  | MUL | NULL    |                |
| eedid          | char(10)   | YES  | MUL | NULL    |                |
+----------------+------------+------+-----+---------+----------------+
28 rows in set (0.00 sec)


={============================================================================
*kt_dev_sql_002* sql-select

<alias>
p is alias for a `table name`

SELECT p.person_first_name FROM person p;

<where-clause>
The body of the WHERE clause will be a set of expression that can evaluate to
TRUE or FALSE. boolean expression. Uses to `filter` down the result set.

Who are all the people in my contact list that have the first name Jon?

SELECT p.person_first_name FROM person p WHERE p.person_first_name = 'Jon';

<simple-operators>
=     equal to
<>    not equal to
>     greater than
>=
<=


<more-operators>

BETWEEN is `inclusive`

Who are all the people in my contact list that I have contacted at least once
but no more than 20 times?

SELECT p.person_first_name FROM person p WHERE p.contacted_number 
BETWEEN 1 AND 20;

<LIKE>
LIKE is a special operator `just for strings`, give LIKE a pattern that will
match strings. % is the wild-card character.

Who are all the people in my contact list that have a first name that begins
with the letter J?

SELECT p.person_first_name FROM person p WHERE p.person_first_name 
LIKE 'J%';


<IN>
IN requires a list of potential values and if row matches `any` of the
  potential values, then is added to the result set.

Who are all the people in my contact list that are named Jon, Shannon, or
Flitz?

SELECT p.person_first_name FROM person p WHERE p.person_first_name 
IN ('Jon','Shannon','Flitz');


<sql-null>
IS is used to check NULL which is special in SQL and don't work with equality(=)
operator.

Who are all the people in my contact list that don't have a last name?

SELECT p.person_first_name FROM person p WHERE p.person_last_name 
IS NULL;

Who are all the people in my contact list that have a last name?

SELECT p.person_first_name FROM person p WHERE p.person_last_name 
IS NOT NULL;


<sql-wildcard>
returns all columns

SELECT * FROM person p;


={============================================================================
*kt_dev_sql_003* sql-order-by sql-function

ORDER BY

* ascending order is the default.
* after WHERE clause but WHERE isn't required.

Who are all the people in my contact list, ordered by last name?

SELECT p.person_first_name, p.person_last_name FROM person p 
ORDER BY p.person_last_name;

* descending order

SELECT p.person_first_name, p.person_last_name FROM person p 
ORDER BY p.person_last_name DESC;


<set-function>
built-in functions to provide additional functionality and use these function
instead of columns in the slect list.

Q: How many contacts do I have?
Q: Who is the contact that I've interacted with the least?

CONUT
* include NULL when use *
* use alias to change column name as result set

SELECT COUNT(*) FROM person p;

SELECT COUNT(*) AS NumberOfPople FROM person p;
SELECT COUNT(p.person_first_name) AS NumberOfPople FROM person p;

MAX

SELECT MAX(p.person_contacted_number) FROM person p;

MIN
AVG
SUM


<qualifiers-and-set-function>
How to limit rows from a query?

Use result set qualifier. ALL implied by default.

SELECT DISTINCT p.person_first_name FROM person p;

shows all the unique first names since DISTINCT removes duplicates.

Q: What is the count of unique first names among my contacts?

SELECT COUNT(DISTINCT p.person_first_name) FROM person p;


<sql-group-by>

GROUP BY
* can `subset` of the set which set function can run on and get `subresult`

Q: What is the count of every unique first names among my contacts?

SELECT COUNT(DISTINCT p.person_first_name), p.person_first_name FROM person p
GROUP BY p.person_first_name;

<ex>
> SELECT a.address_street FROM address a;
+----------------+
| address_street |
+----------------+
| Pluralsight    |
| Trainsignal    |
| Pluralsight    |
| Pluralsight    |
+----------------+

> SELECT COUNT(a.address_street) FROM address a;
4

> SELECT COUNT(DISTINCT a.address_street) FROM address a;
2

> SELECT COUNT(DISTINCT a.address_street), a.address_street FROM address a;
| COUNT(DISTINCT a.address_street)  | a.address_street |
|                                 2 | Pluralsight      |

this do not make sense.

> SELECT COUNT(DISTINCT a.address_street), a.address_street FROM address a
`GROUP BY` a.address_street;
| COUNT(DISTINCT a.address_street)  | a.address_street |
|                                 1 | Pluralsight      |
|                                 1 | Trainsignal      |

> SELECT COUNT(a.address_street), a.address_street FROM address a
`GROUP BY` a.address_street;
| COUNT(a.address_street)           | a.address_street |
|                                 3 | Pluralsight      |
|                                 1 | Trainsignal      |


<HAVING>
HVING clause works as WHERE clause works to SELECT.

Q: What is the count of every unique first names among my contacts that
appears at least 5 times?

SELECT COUNT(p.person_first_name) AS NameCount, p.person_first_name FROM person p
GROUP BY p.person_first_name HAVING NameCount >= 5;


={============================================================================
*kt_dev_sql_003* sql-join

create result set from two or more tables.


<CROSS-JOIN>
The simplest type of JOIN. least useful and inefficient.
Takes all the rows from both tables `without relation` between tables.
CROSS keyword is optional.

Q: What are all the first names and email addresses I have?

SELECT p.person_first_name, e.email_address FROM person p, email_address e;

mysql> SELECT * FROM person;
+-----------+-------------------+------------------+-------------------------+----------------------------+---------------------+
| person_id | person_first_name | person_last_name | person_contacted_number | person_date_last_contacted | person_date_added   |
+-----------+-------------------+------------------+-------------------------+----------------------------+---------------------+
|         1 | Jon               | Flanders         |                       5 | 2013-09-14 11:43:31        | 2013-01-14 11:43:31 |
|         2 | Shannon           | Ahern            |                       0 | 2013-08-14 11:43:31        | 2013-02-14 11:43:31 |
|         3 | Fritz             | Onion            |                       1 | 2013-07-14 11:43:31        | 2013-03-14 11:43:31 |
+-----------+-------------------+------------------+-------------------------+----------------------------+---------------------+
3 rows in set (0.00 sec)

mysql> SELECT * FROM email_address;
+------------------+-------------------------+-----------------------+
| email_address_id | email_address_person_id | email_address         |
+------------------+-------------------------+-----------------------+
|                1 |                       1 | jon.flanders@mail.com |
|                2 |                       1 | jonf@anothermail.com  |
|                4 |                       3 | fritz@mail.com        |
|                5 |                    NULL | aaron@mail.com        |
+------------------+-------------------------+-----------------------+
4 rows in set (0.00 sec)

mysql>  SELECT p.person_first_name, e.email_address FROM person p, email_address e;
+-------------------+-----------------------+
| person_first_name | email_address         |
+-------------------+-----------------------+
| Jon               | jon.flanders@mail.com |
| Shannon           | jon.flanders@mail.com |
| Fritz             | jon.flanders@mail.com |
| Jon               | jonf@anothermail.com  |
| Shannon           | jonf@anothermail.com  |
| Fritz             | jonf@anothermail.com  |
| Jon               | fritz@mail.com        |
| Shannon           | fritz@mail.com        |
| Fritz             | fritz@mail.com        |
| Jon               | aaron@mail.com        |
| Shannon           | aaron@mail.com        |
| Fritz             | aaron@mail.com        |
+-------------------+-----------------------+
12 rows in set (0.00 sec)


<INNER-JOIN>
The typical JOIN.
Take all the rows from table A, find all rows in table B where a key in table
A is equal to a key in table B.
ON boolean expression to match the key columns.

Q: What are my contacts' email addresses?

SELECT p.person_first_name, p.person_last_name, e.email_address 
FROM person p INNER JOIN email_address e
ON p.person_id = e.email_address_person_id;

+-------------------+------------------+-----------------------+
| person_first_name | person_last_name | email_address         |
+-------------------+------------------+-----------------------+
| Jon               | Flanders         | jon.flanders@mail.com |
| Jon               | Flanders         | jonf@anothermail.com  |
| Fritz             | Onion            | fritz@mail.com        |
+-------------------+------------------+-----------------------+


<OUTER-JOIN>
The difference between INNER JOIN and OUTER JOIN is NULL since INNER JOIN only
joins against rows where there is a match in the joined table and OUTER JOIN
works even when there is no match. But NULL on LEFT or RIGHT.

Q: What are all my contacts and their email addresses, including the ones
missing an email address and the one with an email address but missing a
contact name?

SELECT p.person_first_name, p.person_last_name, e.email_address 
FROM person p FULL OUTER JOIN email_address e
ON p.person_id = e.email_address_person_id;

| person_first_name | person_last_name  | email_address | 
| Jon               | Flanders          | jon@..        |
| Fritz             | Onion             | fritz@..      |
| Shannon           | Ahern             | NULL          |
| NULL              | NULL              | aaron@..      |

note: do not work in mysql


<LEFT-OUTER-JOIN>
Only the rows from the table on the left of the LEFT OUTER JOIN will be
returned.

Q: What are all my contacts and their email addresses, including the ones
missing an email address?

SELECT p.person_first_name, p.person_last_name, e.email_address 
FROM person p LEFT OUTER JOIN email_address e
ON p.person_id = e.email_address_person_id;

+-------------------+------------------+-----------------------+
| person_first_name | person_last_name | email_address         |
+-------------------+------------------+-----------------------+
| Jon               | Flanders         | jon.flanders@mail.com |
| Jon               | Flanders         | jonf@anothermail.com  |
| Shannon           | Ahern            | NULL                  |
| Fritz             | Onion            | fritz@mail.com        |
+-------------------+------------------+-----------------------+


<RIGHT-OUTER-JOIN>
Q: What are the email addresses I have, including those emails I don't have a
person for?

SELECT p.person_first_name, p.person_last_name, e.email_address 
FROM person p RIGHT OUTER JOIN email_address e
ON p.person_id = e.email_address_person_id;

+-------------------+------------------+-----------------------+
| person_first_name | person_last_name | email_address         |
+-------------------+------------------+-----------------------+
| Jon               | Flanders         | jon.flanders@mail.com |
| Jon               | Flanders         | jonf@anothermail.com  |
| Fritz             | Onion            | fritz@mail.com        |
| NULL              | NULL             | aaron@mail.com        |
+-------------------+------------------+-----------------------+


={============================================================================
*kt_dev_sql_003* sql-create

* DDL (Data Definition Language)

$mysql -u root -p
$mysql -u root --password=mysql < contacts.sql

-- this is not ANSI SQL but is supported by most vendors.
CREATE DATABASE contacts;
USE contacts;

-- CREATE TABLE ( column name, column data type );
-- NULL is the default and means that NULL value are valid for that column.
-- NOT NULL means an attempt to insert NULL value will fail.

-- PRIMARY KEY columns are implicitly NOT NULL
-- possible for more than one column to form together as a compound PRIMARY
-- KEY.

-- CONSTRAINT constraint name

-- create tables but note that no FOREIGN KEY
CREATE TABLE email_address( email_address_id INTEGER NOT NULL, 
email_address_person_id INTEGER, 
email_address VARCHAR(55) NOT NULL, 
CONSTRAINT PK_email_address PRIMARY KEY (email_address_id));

CREATE TABLE person( person_id INTEGER NOT NULL, person_first_name VARCHAR(55) NOT NULL, 
person_last_name VARCHAR(55) NULL, 
person_contacted_number INTEGER NOT NULL, 
person_date_last_contacted DATETIME NOT NULL,
person_date_added DATETIME NOT NULL, 
CONSTRAINT PK_person PRIMARY KEY(person_id));

-- fill email_address table
INSERT INTO email_address (email_address_id, email_address_person_id,
    email_address) VALUES (1, 1, 'jon.flanders@mail.com');
INSERT INTO email_address (email_address_id, email_address_person_id,
    email_address) VALUES (2, 1, 'jonf@anothermail.com');
INSERT INTO email_address (email_address_id, email_address_person_id,
    email_address) VALUES (4, 3, 'fritz@mail.com');
INSERT INTO email_address (email_address_id, email_address_person_id,
    email_address) VALUES (5, NULL, 'aaron@mail.com');

-- fill person table
INSERT INTO person (person_id, person_first_name, person_last_name,
      person_contacted_number, person_date_last_contacted, person_date_added)
  VALUES (1, 'Jon', 'Flanders', 5, '2013-09-14 11:43:31', '2013-01-14 11:43:31');
INSERT INTO person (person_id, person_first_name, person_last_name,
      person_contacted_number, person_date_last_contacted, person_date_added)
  VALUES (2, 'Shannon', 'Ahern', 0, '2013-08-14 11:43:31', '2013-02-14 11:43:31');
INSERT INTO person (person_id, person_first_name, person_last_name,
      person_contacted_number, person_date_last_contacted, person_date_added)
  VALUES (3, 'Fritz', 'Onion', 1, '2013-07-14 11:43:31', '2013-03-14 11:43:31');


-- ALTER TABLE enables you to add or change a column definition or CONSTRAINT
-- on an existing table.

-- doing alter table to make `relation`
ALTER TABLE email_address ADD CONSTRAINT FK_email_address_person FOREIGN
KEY(email_address_person_id) REFERENCES person (person_id);


mysql> SELECT * FROM person;
+-----------+-------------------+------------------+-------------------------+----------------------------+---------------------+
| person_id | person_first_name | person_last_name | person_contacted_number | person_date_last_contacted | person_date_added   |
+-----------+-------------------+------------------+-------------------------+----------------------------+---------------------+
|         1 | Jon               | Flanders         |                       5 | 2013-09-14 11:43:31        | 2013-01-14 11:43:31 |
|         2 | Shannon           | Ahern            |                       0 | 2013-08-14 11:43:31        | 2013-02-14 11:43:31 |
|         3 | Fritz             | Onion            |                       1 | 2013-07-14 11:43:31        | 2013-03-14 11:43:31 |
+-----------+-------------------+------------------+-------------------------+----------------------------+---------------------+
3 rows in set (0.00 sec)

mysql> SELECT * FROM email_address;
+------------------+-------------------------+-----------------------+
| email_address_id | email_address_person_id | email_address         |
+------------------+-------------------------+-----------------------+
|                1 |                       1 | jon.flanders@mail.com |
|                2 |                       1 | jonf@anothermail.com  |
|                4 |                       3 | fritz@mail.com        |
|                5 |                    NULL | aaron@mail.com        |
+------------------+-------------------------+-----------------------+
4 rows in set (0.00 sec)


={============================================================================
*kt_dev_sql_003* sql-insert sql-update sql-delete

<INSERT-INTO>
* one table at a time.

INSERT INTO persopn (person_id, person_first_name, person_last_name, 
    person_contacted_number, person_date_last_contacted, person_date_added )
VALUES 
(1, 'jon', 'Flanders', 5, '2013-09-14 11:43:31', '2013-01-14 11:43:31')


* can insert multiple rows.

INSERT INTO persopn (person_id, person_first_name, person_last_name, 
    person_contacted_number, person_date_last_contacted, person_date_added )
VALUES 
(1, 'jon', 'Flanders', 5, '2013-09-14 11:43:31', '2013-01-14 11:43:31')
(2, 'Shannon', 'Ahern', 0, '2013-08-14 11:43:31', '2013-02-14 11:43:31')


<UPDATE>
* without WHERE clause, UPDATE(like DELETE) affects all the rows in the table.
* SET follows table name.

UPDATE email_address e SET e.email_address_person_id = 5
WHERE e.email_address = 'aaron@mail.com';


<DELETE>
* one table at a time and without WHERE, affects all rows.

# deletes all
DELETE FROM person;


<sql-transaction>
Transaction should be ACID (atomic, Consistent, Isolated, Durable)

Isolated(serialed)

-- ANSI syntax
START TRANSACTION;
DELETE FROM person;
COMMIT;
-- or ROLLBACK;


DELETE FROM person p
WHERE p.person_first_name LIKE 'J%';

DELETE FROM person p
WHERE p.person_id IN (1,2,3,4,5,6);


={============================================================================
*kt_dev_sql_003* sql-examples

mysql --batch --table --column-names -u root uploads -e \
"SELECT upload_time, version, directory_name, viewing_card FROM upload WHERE mac='0019FBF2D46B' ORDER BY upload_time DESC limit 10"

mysql --batch --skip-column-names -u root uploads -e \
"SELECT platform, version, upload_time, parser_result FROM upload WHERE directory_name IS NOT NULL AND parser_result != 'Not Yet Parsed' ORDER BY upload_time DESC limit 3000"

mysql --batch --table --column-names -u root uploads -e \
"SELECT version, upload_time, filename, all_tests_found.test_id FROM upload, all_tests_found WHERE mac = '0019FB0FC051' AND all_tests_found.id=upload.id AND all_tests_found.test_id IN (59) ORDER BY upload_time DESC LIMIT 5"


=}============================================================================
Copyright: see |ktkb|                              vim:tw=100:ts=3:ft=help:norl:
