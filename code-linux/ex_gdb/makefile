# SYNOPSIS:
#
#   make [all]  - makes everything.
#   make clean  - removes all files generated by make.

# GTEST_DIR = $(HOME)/works/googletest/googletest
# GMOCK_DIR = $(HOME)/works/googletest/googlemock

TARGET = ins
TARGET2 = bintree
TARGET3 = artificialarray
TARGET4 = server
TARGET5 = client
TARGET6 = threads

# Where to find user code.
USER_DIR = .

CPPFLAGS += -isystem $(GTEST_DIR)/include -isystem $(GMOCK_DIR)/include 

CXXFLAGS += -std=c++11 -g -Wall -Wextra -pthread -D_GLIBCXX_DEBUG

TESTS = $(TARGET)_test $(TARGET2)_test $(TARGET3)_test \
				$(TARGET4)_test $(TARGET5)_test \
				$(TARGET6)_test

# GTEST_HEADERS = $(GTEST_DIR)/include/gtest/*.h \
#                 $(GTEST_DIR)/include/gtest/internal/*.h

# GMOCK_HEADERS = $(GMOCK_DIR)/include/gmock/*.h \
#                 $(GMOCK_DIR)/include/gmock/internal/*.h

# House-keeping build targets.
all : $(TESTS)

clean :
	rm -f $(TESTS) *.a *.o

# # Builds gtest.a and gtest_main.a.
# GTEST_SRCS_ = $(GTEST_DIR)/src/*.cc $(GTEST_DIR)/src/*.h $(GTEST_HEADERS)

# # For simplicity and to avoid depending on Google Test's
# gtest-all.o : $(GTEST_SRCS_)
# 	$(CXX) $(CPPFLAGS) -I$(GTEST_DIR) $(CXXFLAGS) -c \
#             $(GTEST_DIR)/src/gtest-all.cc

# # Builds gtest.a and gtest_main.a.
# GMOCK_SRCS_ = $(GMOCK_DIR)/src/*.cc $(GMOCK_HEADERS)

# # For simplicity and to avoid depending on Google Test's
# gmock-all.o : $(GMOCK_SRCS_)
# 	$(CXX) $(CPPFLAGS) -I$(GMOCK_DIR) $(CXXFLAGS) -c \
#             $(GMOCK_DIR)/src/gmock-all.cc

# gmock.a : gmock-all.o
# 	$(AR) $(ARFLAGS) $@ $^

# gtest.a : gtest-all.o
# 	$(AR) $(ARFLAGS) $@ $^

#
$(TARGET).o : $(TARGET).cpp $(GTEST_HEADERS)
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -c $(TARGET).cpp -o $(TARGET).o

$(TARGET)_test : $(TARGET).o 
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -lpthread $^ -o $@

#
$(TARGET2).o : $(TARGET2).cpp $(GTEST_HEADERS)
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -c $(TARGET2).cpp -o $(TARGET2).o

$(TARGET2)_test : $(TARGET2).o 
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -lpthread $^ -o $@

#
$(TARGET3).o : $(TARGET3).cpp $(GTEST_HEADERS)
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -c $(TARGET3).cpp -o $(TARGET3).o

$(TARGET3)_test : $(TARGET3).o
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -lpthread $^ -o $@

#
$(TARGET4).o : $(TARGET4).c $(GTEST_HEADERS)
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -c $(TARGET4).c -o $(TARGET4).o

$(TARGET4)_test : $(TARGET4).o 
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -lpthread $^ -o $@

#
$(TARGET5).o : $(TARGET5).c $(GTEST_HEADERS)
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -c $(TARGET5).c -o $(TARGET5).o

$(TARGET5)_test : $(TARGET5).o
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -lpthread $^ -o $@

#
$(TARGET6).o : $(TARGET6).c $(GTEST_HEADERS)
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -c $(TARGET6).c -o $(TARGET6).o

$(TARGET6)_test : $(TARGET6).o
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -lpthread -lm $^ -o $@
