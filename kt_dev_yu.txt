*kt_dev_uv* tw=100

|kt_dev_uv_set_001| set up printer


# ============================================================================
#{
={============================================================================
*kt_dev_uv_set_001* setup: printer

1. install cups
sudo apt-get install cups

2. add printers via cups admin page 
See this page, add user to the printer group, and browse to localhost, and follow the instructions to add printers. 
www.howtoforge.com/how-to-install-a-canon-printer-on-debian-and-debian-like-systems

3. use printer names from this page.
https://wiki.youview.co.uk/display/canvas/How+To+-+Set+up+printers

={============================================================================
*kt_dev_uv_set_002* setup: email

1. The evolution under debian do not work. Forced to use icedove, OWA and
phone instead.

2. Clone the git repo.
Follow this page.
https://wiki.youview.co.uk/display/canvas/How+To+-+Get+access+to+git-dev+repositories


={============================================================================
*kt_dev_uv_set_002* setup: build the stack

{install-package}
1. Can see package files from the repo
http://devarch-deb:8080/job/DEBs/ws/DEBS/

-rw-r--r--  1 kpark kpark 205942756 Jan  8 10:30 adobe-flex4-sdk_4.1.0.16076withairsdk2.5-3_i386.deb
-rw-r--r--  1 kpark kpark   5310170 Jan  8 10:30 adobe-stagecraft_2.5.2.3.20120518-3_i386.deb
-rw-r--r--  1 kpark kpark  80815260 Jan  8 10:35 generic-stbgcc-4.4.5-2.0_20120927-2_i386.deb
-rw-r--r--  1 kpark kpark  24399388 Jan  8 10:37 humax-dtr-t1000-staging_20140718H20.2.0-3_i386.deb
-rw-r--r--  1 kpark kpark 328730796 Jan  8 10:48 humax-stbgcc-4.5.3-2.4_20130321-2_i386.deb

2. Or can use apt-get install on the command line.
sudo apt-get install map-dir-and-exec


{ccache}
https://wiki.youview.co.uk/display/canvas/2014/03/26/Speeding+up+builds+with+ccache?src=search

The ccache tool tries to speed up a build by taking object files from cache when the preprocessed
source didn't change. In addition, it can often avoid preprocessing, as a cache lookup on the source
file path and compiler options returns a list of include files and their modification times. If
those weren't updated, that counts as a 'direct hit'. Otherwise it falls back to preprocessing the
source and trying to look-up its hash in the cache. If successful, that counts as a 'preprocessed
hit'.

The main barrier preventing cache sharing across git branches has to do with the fact we create
separate build slaves for each git branch, which results in different source and binary directories
being seen by the compiler. More specifically:

The compiler sets the __FILE__ macro to be the absolute path to the source file. The value of that
macro leaks to preprocessed source through the use of assert().

We pass preprocessor definitions like -DMACRO__prefix="...", -DMACRO__builddir="...",
   -DMACRO__top_srcdir="...", which can also leak to preprocessed source.

To address this issue, the new zb-virtual-slave tool was developed. It's meant to wrap around other
build tools, such as zb-build-with-progress, zb-deploy, zb-shell, etc. and leading them to believe
we are always building a branch called _virtual_. This way, the compiler will see identical source
and binary locations, enabling cache hits across different git branches. zb-virtual-slave uses the
map-dir-and-exec tool internally, which you will have to build and install yourself.

note: need to install map-dir-and-exec package


{1} build-stack
$ zb-virtual-slave zb-shell
$ ZB_CFG=humax.1000 zb-make

note: shall have pysical data dir under /. when use sym link to the home, failed to build.


{check-package}
dpkg-query -l | grep humax

{2} update-cds; core driver software
https://wiki.youview.co.uk/display/canvas/HOWTO+Install+Humax+DTR-T1000+T1000+H21.5.0

note: follow instruction, need to find out box type, CTK or not. 


{3} update the zinc whcich was built


={============================================================================
*kt_dev_uv_set_002* setup: serial connection

sudo screen /dev/ttyS0 115200


={============================================================================
*kt_dev_uv_set_002* uv: elememt names

element or component names
https://wiki.youview.co.uk/display/canvas/YouView+Element+Names?src=search


={============================================================================
*kt_dev_uv_set_002* gnome: windows

{activate-button}
To access your windows and applications, click the Activities button, or just move your mouse
pointer to the top-left hot corner. You can also press the Super key on your keyboard. You can see
your windows and applications in the overview. You can also just start typing to search your
applications, files, folders and the web. note: this is window key.


{tile-windows}
Super+Left     " to left
Super+Right    " to right
Super+Up       " to max
Supaer+Down    " back to original size

{lock-screen}
Super-L

{keyboard-shortcuts}
https://help.gnome.org/users/gnome-help/stable/shell-keyboard-shortcuts.html.en


={============================================================================
*kt_dev_uv_set_002* firefox key shortcuts

Ctrl+D                     Add Bookmark
Ctrl+B or Ctrl+I           Bookmarks

Backspace or Alt+<-        Back
Shft+Backspace or Alt+->   Forward

Ctrl+W or Ctrl+F4          Close Tab
Ctrl+T                     New Tab
Ctrl+Tab or Ctrl+PageDown  Next Tab

F5 or Ctrl+R               Reload


vim:tw=100:ts=3:ft=help:norl:

