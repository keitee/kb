*kt_dev_uv*                                                             tw=100

|kt_dev_uv_set_001| setup printer
|kt_dev_uv_set_002| setup email
|kt_dev_uv_set_003| setup: humax build the stack
|kt_dev_uv_set_004| setup: zb-make. build single component in the stack
|kt_dev_uv_set_005| setup: serial connection
|kt_dev_uv_set_006| 
|kt_dev_uv_set_007| setup: huawei build the stack
|kt_dev_uv_set_008| setup: oem staging and toolchains
|kt_dev_uv_set_009| setup: boxes

|kt_dev_uv_stack_001| stack: startup
|kt_dev_uv_stack_002| stack: element names

|kt_dev_uv_stack_102| commands TODO:

|kt_dev_uv_task_001| task:01: nexusMgr


# ============================================================================
#{
={============================================================================
*kt_dev_uv_set_001* setup: printer

1. install cups
sudo apt-get install cups

2. add printers via cups admin page 
See this page, add user to the printer group, and browse to localhost, and follow the instructions to add printers. 
www.howtoforge.com/how-to-install-a-canon-printer-on-debian-and-debian-like-systems

3. use printer names from this page.
https://wiki.youview.co.uk/display/canvas/How+To+-+Set+up+printers


={============================================================================
*kt_dev_uv_set_002* setup: email

1. The evolution under debian do not work. Forced to use icedove, OWA and
phone instead.

2. Clone the git repo.
Follow this page.
https://wiki.youview.co.uk/display/canvas/How+To+-+Get+access+to+git-dev+repositories


={============================================================================
*kt_dev_uv_set_003* setup: humax build the stack

{install-package}
1. Can see package files from the repo
http://devarch-deb:8080/job/DEBs/ws/DEBS/

-rw-r--r--  1 kpark kpark 205942756 Jan  8 10:30 adobe-flex4-sdk_4.1.0.16076withairsdk2.5-3_i386.deb
-rw-r--r--  1 kpark kpark   5310170 Jan  8 10:30 adobe-stagecraft_2.5.2.3.20120518-3_i386.deb
-rw-r--r--  1 kpark kpark  80815260 Jan  8 10:35 generic-stbgcc-4.4.5-2.0_20120927-2_i386.deb
-rw-r--r--  1 kpark kpark  24399388 Jan  8 10:37 humax-dtr-t1000-staging_20140718H20.2.0-3_i386.deb
-rw-r--r--  1 kpark kpark 328730796 Jan  8 10:48 humax-stbgcc-4.5.3-2.4_20130321-2_i386.deb

2. Or can use apt-get install on the command line.
sudo apt-get install map-dir-and-exec


{ccache}
https://wiki.youview.co.uk/display/canvas/2014/03/26/Speeding+up+builds+with+ccache?src=search

The ccache tool tries to speed up a build by taking object files from cache when the preprocessed
source didn't change. In addition, it can often avoid preprocessing, as a cache lookup on the source
file path and compiler options returns a list of include files and their modification times. If
those weren't updated, that counts as a 'direct hit'. Otherwise it falls back to preprocessing the
source and trying to look-up its hash in the cache. If successful, that counts as a 'preprocessed
hit'.

The main barrier preventing cache sharing across git branches has to do with the fact we create
separate build slaves for each git branch, which results in different source and binary directories
being seen by the compiler. More specifically:

The compiler sets the __FILE__ macro to be the absolute path to the source file. The value of that
macro leaks to preprocessed source through the use of assert().

We pass preprocessor definitions like -DMACRO__prefix="...", -DMACRO__builddir="...",
   -DMACRO__top_srcdir="...", which can also leak to preprocessed source.

To address this issue, the new zb-virtual-slave tool was developed. It's meant to wrap around other
build tools, such as zb-build-with-progress, zb-deploy, zb-shell, etc. and leading them to believe
we are always building a branch called _virtual_. This way, the compiler will see identical source
and binary locations, enabling cache hits across different git branches. zb-virtual-slave uses the
map-dir-and-exec tool internally, which you will have to build and install yourself.

note: need to install map-dir-and-exec package


{1} build-stack
$ cd ~/sources/
zb-virtual-slave zb-shell
ZB_CFG=humax.1000 zb-make

note: shall have pysical data dir under /. when use sym link to the home, failed to build.


<check-package>
dpkg-query -l | grep humax

{2} update-cds; core driver software
https://wiki.youview.co.uk/display/canvas/HOWTO+Install+Humax+DTR-T1000+T1000+H21.5.0

note: follow instruction, need to find out box type, CTK or not. 


{3} update the zinc whcich was built
1. follow "boot from HDD" instruction from:
https://wiki.youview.co.uk/display/canvas/HOWTO+Install+Humax+DTR-T1000+T1000+H21.5.0


{layout}
/data/builds/master/huawei.370/zinc-build-root/release-huawei-bcm7409

/data/builds/master/huawei.370/zinc-install-root/release/huawei-bcm7409$ tree -L 3
.
|-- opt
|   `-- zinc-trunk
|       |-- bin
|       |-- devel
|       |-- include
|       |-- lib
|       |-- libexec
|       |-- oss
|       |-- platform
|       |-- share
|       |-- tests
|       `-- var
`-- usr -> /opt/oem-staging/huawei-bcm7409/usr


={============================================================================
*kt_dev_uv_set_004* setup: zb-make. build single component in the stack

#            ZB_CFG - Host for which the "Element Tree" must be built.
#
#                     Supported values
#                     ----------------
#                     humax.1000 : for Humax T1000 boxes
#                     humax.2100 : for Humax T2100 boxes
#                     huawei.360 : for Huawei DN360T boxes
#                     huawei.370 : for Huawei DN370T boxes
#                     huawei.372 : for Huawei DN372T boxes

# export ET=~/sources/DEVARCH/

<map-zb-cfg-to-box-config>
conf zb.huawei.360.host-config huawei-dn360t
conf zb.huawei.370.host-config huawei-bcm7409
conf zb.huawei.372.host-config huawei-bcm7231

:~/source$ ls -al ./DEVARCH/OEM.Huawei/OEM.Huawei.3rdPartyStack/
-rwxr-xr-x 1 kpark kpark 1671 Jan  7 15:55 setvars-huawei-bcm7231.sh
-rwxr-xr-x 1 kpark kpark 1598 Jan  7 15:55 setvars-huawei-bcm7409.sh
-rwxr-xr-x 1 kpark kpark 1670 Jan  7 15:55 setvars-huawei-dn360t.sh

setvars-huawei-bcm7409.sh

note: comment this to inlcude this in the build.

# export ZINC_EXCLUDE_PROJECTS="Polonium.NexusInspect"

:~/source$ ls -al ./DEVARCH/OEM.Humax/OEM.Humax.3rdPartyStack/
-rw-r--r-- 1 kpark kpark 1822 Jan  7 15:55 setvars-humax-db_t2200.sh
-rw-r--r-- 1 kpark kpark 1653 Jan  7 15:55 setvars-humax-dtr_t1000.sh
-rw-r--r-- 1 kpark kpark 1930 Jan  7 15:55 setvars-humax-dtr_t2100.sh
-rw-r--r-- 1 kpark kpark 2177 Jan  7 15:55 setvars-humax-dtr_t4000.sh


cd =~/sources/DEVARCH/
ZB_CFG="huawei.370" zb-make Polonium/Polonium.NexusInspect
ZB_CFG="huawei.370" zb-make


{build-tree}
zb-make:
   source ../../*/*/setvars-$ZB_HOST_CONFIG.sh


={============================================================================
*kt_dev_uv_set_005* setup: serial connection

sudo screen /dev/ttyS0 115200



={============================================================================
*kt_dev_uv_set_007* setup: huawei build the stack

sudo apt-get install huawei-dn370t-toolchain
sudo apt-get install huawei-dn370t-staging
sudo apt-get install huawei-stbgcc-4.5.3-2.4

note: this will picks up the correct file from the link below.
http://devarch-deb.dev.youview.co.uk:8080/job/DEBs/ws/DEBS/

huawei-dn370t-toolchain_20120927-2_i386.deb
huawei-dn370t-nexus_20131104-2_i386.deb
huawei-dn370t-staging_20140804-2_i386.deb

https://wiki.youview.co.uk/display/canvas/HOWTO+Install+Huawei+DN370T+PVR1+B37SP11


={============================================================================
*kt_dev_uv_set_008* setup: oem staging and toolchanis

https://wiki.youview.co.uk/display/canvas/OEM+Staging+and+Toolchains?src=search


={============================================================================
*kt_dev_uv_set_009* setup: boxes

root Password is onlydebug (Humax) TestHw123 (Huawei)

||Hostname||FQDN||IP Address||MAC Address||
humax-0873   humax-0873.dev.youview.co.uk    172.20.35.27   00:03:78:4B:7A:2B

huawei-04877 huawei-04877.dev.youview.co.uk  172.20.33.192  20:F3:A3:70:D1:94


={============================================================================
*kt_dev_uv_stack_001* stack: startup

cds: core driver software

/opt/cds/etc/rc.user

root# pwd
/opt

root# ls -al
drwxr-xr-x    8 root     root           149 Dec 25 04:33 .
drwxr-xr-x   17 root     root           259 Dec 25 04:33 ..
drwxr-xr-x    3 root     root            33 Dec 25 02:36 adobe
drwxr-xr-x   12 root     root           247 Dec 25 04:33 cds
drwxr-xr-x    4 root     root            84 Dec 18 14:20 netflix
drwxr-xr-x    4 root     root            39 Dec 25 04:33 stagecraft-2.0
lrwxrwxrwx    1 root     root            15 Dec 25 04:33 ui -> /mnt/psi/ui_psi
dr-xr-xr-x    4 root     root            57 Dec 25 02:36 youview
drwxr-xr-x    9 root     root           186 Dec 25 04:33 zinc


<zinc>
root# pwd
/opt/zinc/bin

root# ls
CopperDownloader                     onscreenidd-launch
MediaRouterDbusSpy                   osmiumd
airlauncher.sh                       pcmplaybackd
audiofeedbackd                       persistedpairingrepository_utils.py
avahi-launcher                       provisioninginformationparser
babysitterd                          purge-polipo-diskcache.sh
cadmiumcontentacquisitiond           python_launcher.sh
cobaltmetadatabrokerd                queryNetworkManager
copperannouncementd                  radiumairlauncher
copperlocalstoragerepod              radiumd
crbd                                 remindersd
dbusredirect                         run-stagecraft2-functions.sh
dbussenddaemon                       run-stagecraft2-with-cache.sh
dbuswaitbusname                      runBrowser.sh
deleteTree                           runNetflix.sh
device-manager-launcher              runStagecraft2.sh
dial-server                          sandbox-drop-privileges
dial-server-launcher.sh              setItem
exec-with-cache                      setpgid-and-exec
generate-http-user-agent             sodiumd
getChildItems                        splashScreen
getItem                              start-and-wait-for-busname.sh
http-dbus-bridge                     start-service-over-dbus.sh
http-dbus-bridge-launcher.sh         storagemanagementd
https-cache-proxy                    tunerd
ironmetadatad                        uimanagerd
linearsource-launch                  w3cEngine
linearsource-launch-and-sandbox      watcher
linearsourced                        yv-mainui
lsr-config                           yv-remote-booking-agent-activate
nickelmediad                         yv-remote-booking-agent-watcher
on-demand-launcher                   yv-start-services.sh
onscreenidd


={============================================================================
*kt_dev_uv_stack_102* stack: elememt names

element or component names
https://wiki.youview.co.uk/display/canvas/YouView+Element+Names?src=search


={============================================================================
*kt_dev_uv_stack_102* commands

# what?
root# setItem platform.settings.enable-ipcrb 1

# log?
tail -f /opt/zinc/var/daemons/crbd/log/helium.log


How to Introspect DBus from the Command Line
https://wiki.youview.co.uk/display/canvas/How+to+Introspect+DBus+from+the+Command+Line?src=search
# to see messages on dbus
root# dbus-monitor "interface=Zinc.Application.ApplicationManager"

# what is it? LSR?
root# getChildItems oem


={============================================================================
*kt_dev_uv_task_001* task:01: nexusMgr

nexusMgr interfaces:

BcmNexus_Audio_Mixer_Register(NEXUS_AudioMixerHandle hMixer)
BcmNexus_Audio_Mixer_Unregister(void)
BcmNexus_Graphics_Resources_Acquire(BcmNexus_Graphics_Resources_Config *)
BcmNexus_Graphics_Resources_Release(const BcmNexus_Graphics_Resources *)
BcmNexus_ImageDecoder_Resources_Acquire(const BcmNexus_ImageDecoder_Resources_Config *)
BcmNexus_ImageDecoder_Resources_Release(const BcmNexus_ImageDecoder_Resources *)
BcmNexus_Input_Resources_Acquire(const BcmNexus_Input_Resources_Config *)
BcmNexus_Input_Resources_Release(const BcmNexus_Input_Resources *)
BcmNexus_Key_Last_Key_Timestamp(void)
BcmNexus_Platform_Init(void)
BcmNexus_Platform_Uninit(void)
BcmNexus_Screen_Capture(void)
BcmNexus_SetMixerPath(NEXUS_AudioMixerHandle hmixer, const BcmNexus_StreamPlayer_Resources *resources)
BcmNexus_Set_Last_Key_Timestamp(void)
BcmNexus_SoundOutput_Resources_Acquire(const BcmNexus_SoundOutput_Resources_Config *)
BcmNexus_SoundOutput_Resources_Release(const BcmNexus_SoundOutput_Resources *)
BcmNexus_SoundOutput_SetVolume(BcmNexus_SoundOutput_Volume, unsigned)
BcmNexus_StreamPlayer_Resources_Acquire(const BcmNexus_StreamPlayer_Resources_Config *)
BcmNexus_StreamPlayer_Resources_Avaiable(void)
BcmNexus_StreamPlayer_Resources_Release(const BcmNexus_StreamPlayer_Resources *)
BcmNexus_UnSetMixerPath(NEXUS_AudioMixerHandle hmixer, const BcmNexus_StreamPlayer_Resources *resources)

<from-inspect>
static void releaseNexusResources( BcmNexus_Shared_Memory *shmem )
{
  shmem->resource_pid = getpid();
  printf( "Reset resource_pid\n" );
  /* set callback to NULL */

  NEXUS_PictureCtrl_GetCommonSettings( sharedMem->videoWindow, &picture_settings );

  NEXUS_VideoDecoder_Stop( shmem->videoDecoder );
  NEXUS_AudioDecoder_Stop( shmem->audioDecoder[0] );

  for (uint8_t i = 0; i < MAX_PUMP_NUM; ++i)
  {
    // stopPlayPump( shmem->playpump[i] );
    {
      NEXUS_PlaypumpSettings playpump_settings;
      NEXUS_Playpump_Stop( playPump );
      NEXUS_Playpump_GetSettings( playPump, &playpump_settings );
      NEXUS_Playpump_SetSettings( playPump, &playpump_settings );
    }
  }

  NEXUS_VideoDecoder_Flush( shmem->videoDecoder );
  NEXUS_AudioDecoder_Flush( shmem->audioDecoder[0] );
  for (uint8_t i = 0; i < MAX_PUMP_NUM; ++i)
  {
    NEXUS_Playpump_Flush( shmem->playpump[i] );
  }

  shmem->resource_pid=0;
}

<from-inspect>
typedef struct
{
  NEXUS_AudioMixerHandle      mixer;
  NEXUS_AudioPlaybackHandle   pcmPlayback[NEXUS_NUM_AUDIO_PLAYBACKS];
  NEXUS_AudioDecoderHandle    audioDecoder[1];           // used
  NEXUS_Ac3EncodeHandle       ac3Encoder;
  NEXUS_StcChannelHandle      stcChannel;
  NEXUS_VideoDecoderHandle    videoDecoder;              // used
  NEXUS_VideoWindowHandle     videoWindow;               // used
  NEXUS_PlaypumpHandle        playpump[MAX_PUMP_NUM];    // used
  NEXUS_DmaHandle             dmaHandle;
  pid_t                       resource_pid;
} BcmNexus_Shared_Memory;


<from-mgr-humax>
typedef struct {
  //
  // 'same' as inspect
  //
  NEXUS_AudioPlaybackStartSettings    audioStartSettings;
  bool                                pcmStarted[NEXUS_NUM_AUDIO_PLAYBACKS];
} BcmNexus_Shared_Memory;


<from-mgr-huawei>
typedef struct {
    NEXUS_AudioMixerHandle              mixer;
    NEXUS_AudioPlaybackHandle           pcmPlayback[NEXUS_NUM_AUDIO_PLAYBACKS];
    NEXUS_AudioDecoderHandle            audioDecoder[2];
    NEXUS_VideoDecoderHandle            videoDecoder;
} BcmNexus_Shared_Memory;


https://jira.youview.co.uk/browse/DEVARCH-8092
Provide a method in Huawei's nexusMgr to release resources acquired by a pid

The proposed interface in OEM nexusMgr code.
BcmNexus_Release_All_Resources_Acquired_By_Process(pid_t pid);

https://jira.youview.co.uk/browse/YVHUAWEI-6095
Kernel oops when killing w3cEngine or Netflix

Chris Dudding added a comment - Last Wednesday 15:34
B37SP05 is an engineering release, so the "kernel oops" fixes are not applied in the latest Huawei
FR13 release (B37SP11). We've asked them to apply the fix into their main FR13 branch. We will mark
this ticket as resolved when the fix is available in the next FR13 release.

Zegen Pei added a comment - Last Friday 02:25
fixed in 70.37.13
<TODO> 0. when ready check.

https://jira.youview.co.uk/browse/DEVARCH-8081
<TODO> 1
If we are to proceed with `nexus-inspect` as a solution, we separately need OEMs to move the struct
definition into the header file, but for now, we should identify which devices the current
implementation is compatible with. 

Device Works (Y/N)   Comments
Humax T1000          Y 
Humax T2100/T2000    Y 
Humax T2200          Y 
Huawei DN370T        N 
Huawei DN372T 
Huawei DN360T

note: before that need to verify #6095 first since it cause opps when kill apps.

1. this is function sets resource_pid in humax case
BcmNexus_StreamPlayer_Resources_Acquire(const BcmNexus_StreamPlayer_Resources_Config *)

2. We could perhaps make an initial implementation of this for each OEM and provide as a patch to
OEMs, or if that proves too problematic in the Huawei case, leave it as an empty "no-op", and let
them fill-in the implementation.

3. At the moment Humax saves the pid of the last process and Ideally we should know what process
acquired each resource so we can more safely release them. Some testing will tell us how necessary
it is for now.

https://jira.youview.co.uk/browse/DEVARCH-8080
This can be disabled by removing either of the executables:
    /opt/zinc/bin/exec-then-cleanup-app.sh
    /opt/zinc/bin/nexus-inspect


==============================================================================
vim:tw=100:ts=3:ft=help:norl:
