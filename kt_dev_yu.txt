*kt_dev_uv*                                                             tw=100

|kt_dev_uv_set_001| setup printer
|kt_dev_uv_set_002| setup email
|kt_dev_uv_set_003| setup: humax build the stack
|kt_dev_uv_set_004| setup: build single component in the stack
|kt_dev_uv_set_005| setup: serial connection
|kt_dev_uv_set_006| 
|kt_dev_uv_set_007| setup: huawei build the stack
|kt_dev_uv_set_008| setup: oem staging and toolchains
|kt_dev_uv_set_009| setup: boxes
|kt_dev_uv_set_010| setup: git for dev and oem

|kt_dev_uv_stack_000| stack: builds
|kt_dev_uv_stack_001| stack: build: oem
|kt_dev_uv_stack_002| stack: startup and tree
|kt_dev_uv_stack_004| stack: oem configs
|kt_dev_uv_stack_005| stack: brcm debug level
|kt_dev_uv_stack_006| stack: netflix ps line

|kt_dev_uv_stack_100| stack: element names
|kt_dev_uv_stack_101| stack: vanadium: runBrowser

|kt_dev_uv_stack_200| commands TODO:

|kt_dev_uv_wiki_001| dbus-monitor

|kt_dev_uv_hwei_001| stack: convert ro filesystem to rw

|kt_dev_uv_task_001| task:01: nexusMgr


# ============================================================================
#{
={============================================================================
*kt_dev_uv_set_001* setup: printer

1. install cups
sudo apt-get install cups

2. add printers via cups admin page 
See this page, add user to the printer group, and browse to localhost, and follow the instructions to add printers. 
www.howtoforge.com/how-to-install-a-canon-printer-on-debian-and-debian-like-systems

3. use printer names from this page.
https://wiki.youview.co.uk/display/canvas/How+To+-+Set+up+printers


={============================================================================
*kt_dev_uv_set_002* setup: email

1. The evolution under debian do not work. Forced to use icedove, OWA and
phone instead.

2. Clone the git repo.
Follow this page.
https://wiki.youview.co.uk/display/canvas/How+To+-+Get+access+to+git-dev+repositories


={============================================================================
*kt_dev_uv_set_003* setup: humax build the stack

{install-package}
1. Can see package files from the repo
http://devarch-deb:8080/job/DEBs/ws/DEBS/

-rw-r--r--  1 kpark kpark 205942756 Jan  8 10:30 adobe-flex4-sdk_4.1.0.16076withairsdk2.5-3_i386.deb
-rw-r--r--  1 kpark kpark   5310170 Jan  8 10:30 adobe-stagecraft_2.5.2.3.20120518-3_i386.deb
-rw-r--r--  1 kpark kpark  80815260 Jan  8 10:35 generic-stbgcc-4.4.5-2.0_20120927-2_i386.deb
-rw-r--r--  1 kpark kpark  24399388 Jan  8 10:37 humax-dtr-t1000-staging_20140718H20.2.0-3_i386.deb
-rw-r--r--  1 kpark kpark 328730796 Jan  8 10:48 humax-stbgcc-4.5.3-2.4_20130321-2_i386.deb

2. Or can use apt-get install on the command line.
sudo apt-get install map-dir-and-exec


{ccache}
https://wiki.youview.co.uk/display/canvas/2014/03/26/Speeding+up+builds+with+ccache?src=search

The ccache tool tries to speed up a build by taking object files from cache when the preprocessed
source didn't change. In addition, it can often avoid preprocessing, as a cache lookup on the source
file path and compiler options returns a list of include files and their modification times. If
those weren't updated, that counts as a 'direct hit'. Otherwise it falls back to preprocessing the
source and trying to look-up its hash in the cache. If successful, that counts as a 'preprocessed
hit'.

The main barrier preventing cache sharing across git branches has to do with the fact we create
separate build slaves for each git branch, which results in different source and binary directories
being seen by the compiler. More specifically:

The compiler sets the __FILE__ macro to be the absolute path to the source file. The value of that
macro leaks to preprocessed source through the use of assert().

We pass preprocessor definitions like -DMACRO__prefix="...", -DMACRO__builddir="...",
   -DMACRO__top_srcdir="...", which can also leak to preprocessed source.

To address this issue, the new zb-virtual-slave tool was developed. It's meant to wrap around other
build tools, such as zb-build-with-progress, zb-deploy, zb-shell, etc. and leading them to believe
we are always building a branch called _virtual_. This way, the compiler will see identical source
and binary locations, enabling cache hits across different git branches. zb-virtual-slave uses the
map-dir-and-exec tool internally, which you will have to build and install yourself.

note: need to install map-dir-and-exec package


{1} build-stack
$ cd ~/sources/
zb-virtual-slave zb-shell
ZB_CFG=humax.1000 zb-make

note: shall have pysical data dir under /. when use sym link to the home, failed to build.


<check-package>
dpkg-query -l | grep humax

{2} update-cds; core driver software
https://wiki.youview.co.uk/display/canvas/HOWTO+Install+Humax+DTR-T1000+T1000+H21.5.0

note: follow instruction, need to find out box type, CTK or not. 


{3} update the zinc whcich was built
1. follow "boot from HDD" instruction from:
https://wiki.youview.co.uk/display/canvas/HOWTO+Install+Humax+DTR-T1000+T1000+H21.5.0


{layout}
/data/builds/master/huawei.370/zinc-build-root/release-huawei-bcm7409

/data/builds/master/huawei.370/zinc-install-root/release/huawei-bcm7409$ tree -L 3
.
|-- opt
|   `-- zinc-trunk
|       |-- bin
|       |-- devel
|       |-- include
|       |-- lib
|       |-- libexec
|       |-- oss
|       |-- platform
|       |-- share
|       |-- tests
|       `-- var
`-- usr -> /opt/oem-staging/huawei-bcm7409/usr


={============================================================================
*kt_dev_uv_set_004* setup: build single component in the stack

OEM.Huawei/OEM.Huawei.3rdPartyStack/setvars-huawei-bcm7409.sh

note: 'comment' this to inlcude this in the build.

# export ZINC_EXCLUDE_PROJECTS="Polonium.NexusInspect"

cd =~/sources/DEVARCH/
ZB_CFG="huawei.370" zb-make Polonium/Polonium.NexusInspect
ZB_CFG="huawei.370" zb-make


={============================================================================
*kt_dev_uv_set_005* setup: serial connection

sudo screen /dev/ttyS0 115200


={============================================================================
*kt_dev_uv_set_006* 


={============================================================================
*kt_dev_uv_set_007* setup: huawei build the stack

sudo apt-get install huawei-dn370t-toolchain
sudo apt-get install huawei-dn370t-staging
sudo apt-get install huawei-stbgcc-4.5.3-2.4

note: this will picks up the correct file from the link below.
http://devarch-deb.dev.youview.co.uk:8080/job/DEBs/ws/DEBS/

huawei-dn370t-toolchain_20120927-2_i386.deb
huawei-dn370t-nexus_20131104-2_i386.deb
huawei-dn370t-staging_20140804-2_i386.deb

https://wiki.youview.co.uk/display/canvas/HOWTO+Install+Huawei+DN370T+PVR1+B37SP11

ZB_CFG=huawei.370 zb-make


={============================================================================
*kt_dev_uv_set_008* setup: oem staging and toolchanis

https://wiki.youview.co.uk/display/canvas/OEM+Staging+and+Toolchains?src=search

.
|-- adobe
|   `-- stagecraft
|-- Adobe
|   |-- Flex4SDK -> flex_sdk_4.1.0.16076_with_air_sdk_2.5_linux
|   `-- flex_sdk_4.1.0.16076_with_air_sdk_2.5_linux
|-- HipChat
|   |-- bin
|   |-- lib
|   `-- share
|-- oem-staging            // note: it does have headers or possibly sources
|   |-- huawei-bcm7409
|   |-- huawei-dn370t -> huawei-bcm7409
|   |-- humax-dtr_t1000
|   `-- oem-staging.md5
|-- pac
|   |-- lib
|   |-- LICENSE
|   |-- pac
|   |-- README
|   |-- res
|   `-- utils
|-- stagecraft-2.0 -> stagecraft-2.5.2.3.20120105-sl6-directfb1.4-windowed-C12M2-maine_coon-release-20120518
|-- stagecraft-2.5.2.3.20120105-sl6-directfb1.4-windowed-C12M2-maine_coon-release-20120518
|   |-- bin
|   `-- share
`-- toolchains
    |-- generic-stbgcc-4.4.5-2.0
    |-- huawei-bcm7409 -> generic-stbgcc-4.4.5-2.0
    |-- huawei-stbgcc-4.5.3-2.4
    |-- humax-dtr_t1000 -> generic-stbgcc-4.4.5-2.0
    `-- humax-stbgcc-4.5.3-2.4

<refsw>
The refsw headers from staging:
/opt/oem-staging/huawei-bcm7409/usr/local/refsw/nexus

This is copied to build root to be used in building and these are the same:
/data/builds/master/huawei.370/zinc-install-root/release/huawei-bcm7409/usr/local/refsw/nexus


={============================================================================
*kt_dev_uv_set_009* setup: boxes

root Password is onlydebug (Humax) TestHw123 (Huawei)

{hmax}
||Hostname||FQDN||IP Address||MAC Address||
humax-0873   humax-0873.dev.youview.co.uk    172.20.35.27   00:03:78:4B:7A:2B

/.ssh -> /var/tmp/authorized_keys


{hwei}
huawei-04877 huawei-04877.dev.youview.co.uk  172.20.33.192  20:F3:A3:70:D1:94


={============================================================================
*kt_dev_uv_set_010* setup: git for dev and oem

<dev-local>
https://git-dev.dev.youview.co.uk/

git clone -b huawei/dn370t gitolite@git-dev:/nexusMgr.git XX

/home/kpark/git-dev/nexusMgr        " cloned
/home/kpark/git-dev/nexusMgr-WIP    " work space for hwei 370

{oem}
/home/kpark/git-oem/*

<hmax>
note: need to figure out branch name
git clone -b huawei/dn370t gitolite@git-humax.dev.youview.co.uk:/nexusMgr.git nexusHmax

<hwei>
git clone -b huawei/dn370t gitolite@git-huawei.dev.youview.co.uk:/nexusMgr.git nexusHwei


={============================================================================
*kt_dev_uv_stack_000* stack: builds

<ET>
Many of these tools rely on the environment variable "ET" to find your checkout of the DEVARCH repo.
The zb-make and zb-build-with-progress tools build the stack out of your source tree, so you can
carry on developing while a build is running. You control this behaviour with the "ZB_BUILD_DIR"
environment variable, so make sure it exists and is writeable by yourself. Similarly, you'll
probably want the tools available in your PATH, so add these to your ~/.profile:

export PATH=~/sources/zinc-git-tools:$PATH
export ET=~/sources/DEVARCH/

$ cd ~/sources/
ZB_CFG=huawei.370 zb-shell
zb-make

OR

zb-virtual-slave zb-shell
ZB_CFG=humax.1000 zb-make


<after-zb-shell>
$ env | grep ^Z
ZINC_USER_BUILD_TYPE=release ~
ZINC_HOST_PREFIX=/opt/zinc-trunk
ZINC_REMOTE_LOGGING_HOST=localhost
ZINC_SRC_ROOT=/data/builds/master/huawei.370/DEVARCH
ZINC_HOST_3PS=/data/builds/master/huawei.370/DEVARCH/OEM.Huawei/OEM.Huawei.3rdPartyStack
ZINC_BUILD_ROOT=/data/builds/master/huawei.370/zinc-build-root 
ZINC_DESTDIR=/data/builds/master/huawei.370/zinc-install-root/release/huawei-bcm7409 ~
ZINC_BUILD_DIR=/data/builds/master/huawei.370/zinc-build-root/release-huawei-bcm7409 ~
ZINC_NATIVE_BUILD_ROOT=/data/builds/master/huawei.370/zinc-build-root
ZB_HOST_CONFIG=huawei-bcm7409
ZINC_BUILD_CFG=debian-7-x86_64
ZINC_INSTALL_ROOT=/data/builds/master/huawei.370/zinc-install-root
ZB_CFG=huawei.370 ~
ZB_BUILD_DIR=/data/builds ~
ZB_BRANCH=master 
ZINC_USER_HOST_PREFIX=/opt/zinc-trunk
ZINC_HOST_CFG=huawei-bcm7409
ZINC_3PS_HOST_PREFIX=/opt/zinc-trunk/oss
ZINC_REMOTE_LOGGING_PORT=4560
ZINC_BUILD_TYPE=release


<build-and-install-dir>

/data/builds/master/huawei.370/zinc-build-root/release-huawei-bcm7409/Polonium/Polonium.NexusInspect

/data/builds/master/huawei.370/zinc-install-root/release
huawei-bcm7409/opt/
`-- zinc-trunk
    |-- bin
    |-- devel
    |-- include
    |-- lib
    |-- libexec
    |-- oss
    |-- platform
    |-- share
    |-- tests
    `-- var

/bin/
airlauncher.sh*
audiofeedbackd*
avahi-launcher*
babysitterd*
cadmiumcontentacquisitiond*
cobaltmetadatabrokerd*
copperannouncementd*
CopperDownloader*
copperlocalstoragerepod*
crbd*
dbusredirect*
dbussenddaemon*
dbuswaitbusname*
deleteTree*
device-manager-launcher*
dial-server*
dial-server-launcher.sh*
exec-then-cleanup-app*
exec-then-cleanup-app.sh*
exec-with-cache*
generate-http-user-agent*
getChildItems*
getItem*
http-dbus-bridge*
http-dbus-bridge-launcher.sh*
https-cache-proxy*
ironmetadatad*
linearsourced*
linearsource-launch*
linearsource-launch-and-sandbox*
lsr-config*
nexus-inspect*
nickelmediad*
on-demand-launcher*
onscreenidd*
onscreenidd-launch*
osmiumd*
pcmplaybackd*
provisioninginformationparser*
purge-polipo-diskcache.sh*
python_launcher.sh*
queryNetworkManager*
radiumairlauncher*
radiumd*
remindersd*
runBrowser.sh*
runNetflix.sh*
run-stagecraft2-functions.sh*
runStagecraft2.sh*
run-stagecraft2-with-cache.sh*
sandbox-drop-privileges*
setItem*
setpgid-and-exec*
sodiumd*
splashScreen*
start-service-over-dbus.sh*
storagemanagementd*
tunerd*
uimanagerd*
w3cEngine*
watcher*
yv-mainui*
yv-remote-booking-agent-activate*
yv-remote-booking-agent-watcher*
yv-start-services.sh*


<zb-virtual-slave>
zb-virtual-slave zb-make
{
  /home/kpark/source/zinc-git-tools/zb/zb-load-config.sh
  {
      pre: ET, ZB_CFG 

      configure_git_for_zb() {

      conf zb.huawei.360.host-config huawei-dn360t
      conf zb.huawei.370.host-config huawei-bcm7409
      conf zb.huawei.372.host-config huawei-bcm7231
      conf zb.humax.1000.host-config humax-dtr_t1000
      }

      do : set ZB_BUILD_DIR, slave_dir=/data/builds/master/pc
  }

  + real_path=/data/builds/master
  + virtual_path=/data/builds/_virtual_
  + exec map-dir-and-exec /data/builds/master:/data/builds/_virtual_ /bin/bash -c '"zb-make"  		2> >( sed -u "s|/data/builds/_virtual_|/data/builds/master|" >&2 ) | sed -u "s|/data/builds/_virtual_|/data/builds/master|"'

}


zb-make:
{
   source $where_am_i/zb/zb-load-config.sh

   ZB_HOST_CONFIG=host 
   cd $ET
   + cd /home/kpark/source/DEVARCH

   build_cmd=${ZB_BUILD_CMD-"make"}
   + build_cmd=make

   <clone>
   /data/builds/master/pc/DEVARCH
   + cd /data/builds/master/pc/DEVARCH
   git fetch origin "$branch"
   + git fetch origin zb/master

   cd "$slave_dir/DEVARCH/Zinc/Zinc.Build"
   + cd /data/builds/master/pc/DEVARCH/Zinc/Zinc.Build

   <setvar>
   {
      source ../../*/*/setvars-$ZB_HOST_CONFIG.sh
      + source ../../Zinc/Zinc.Build/setvars-host.sh

      export HOST_TRIPLE="${ARCH}-pc-linux-gnu"
      ++ export HOST_TRIPLE=x86_64-pc-linux-gnu
      export BUILD_TRIPLE=${HOST_TRIPLE}

      :~/source$ ls -al ./DEVARCH/OEM.Huawei/OEM.Huawei.3rdPartyStack/
      -rwxr-xr-x 1 kpark kpark 1671 Jan  7 15:55 setvars-huawei-bcm7231.sh
      -rwxr-xr-x 1 kpark kpark 1598 Jan  7 15:55 setvars-huawei-bcm7409.sh
      -rwxr-xr-x 1 kpark kpark 1670 Jan  7 15:55 setvars-huawei-dn360t.sh

      :~/source$ ls -al ./DEVARCH/OEM.Humax/OEM.Humax.3rdPartyStack/
      -rw-r--r-- 1 kpark kpark 1822 Jan  7 15:55 setvars-humax-db_t2200.sh
      -rw-r--r-- 1 kpark kpark 1653 Jan  7 15:55 setvars-humax-dtr_t1000.sh
      -rw-r--r-- 1 kpark kpark 1930 Jan  7 15:55 setvars-humax-dtr_t2100.sh
      -rw-r--r-- 1 kpark kpark 2177 Jan  7 15:55 setvars-humax-dtr_t4000.sh
      {
         note: this is for host tools
         ++ source ../../Zinc/Zinc.Build/setvars-common.sh
         {
           +++ ZINC_SRC_ROOT=/data/builds/master/pc/DEVARCH
           +++ ZINC_BUILD_ROOT=/data/builds/master/pc/zinc-build-root

           export ZINC_BUILD_DIR="${ZINC_BUILD_ROOT}/${ZINC_BUILD_TYPE}-${ZINC_HOST_CFG}"
           +++ ZINC_BUILD_DIR=/data/builds/master/pc/zinc-build-root/debug-debian-7-x86_64

           # CXXFLAGS
           if [[ "${ZINC_BUILD_TYPE}" == "debug" ]]
           then
              export CXXFLAGS="-g -O0 -pipe -pthread ${EXTRA_CXXFLAGS:-}"
              export CFLAGS="-g -O0 -pipe ${EXTRA_CFLAGS:-}"
           else
              export CXXFLAGS="-DNDEBUG -O3 -pipe -pthread ${EXTRA_CXXFLAGS:-}"
              export CFLAGS="-DNDEBUG -O2 -pipe ${EXTRA_CFLAGS:-}"
           fi
           +++ [[ debug == \d\e\b\u\g ]]
           +++ export 'CXXFLAGS=-g -O0 -pipe -pthread '
           +++ CXXFLAGS='-g -O0 -pipe -pthread '
           +++ export 'CFLAGS=-g -O0 -pipe '
           +++ CFLAGS='-g -O0 -pipe '

           +++ PKG_CONFIG=/data/builds/master/pc/zinc-install-root/debug/debian-7-x86_64/oss/bin/pkg-config
         }
      }

      note: still running setvars-host.sh

      # We can't build these for PC
      export ZINC_EXCLUDE_PROJECTS="Polonium.GSTNexus Polonium.NexusInspect Polonium.PCMPlayback"

      ++ warnings_flags='-Wall -Wextra -Werror=address -Werror=array-bounds -Werror=c++0x-compat
      -Werror=char-subscripts -Werror=comment -Werror=enum-compare -Werror=format
      -Werror=missing-braces -Werror=nonnull -Werror=parentheses -Werror=pointer-sign
      -Werror=return-type -Werror=sequence-point -Werror=strict-overflow=1 -Werror=trigraphs
      -Werror=unknown-pragmas -Werror=unused-function -Werror=unused-label -Werror=unused-value
      -Werror=volatile-register-var -fdiagnostics-show-option'

      # Enable "Safe" STL wrappers in debug builds.
      # 
      if [[ "${ZINC_BUILD_TYPE}" == "debug" ]]; then
          export CPPFLAGS+=" -D_GLIBCXX_DEBUG "
      fi
      ++ [[ debug == \d\e\b\u\g ]]
      ++ export 'CPPFLAGS+= -D_GLIBCXX_DEBUG '
      ++ CPPFLAGS+=' -D_GLIBCXX_DEBUG '

      # -fstack-protector-all enables the insertion of "canaries" to detect stack-smashing at
      # runtime. The cost of such checks are supposedly small.
      export CPPFLAGS+=" -fstack-protector-all "
      ++ export 'CPPFLAGS+= -fstack-protector-all '
      ++ CPPFLAGS+=' -fstack-protector-all '
   }

   note: back to zb-make

   + build_date='2015-01-09 08:58:17+00:00'
   (
      # Create an environment more like the build servers
      unset DBUS_SESSION_BUS_ADDRESS

      set -o pipefail
      $build_cmd "$@" 2> >( sed -u "s | $ZINC_SRC_ROOT | $ET|" >&2 ) \
      | sed -u "s| $ZINC_SRC_ROOT| $ET|"
   ) && exit_code=0 || exit_code=1 # Don't want to exit on failure

   + unset DBUS_SESSION_BUS_ADDRESS
   + set -o pipefail
}

+ make
+ sed -u 's|/data/builds/master/pc/DEVARCH|/home/kpark/source/DEVARCH|'
 sed -u "s|$ZINC_SRC_ROOT|$ET|" >&2 
++ sed -u 's|/data/builds/master/pc/DEVARCH|/home/kpark/source/DEVARCH|'

<main-makefile>
make[1]: Entering directory `/home/kpark/source/DEVARCH/Zinc/Zinc.Build'
make[1]: Leaving directory `/home/kpark/source/DEVARCH/Zinc/Zinc.Build'

/data/builds/master/pc/DEVARCH/Zinc/Zinc.Build/Makefile

+++ Source: /home/kpark/source/DEVARCH +++
+++ Host build dir: /data/builds/master/pc/zinc-build-root/debug-debian-7-x86_64 +++
+++ Build log dir: /data/builds/master/pc/zinc-build-root/debug-debian-7-x86_64/logs +++
+++ Install location: /data/builds/master/pc/zinc-install-root/debug/debian-7-x86_64 +++
+++ debug build +++
+++ Building Zinc/Zinc.3rdPartyStack +++

note: object files in /data/builds/master/pc/zinc-build-root/debug-debian-7-x86_64/Zinc/*
touch /data/builds/master/pc/zinc-build-root/debug-debian-7-x86_64/Zinc/Zinc.3rdPartyStack.built

+++ Finished Zinc/Zinc.3rdPartyStack +++
+++ Building Zinc/Zinc.DBus-C++ +++
+++ Building Zinc/Zinc.Common +++
+++ Building Zinc/Zinc.Tools.BindingGenerator +++
+++ Building Polonium/Polonium.GSTTSPacer +++

/bin/bash ./libtool  --tag=CXX   --mode=compile g++ -DHAVE_CONFIG_H -I.
-I/home/kpark/source/DEVARCH/Zinc/Zinc.DBus-C++
-I/data/builds/master/pc/zinc-install-root/debug/debian-7-x86_64/oss/include/dbus-1.0
-I/data/builds/_virtual_/pc/zinc-install-root/debug/debian-7-x86_64/oss/lib/dbus-1.0/include
-I/data/builds/_virtual_/pc/zinc-install-root/debug/debian-7-x86_64/oss/include
-I/data/builds/_virtual_/pc/DEVARCH/Zinc/Zinc.DBus-C++/include -I./include
-I/data/builds/_virtual_/pc/zinc-install-root/debug/debian-7-x86_64/include  -isystem
/data/builds/_virtual_/pc/zinc-install-root/debug/debian-7-x86_64/oss/include  -D_GLIBCXX_DEBUG
-fstack-protector-all   -fvisibility-inlines-hidden -fvisibility=hidden -g -O0 -pipe -pthread
-march=core2 -Wall -Wextra -Werror=address -Werror=array-bounds -Werror=c++0x-compat
-Werror=char-subscripts -Werror=comment -Werror=enum-compare -Werror=format -Werror=missing-braces
-Werror=nonnull -Werror=parentheses -Werror=pointer-sign -Werror=return-type -Werror=sequence-point
-Werror=strict-overflow=1 -Werror=trigraphs -Werror=unknown-pragmas -Werror=unused-function
-Werror=unused-label -Werror=unused-value -Werror=volatile-register-var -fdiagnostics-show-option
-MT libdbus_c___1_la-dispatcher.lo -MD -MP -MF .deps/libdbus_c___1_la-dispatcher.Tpo -c -o
libdbus_c___1_la-dispatcher.lo `test -f 'src/dispatcher.cpp' || echo
'/data/builds/_virtual_/pc/DEVARCH/Zinc/Zinc.DBus-C++/'`src/dispatcher.cpp

touch /data/builds/master/pc/zinc-build-root/debug-debian-7-x86_64/Nickel/NickelOnScreenId.System.API.built
+++ Finished Nickel/NickelOnScreenId.System.API +++


={============================================================================
*kt_dev_uv_stack_001* stack: build oem

to set vars:

cd ~/source/DEVARCH/
ZB_CFG=huawei.370 zb-shell

move to the source dir to build:

mipsel-linux-gcc -c src/nexusMgr.c -o nexusMgr.o -DPIC -fpic -std=c99 `pkg-config --cflags nexus directfb`
mipsel-linux-g++ nexusMgr.o -lnexus `pkg-config --libs nexus directfb` -shared -o libnexusMgr.so


<use-autoconf>
# note: must.
export ET=/data/builds/master/huawei.370/DEVARCH/

git clone -b huawei/dn370t gitolite@git-huawei.dev.youview.co.uk:/nexusMgr.git nexusTest

cd nexusMgr

ZINC_USER_BUILD_TYPE=release source $ET/OEM.Huawei/OEM.Huawei.3rdPartyStack/setvars-huawei-bcm7409.sh

./autogen.sh

# note: if goes okay, there shoule be makefile generated.
# note: ET is set to /home/kpark/source/DEVARCH. sometimes not. why?

# $HOST_TRIPLE=mipsel-linux
./configure --host=$HOST_TRIPLE --with-pic --enable-shared --prefix=$PWD/install

make && make install


={============================================================================
*kt_dev_uv_stack_002* stack: startup

cds: core driver software

/opt/cds/etc/rc.user

root# pwd
/opt

root# ls -al
drwxr-xr-x    8 root     root           149 Dec 25 04:33 .
drwxr-xr-x   17 root     root           259 Dec 25 04:33 ..
drwxr-xr-x    3 root     root            33 Dec 25 02:36 adobe
drwxr-xr-x   12 root     root           247 Dec 25 04:33 cds
drwxr-xr-x    4 root     root            84 Dec 18 14:20 netflix
drwxr-xr-x    4 root     root            39 Dec 25 04:33 stagecraft-2.0
lrwxrwxrwx    1 root     root            15 Dec 25 04:33 ui -> /mnt/psi/ui_psi
dr-xr-xr-x    4 root     root            57 Dec 25 02:36 youview
drwxr-xr-x    9 root     root           186 Dec 25 04:33 zinc


<zinc>
root# pwd
/opt/zinc/bin

root# ls
CopperDownloader                     onscreenidd-launch
MediaRouterDbusSpy                   osmiumd
airlauncher.sh                       pcmplaybackd
audiofeedbackd                       persistedpairingrepository_utils.py
avahi-launcher                       provisioninginformationparser
babysitterd                          purge-polipo-diskcache.sh
cadmiumcontentacquisitiond           python_launcher.sh
cobaltmetadatabrokerd                queryNetworkManager
copperannouncementd                  radiumairlauncher
copperlocalstoragerepod              radiumd
crbd                                 remindersd
dbusredirect                         run-stagecraft2-functions.sh
dbussenddaemon                       run-stagecraft2-with-cache.sh
dbuswaitbusname                      runBrowser.sh
deleteTree                           runNetflix.sh
device-manager-launcher              runStagecraft2.sh
dial-server                          sandbox-drop-privileges
dial-server-launcher.sh              setItem
exec-with-cache                      setpgid-and-exec
generate-http-user-agent             sodiumd
getChildItems                        splashScreen
getItem                              start-and-wait-for-busname.sh
http-dbus-bridge                     start-service-over-dbus.sh
http-dbus-bridge-launcher.sh         storagemanagementd
https-cache-proxy                    tunerd
ironmetadatad                        uimanagerd
linearsource-launch                  w3cEngine
linearsource-launch-and-sandbox      watcher
linearsourced                        yv-mainui
lsr-config                           yv-remote-booking-agent-activate
nickelmediad                         yv-remote-booking-agent-watcher
on-demand-launcher                   yv-start-services.sh
onscreenidd

[root@HUMAX bin]# ls
CopperDownloader*                 litaniumsystemmanagerd*
airlauncher.sh*                   lsr-config*
appfactoryreset*                  nexus-inspect*
appstart*                         nickelmediad*
appversion*                       on-demand-launcher*
audiofeedbackd*                   onscreenidd*
avahi-launcher*                   onscreenidd-launch*
babysitterd*                      osmiumd*
bronzemediad*                     pcmplaybackd*
cadmiumcontentacquisitiond*       provisioninginformationparser*
cobaltmetadatabrokerd*            purge-polipo-diskcache.sh*
copperannouncementd*              python_launcher.sh*
copperlocalstoragerepod*          queryNetworkManager*
crbd*                             radiumairlauncher*
dbusredirect*                     radiumd*
dbussenddaemon*                   remindersd*
dbuswaitbusname*                  run-stagecraft2-functions.sh*
deleteTree*                       run-stagecraft2-with-cache.sh*
device-manager-launcher*          runBrowser.sh*
dial-server*                      runNetflix.sh*
dial-server-launcher.sh*          runStagecraft2.sh*
exec-then-cleanup-app*            sandbox-drop-privileges*
exec-then-cleanup-app.sh*         setItem*
exec-with-cache*                  setpgid-and-exec*
formathdd*                        sodiumd*
generate-http-user-agent*         splashScreen*
getChildItems*                    start-service-over-dbus.sh*
getItem*                          storagemanagementd*
goldsystemtimed*                  tunerd*
http-dbus-bridge*                 uimanagerd*
http-dbus-bridge-launcher.sh*     w3cEngine*
https-cache-proxy*                watcher*
indiumd*                          yv-mainui*
ironmetadatad*                    yv-remote-booking-agent-activate*
linearsource-launch*              yv-remote-booking-agent-watcher*
linearsource-launch-and-sandbox*  yv-start-services.sh*
linearsourced*


<lib-third-party>
/usr/local/lib

directfb-1.4-15            libfusion-1.4.so.15.0.0    libpng14.so.14.3.0
libdirect-1.4.so.15        libfusion.so               libsawman-1.5.so.0
libdirect-1.4.so.15.0.0    libinit.so                 libsawman-1.5.so.0.0.4
libdirect.so               libjpeg.so                 libsawman.so
libdirectfb-1.4.so.15      libjpeg.so.7               libshim_nexus.so
libdirectfb-1.4.so.15.0.0  libjpeg.so.7.0.0           libz.so
libdirectfb.so             libnexus.so                libz.so.1
libfreetype.so             libnexusMgr.so             libz.so.1.2.6
libfreetype.so.6           libpng.so                  modules
libfreetype.so.6.4.0       libpng14.so                pkgconfig
libfusion-1.4.so.15        libpng14.so.14

<humax-from-hdd-boot-case>
/mnt/hd1/bin

[root@HUMAX bin]# cat startYVServices.sh 
#!/bin/sh

/opt/zinc/bin/start-service-over-dbus.sh Zinc.ContentAcquisition
/opt/zinc/bin/start-service-over-dbus.sh Zinc.DeviceSoftware
/opt/zinc/bin/start-service-over-dbus.sh Zinc.DeviceManager
/opt/zinc/bin/start-service-over-dbus.sh Zinc.Broker
/opt/zinc/bin/start-service-over-dbus.sh Zinc.UsageCollection
/opt/zinc/bin/start-service-over-dbus.sh Zinc.Application
/opt/zinc/bin/start-service-over-dbus.sh Zinc.LinearSource
/opt/zinc/bin/start-service-over-dbus.sh Zinc.RemoteDiagnostics
/opt/zinc/bin/start-service-over-dbus.sh Zinc.Metadata --requires Zinc.Broker
/opt/zinc/bin/start-service-over-dbus.sh Zinc.Reminders
/opt/zinc/bin/start-service-over-dbus.sh Zinc.Boot


={============================================================================
*kt_dev_uv_stack_004* stack: oem configs

root# getChildItems oem

root# getChildItems oem | grep softwre
oem.activatedsoftware.coredevicesoftware.platformapiversion=2.9.1
oem.activatedsoftware.coredevicesoftware.version=70.37.05
oem.activatedsoftware.coredevitesoftware.version=1.0.0
oem.activatedsoftware.ispconfiguration.version=10002
oem.activatedsoftware.manufacturerconfiguration.version=4
oem.activatedsoftware.platformconfig=
oem.activatedsoftware.platformconfiguration.version=1304
oem.activatedsoftware.platformsoftware.version=2.9.6
oem.software.version=70.37.05
oem.softwaremanagement.coredevicesoftware.manifest.baseurl=http://su.tv.talktalk.net
oem.softwaremanagement.coredevicesoftware.updatepolicy=standard
oem.softwaremanagement.manufacturerconfiguration.baseurl=http://su.tv.talktalk.net
oem.softwaremanagement.manufacturerconfiguration.updatepolicy=standard


root# which getChildItems
/opt/zinc/bin/getChildItems


={============================================================================
*kt_dev_uv_stack_005* stack: brcm debug level

Invalid level. Should be: err, wrn, msg or none.
echo "nexusMgr msg" >> /proc/brcm/debug


={============================================================================
*kt_dev_uv_stack_006* stack: netflix ps line

16386     1518 66.4 30.2 229456 97392 ?        Sl   14:45   1:03 /opt/netflix/netflix
--write-data-path /app-data/var --cache-path /app-data/cache --disk-cache-path
/app-data/var/nrd/gibbon --user-agent YouViewPlayer4/1.0 (Huawei Technologies Co., Ltd;
    DN370T.02.02.T; 001; CDS/70.37.05; API/2.9.1; PS/2.9.6) (+DVR+FLASH+HTML+MHEG+IPCMC)
--dpi-friendlyname YouView-0067 --device-model YouView_DN370T --esn
YVWTTGD370-9cac040a-6397-4bbd-a0dd-61743837e958 --mdx-manufacturer Huawei Technologies Co., Ltd
--mdx-model-name YouView_DN370T --software-version 70.37.05 --no-mdx
--ui-query-string=source_type=2&trackId=13783779&trackUrl=https%3A%2F%2Fapi.netflix.com%2FBaSePaTh%3Fpage%3DMetaSearch%3F


={============================================================================
*kt_dev_uv_stack_007* stack: virtual rcu

https://wiki.youview.co.uk/display/canvas/2012/04/23/Automating+input+to+the+UI?src=search

<hwei-case>
$ scp libyouviewrcu.so root@172.20.33.192:/opt/zinc/lib
$ scp libyouviewrcushim.so root@172.20.33.192:/usr/local/lib/directfb-1.4-15/inputdrivers/
$ scp libyouviewrcushim.so root@172.20.33.192:/opt/zinc/oss/lib/directfb-1.4-15-pure/inputdrivers/
$ scp zinc-send-input-key root@172.20.33.192:/usr/local/bin

note: no need to build drivers for hwei. Simply use humax binary which are pre-built.

note: the difference is whether use host nc or busybox nc

# to run it on the box
$ scp zinc-send-input-key root@172.20.33.192:/usr/local/bin

# to run it on the host
./zinc-send-input.sh page_up 172.20.33.192 2033

<keys>
See this for other keys:
https://svn.youview.co.uk/Canvas/Documents/Presentation.Technology/trunk/2105-S%20Flash%20Presentation%20Engine%20Integration%20Specification%20v1.1E%20tracked.pdf

menu                             YouView
page_up                          Channel Up
page_down                        Channel Down
escape                           Close
cursor_up/down/left/right        
ok                               Enter
back                             Back


={============================================================================
*kt_dev_uv_stack_100* stack: elememt names

element or component names
https://wiki.youview.co.uk/display/canvas/YouView+Element+Names?src=search



={============================================================================
*kt_dev_uv_stack_101* stack: vanadium: runbrowser

# from terminal
Running '/opt/zinc-trunk/bin/runBrowser.sh --app /app --data /app-data --app-launch-parameters
http://refdata.youview.com/mpeg7cs/YouViewIdentifierTypeCS/2011-10-22#groupId.application
crid://bbc.co.uk/iplayer/flash_player/1
http://refdata.youview.com/mpeg7cs/YouViewIdentifierTypeCS/2012-11-08#applicationPublisherIdentifier
uk.co.bbc
http://refdata.youview.com/mpeg7cs/YouViewIdentifierTypeCS/2014-09-25#groupId.application.ondemandPlayer
crid://bbc.co.uk/iplayer/flash_player/1 launch_context.ui.youview.com portal tvp.bbc.co.uk iplayer'
in sandbox...  /app/META-INF/HTML/application.xml validates


app-dir    : /app
data-dir   : /app-data
url        : http://www.bbc.co.uk/iplayer/
sources    : http://www.test.bbc.co.uk http://www.bbc.co.uk http://www.int.bbc.co.uk http://www.stage.bbc.co.uk http://filegateway.youview.co.uk
cache-size : 50000000
channel    : 
exec-helper: /opt/zinc-trunk/bin/exec-then-cleanup-app


./Vanadium/Vanadium.W3CEngine/scripts/runBrowser.sh

exec_wrapper="$prefix/bin/exec-then-cleanup-app"
[ -x "$exec_wrapper" ] || exec_wrapper=""

cmd="${RUN_BROWSER_CMD:-$prefix/bin/w3cEngine}"

exec $exec_wrapper "$cmd" \
$enable_webkit_remote_debugging_as_needed \
-cache "$app_data_dir/client-cache" \
-cache-size "$cacheSize" \
-jar "$app_data_dir/cookies.sqlite" \
-url "$url" \
-src "$sources"


** KT: ===================== **
** KT: exec-then-cleanup-app ** pid((null)) 
** KT: exec-then-cleanup-app: pid(null) 
** KT: exec-then-cleanup-app: parent: argv[1](/opt/zinc-trunk/bin/w3cEngine) 
** KT: exec-then-cleanup-app: child: argv[0](/opt/zinc-trunk/bin/exec-then-cleanup-app) parent_pid(1479) 
** KT: ===================== **
** KT: exec-then-cleanup-app ** pid(1479) 
** KT: exec-then-cleanup-app: pid(not null), cleanup_exe(/opt/zinc-trunk/bin/nexus-inspect) 
Going to watch pid: 1479

# when do abnormal termination
** HMAX KT: Releasing Nexus resources: expected 1479 == shm 1479 

# when do normal termination
** HMAX KT: The nexus resources are currently free. shm is 0


={============================================================================
*kt_dev_uv_stack_101* stack: vanadium: runbrowser

  973  2015-02-02 12:28:38 vim DEVARCH/.git/config 
  974  2015-02-02 12:29:10 which rsync
  975  2015-02-02 12:29:21 ssh root@humax-0873
  976  2015-02-02 12:30:02 ./setup-humax/setup-humax.sh -h humax-0873
  977  2015-02-02 12:30:20 ./setup-humax/setup-humax.sh -f humax-0873
  978  2015-02-02 12:31:00 zb-deploy -o humax.1000 -- -r


={============================================================================
*kt_dev_uv_stack_200* commands

# what?
root# setItem platform.settings.enable-ipcrb 1

# log?
tail -f /opt/zinc/var/daemons/crbd/log/helium.log


How to Introspect DBus from the Command Line
https://wiki.youview.co.uk/display/canvas/How+to+Introspect+DBus+from+the+Command+Line?src=search
# to see messages on dbus
root# dbus-monitor "interface=Zinc.Application.ApplicationManager"

# what is it? LSR?
root# getChildItems oem

# what?
export GST_PLUGIN_PATH=/opt/zinc/oss/lib:/opt/zinc/oss/lib/gstreamer-1.0
export LD_LIBRARY_PATH=/lib:/usr/local/lib:/opt/zinc/oss/lib/gstreamer-1.0:/opt/zinc/oss/lib:/opt/zinc/oss/lib/python2.6

LD_PRELOAD=/usr/local/lib/libdirectfb.so:/usr/local/lib/libdirect.so:/usr/local/lib/libinit.so gst-launch-1.0 souphttpsrc location=http://54.225.86.153/INT01_LCN_551.sdp ! vqesdpdemux caps=video/mpegts ! queue ! tsnexusbin 


={============================================================================
*kt_dev_uv_wiki_001* dbus-monitor

http://dbus.freedesktop.org/doc/dbus-monitor.1.html

root# dbus-monitor --help
Usage: dbus-monitor [--system | --session | --address ADDRESS] [--monitor | --profile ] [watch expressions]

# to capture
dbus-monitor > /mnt/hd1/mylogs.log &
dbus-monitor | tee /mnt/hd1/mylogs.log &

# To launch Dbus-Monitor on your STB, and inspect MediaRouter activity, run the following command:
dbus-monitor "interface=Zinc.Media.MediaRouter"

# will only display MediaRouter SourceEvent messages:
dbus-monitor | grep -C 2 "member=SourceEvent"


{dbus-spy}
https://wiki.youview.co.uk/display/YVDP/How+to+inspect+MediaRouter+activity
This is a python script and run on the box.

MediaRouter Dbus Spy is a tool that prints all the MediaRouter dbus communications in a more
readable format than the raw output. It also reports when a new application is launched or killed
and any MediaRouter crash.


{dbus-lsdebug}
There are many tools under box:/opt/zinc/devel/bin/ and lsdbus is one of them and is a script.

https://wiki.youview.co.uk/display/canvas/How+to+Introspect+DBus+from+the+Command+Line


={============================================================================
*kt_dev_uv_hwei_001* stack: convert ro filesystem to rw

From the release, follow the step 3:

https://wiki.youview.co.uk/display/canvas/HOWTO+Install+Huawei+DN370T+PVR1+B37SP11

3. Boot from HDD

From SSH or the serial console run the following command:

mkdir -p /mnt/nand/userdata/data && echo "rw" > /mnt/nand/userdata/data/rw_cmd

The next boot will take slightly longer than normal as the files are copied from nand to the harddisk.


={============================================================================
*kt_dev_uv_task_001* task:01: nexusMgr

{inspect}
/bin/nexus-inspect -r -p "${parent_pid}"


{mgr-interface}
nexusMgr interfaces:

BcmNexus_Audio_Mixer_Register(NEXUS_AudioMixerHandle hMixer)
BcmNexus_Audio_Mixer_Unregister(void)
BcmNexus_Graphics_Resources_Acquire(BcmNexus_Graphics_Resources_Config *)
BcmNexus_Graphics_Resources_Release(const BcmNexus_Graphics_Resources *)
BcmNexus_ImageDecoder_Resources_Acquire(const BcmNexus_ImageDecoder_Resources_Config *)
BcmNexus_ImageDecoder_Resources_Release(const BcmNexus_ImageDecoder_Resources *)
BcmNexus_Input_Resources_Acquire(const BcmNexus_Input_Resources_Config *)
BcmNexus_Input_Resources_Release(const BcmNexus_Input_Resources *)
BcmNexus_Key_Last_Key_Timestamp(void)
BcmNexus_Platform_Init(void)
BcmNexus_Platform_Uninit(void)
BcmNexus_Screen_Capture(void)
BcmNexus_SetMixerPath(NEXUS_AudioMixerHandle hmixer, const BcmNexus_StreamPlayer_Resources *resources)
BcmNexus_Set_Last_Key_Timestamp(void)
BcmNexus_SoundOutput_Resources_Acquire(const BcmNexus_SoundOutput_Resources_Config *)
BcmNexus_SoundOutput_Resources_Release(const BcmNexus_SoundOutput_Resources *)
BcmNexus_SoundOutput_SetVolume(BcmNexus_SoundOutput_Volume, unsigned)
BcmNexus_StreamPlayer_Resources_Acquire(const BcmNexus_StreamPlayer_Resources_Config *)
BcmNexus_StreamPlayer_Resources_Avaiable(void)
BcmNexus_StreamPlayer_Resources_Release(const BcmNexus_StreamPlayer_Resources *)
BcmNexus_UnSetMixerPath(NEXUS_AudioMixerHandle hmixer, const BcmNexus_StreamPlayer_Resources *resources)


{shm}
<from-inspect>
// return true if no shared mem opens or destroied it successfully. so no process owns it
static bool do_platform_init(size_t shMemSz);

static void releaseNexusResources( BcmNexus_Shared_Memory *shmem )
{
  shmem->resource_pid = getpid();
  printf( "Reset resource_pid\n" );
  /* set callback to NULL */

  // <out> commented out since no support from HWEI
  // resetDimmingSetting(shmem);
  // {
  //  NEXUS_PictureCtrl_GetCommonSettings( sharedMem->videoWindow, &picture_settings );
  // }

  NEXUS_VideoDecoder_Stop( shmem->videoDecoder );
  NEXUS_AudioDecoder_Stop( shmem->audioDecoder[0] );

  // <out> commented out since no support from HWEI
  // for (uint8_t i = 0; i < MAX_PUMP_NUM; ++i)
  // {
  //   // stopPlayPump( shmem->playpump[i] );
  //   {
  //     NEXUS_PlaypumpSettings playpump_settings;
  //     NEXUS_Playpump_Stop( playPump );
  //     NEXUS_Playpump_GetSettings( playPump, &playpump_settings );
  //     NEXUS_Playpump_SetSettings( playPump, &playpump_settings );
  //   }
  // }

  NEXUS_VideoDecoder_Flush( shmem->videoDecoder );

  // <mod> HWEI has two audio decoders
  NEXUS_AudioDecoder_Flush( shmem->audioDecoder[0] );

  // <out> commented out since no support from HWEI
  // for (uint8_t i = 0; i < MAX_PUMP_NUM; ++i)
  // {
  //   NEXUS_Playpump_Flush( shmem->playpump[i] );
  // }

  shmem->resource_pid=0;
}

<missed-from-huawei>
These are fields that huawei mgr DO NOT HAVE from what inspect tool uses.

BcmNexus_State.sharedMem->videoWindow;
BcmNexus_State.sharedMem->playPump[i];


<from-inspect>
typedef struct
{
  NEXUS_AudioMixerHandle      mixer;
  NEXUS_AudioPlaybackHandle   pcmPlayback[NEXUS_NUM_AUDIO_PLAYBACKS];
  NEXUS_AudioDecoderHandle    audioDecoder[1];           // used
  NEXUS_Ac3EncodeHandle       ac3Encoder;
  NEXUS_StcChannelHandle      stcChannel;
  NEXUS_VideoDecoderHandle    videoDecoder;              // used
  NEXUS_VideoWindowHandle     videoWindow;               // used
  NEXUS_PlaypumpHandle        playpump[MAX_PUMP_NUM];    // used
  NEXUS_DmaHandle             dmaHandle;
  pid_t                       resource_pid;
} BcmNexus_Shared_Memory;


<from-mgr-humax>
typedef struct {
  //
  // 'same' as inspect
  //
  NEXUS_AudioPlaybackStartSettings    audioStartSettings;
  bool                                pcmStarted[NEXUS_NUM_AUDIO_PLAYBACKS];
} BcmNexus_Shared_Memory;

<from-mgr-huawei>
typedef struct {
    NEXUS_AudioMixerHandle              mixer;
    NEXUS_AudioPlaybackHandle           pcmPlayback[NEXUS_NUM_AUDIO_PLAYBACKS];
    NEXUS_AudioDecoderHandle            audioDecoder[2];
    NEXUS_VideoDecoderHandle            videoDecoder;
} BcmNexus_Shared_Memory;



{pid-check}
<from-inspect>
When the given pid is the same as shm pid, then do release:

if ( 0 == expected_owning_pid || expected_owning_pid == sharedMem->resource_pid )

<from-mgr-humax>
BcmNexus_StreamPlayer_Resources_Acquire( const BcmNexus_StreamPlayer_Resources_Config *config)
{
  // check in both oem. this prevents the same process getting the same.
  if (BcmNexus_State.streamResource) {
    BDBG_MSG_TRACE(("BcmNexus_StreamPlayer_Resources_Acquire: Already acquired!!"));
    return NULL;
  }

  // check and if already owns by the other process then returns. only when no
  // one owns it, go forward
  if( (BcmNexus_State.sharedMem->resource_pid != 0) && (BcmNexus_State.sharedMem->resource_pid != getpid()) )

  // set to say i owns it
  BcmNexus_State.sharedMem->resource_pid = getpid();
}

BcmNexus_StreamPlayer_Resources_Release()
{
  // set pid = 0
}

note: Q: the below is ONLY for humax and not used in inspect tool. Who's using it?

BcmNexus_StreamPlayer_Resources_Avaiable(void)
{
  if( (BcmNexus_State.sharedMem->resource_pid == 0) || (BcmNexus_State.sharedMem->resource_pid == getpid()) )
}


{hwei-mgr-modification}
<playpump>
note: The below is only for Humax and also has a pair for Init and Uninit for each audio and video.
BcmNexus_Platform_Init_Video(void);

For HWEI, the below do the work that Init_Audio and Init_Video do in HMAX case. Hence added playpump
open code in:
BcmNexus_Platform_Init_Audio(void);

However, no pair but instead uninit done in: 
BcmNexus_StreamPlayer_Resources_Release(const BcmNexus_StreamPlayer_Resources *resources_)

Added playpump in SHM structure and handles it in Init and Release.

<videoWindow>
note: do not use videoWindowSD in inspect tool so not shared in shm.

BcmNexus_State.sharedMem->videoWindow;

As with playpump, init and uninit done in Acquire and Release:

BcmNexus_StreamPlayer_Resources_Acquire
BcmNexus_StreamPlayer_Resources_Release

note: Unline HMAX, NO input connection on videoWindow in Acquire and so no handle in Release.

Added videoWindow in SHM structure and handles it in Acquire and Release.

This cause opps:
Code: 00000000  8fa20010  3c04e1bd <8c420000> 24848dbc  afa20010  8fa30010  8fa20014  0062001a
### 00:00:22.574 nexus_driver_callbacks: two apps can't register for the same callback for the same handle
*** 00:00:22.574 nexus_driver_callbacks: nexus_driver_callback_to_driver: (HDMI_OUTPUT:0xcf3a6c80) not enough resources to map callback 0xc04:0xe1d60064
*** 00:00:22.574 BHDM_EDID: Overriding 1366x768p/1360x768p to BFMT_VideoFmt_e720p
!!! Assert 'Bad object of expected type #NEXUS_VideoWindow:0xdeadda7a (0x0:0xe19f39b4)' Failed at /home/gejing/dn370tb37sp05/bcm7409/refsw6.5/nexus/modules/display/7420/src/nexus_video_window.c:1285
BKNI_Fail: forcing oops
CPU 0 Unable to handle kernel paging request at virtual address 00000000, epc == e178ec90, ra == e178ec88


{open-and-start}
<from-mgr-humax>

Q: nexusMgr already has Init and Uninit interface. Is it okay to use these rather than implementing
the proposed function? 

BcmNexus_Platform_Uninit(void);

A: NO. Since Init and Uninit pair do 'open' and close but inspect tool uses 'stop'. Interestingly, the
nexusMgr do not use 'start' interface. Does it mean that do start automatically when it is opened?


BcmNexus_State.sharedMem->ac3Encoder = NEXUS_Ac3Encode_Open(NULL);


{design} the suggested call
1. check manager's init state and the given pid.

if( !BcmNexus_State.initialized && pid != resource_pid )
   return;

2. set shm resource pid = 0 at the end of the call.


{tickets}
https://jira.youview.co.uk/browse/DEVARCH-8092
Provide a method in Huawei's nexusMgr to release resources acquired by a pid

<proposed-api>
The proposed interface in OEM nexusMgr code.
BcmNexus_Release_All_Resources_Acquired_By_Process(pid_t pid);

https://jira.youview.co.uk/browse/YVHUAWEI-6095
Kernel oops when killing w3cEngine or Netflix

Chris Dudding added a comment - Last Wednesday 15:34
B37SP05 is an engineering release, so the "kernel oops" fixes are not applied in the latest Huawei
FR13 release (B37SP11). We've asked them to apply the fix into their main FR13 branch. We will mark
this ticket as resolved when the fix is available in the next FR13 release.

Zegen Pei added a comment - Last Friday 02:25
fixed in 70.37.13

note: update. 2015.01.15. tried the eng. release and seen no kernel oops any more.


https://jira.youview.co.uk/browse/DEVARCH-8081
<TODO> 1
If we are to proceed with `nexus-inspect` as a solution, we separately need OEMs to move the struct
definition into the header file, but for now, we should identify which devices the current
implementation is compatible with. 

Device Works (Y/N)   Comments
Humax T1000          Y 
Humax T2100/T2000    Y 
Humax T2200          Y 
Huawei DN370T        N 
Huawei DN372T 
Huawei DN360T

note: before that need to verify #6095 first since it cause opps when kill apps.

1. this is function sets resource_pid in humax case
BcmNexus_StreamPlayer_Resources_Acquire(const BcmNexus_StreamPlayer_Resources_Config *)

2. We could perhaps make an initial implementation of this for each OEM and provide as a patch to
OEMs, or if that proves too problematic in the Huawei case, leave it as an empty "no-op", and let
them fill-in the implementation.

3. At the moment Humax saves the pid of the last process and Ideally we should know what process
acquired each resource so we can more safely release them. Some testing will tell us how necessary
it is for now.

https://jira.youview.co.uk/browse/DEVARCH-8080
<disable>
This can be disabled by removing either of the executables:
    /opt/zinc/bin/exec-then-cleanup-app.sh
    /opt/zinc/bin/nexus-inspect


{build}
ZB_CFG=huawei.370 zb-shell


{logs}
2015.01.16: 

1. able to build nexus mgr which has debug print mesg to see if it is loaded and used.  found the
problem which prevents me copying the built lib to a box since box has read-only fs. need to make it
rw fs.

2. managed to make a fs writable.

3. however, tried to use the lib built on my own, the box doesn't boot up but when use the original
lib works okay. why?

4. __FUNCTION__ macro seems to cause one problem. need to check.

5. there is the latest nexusMgr code from HWEI and tried that as well. But no success. The code from
https://jira.youview.co.uk/browse/YVHUAWEI-5895

6. three versions of nexus mgr: from uv git, from the gira, from the staging folder.

7. the log line
Error org.freedesktop.DBus.Error.NoMemory: Launcher could not run (out of memory)


2015.01.19, Mon:

1. Tried three variants of sources. None of them works. Asked Bomen(HWEI guy) to have a trace log
for a working case to compare.

2015.01.20, Tue:

1. Created a new ticket for an issue that cannot build a working nexusMgr. 
https://jira.youview.co.uk/browse/YVHUAWEI-6598

2. Ongoing discussion about features to implement.
https://jira.youview.co.uk/browse/YVHUAWEI-6095


2015.01.21, Wed:

1. Hack sources

HUAWEI_SHARED_RESOURCE        : defed in src

NEXUS_HAS_PICTURE_DECODER     : NO
_SC_DIRECT_NEXUS_             : NO
NEXUS_NUM_XXX                 : NO
DFB_PLATFORM_VERSION_MAJOR    : NO
DUAL_OUTPUT                         : defed in pkg config for hwei and hmax
NEXUS_HAS_DMA && NEXUS_HAS_SECURITY : defed in pkg config
BCMEXUS_STREAM_XXX                  : NO
USE_SIMPLE_DECODER                  : NO


2015.01.29, Thu:

Investigating shmget error.

" from nexusMgr log line
log-usb-Mon-Jan-26-12:01:40:1253:*** KT: 0121: NEW BcmNexus_Platform_Init_Audio: shm size(24) ***

" from proc device
305450176

cat /proc/sysvipc/shm
key         shmid    perms    size  cpid  lpid nattch uid   gid  cuid  cgid      atime      dtime      ctime
305450176   163844   666      24    1063  1395 4      504   504   504   504 1422517874 1422517866         33
 
504       1063 12.6  9.7 502416 31352 ?        Sl   07:50   8:03 /opt/cds/bin/huaweidaemon

However, inspect asks 28 bytes which is the cause of the error.


==============================================================================
vim:tw=100:ts=3:ft=help:norl:
