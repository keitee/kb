*kt_dev_04*                                                                tw=100

KT KB. DEVELOPMENT. WEB.

/^[#=]{
Use #{ for a group and ={ for a item

|kt_dev_web_001| NPAPI
|kt_dev_web_002| url-encode
*kt_dev_web_003* qunit
*kt_dev_web_003* java scripts to check on video element
*kt_dev_web_004* html standard
*kt_dev_web_004* w3-server
*kt_dev_web_005* crome dev tool
*kt_dev_web_005* user agent
*kt_dev_web_005* http-spec-term
*kt_dev_web_005* http-status-code
*kt_dev_web_005* cookie
*kt_dev_web_005* w3-cgi
*kt_dev_web_005* w3-php
*kt_dev_web_005* w3-php-man
*kt_dev_web_004* w3-rest
*kt_dev_web_005* dropbox


# ============================================================================
#{
={============================================================================
*kt_dev_web_001* NPAPI

{js-to-native}
You can bundle an NPAPI plugin with your extension, allowing you to call into native binary code
from JavaScript. 

NPAPI is being phased out. Consider using alternatives. NPAPI is a really big hammer that should
only be used when no other approach will work. 

Code running in an NPAPI plugin has the full permissions of the current user and is not sandboxed or
shielded from malicious input by Google Chrome in any way. You should be especially cautious when
processing input from untrusted sources, such as when working with content scripts or
XMLHttpRequest. 

How to develop an NPAPI plugin is outside the scope of this document. See Mozilla's NPAPI plugin
reference for information on how to do that. 

https://developer.mozilla.org/en-US/Add-ons/Plugins

<what-plugin-is>
Plugins are shared libraries that users can install to display content that the application itself
can't display natively. For example, the Adobe Reader plugin lets the user open PDF files directly
inside the browser, and the QuickTime and RealPlayer plugins are used to play special format videos
in a web page.

Plugins are now a legacy technology. They are not available on most mobile devices. Mozilla
encourages website developers to avoid using plugins wherever possible. If there are plugin features
which are not available in the web platform, we encourage developers to post their use cases to
mozilla.dev.platform project list, so that Mozilla can prioritize web platform work to make those
use cases possible.

Plugins are written using NPAPI, the cross-browser API for plugins. The main source of documentation
for NPAPI is the Gecko Plugin API Reference. To make your plugin scriptable from web pages, use
npruntime.

Plugins can be written completely from scratch using C APIs (usually in C or C++) or they may be
built on a plugin framework such as Firebreath, JUCE, or QtBrowserPlugin. There are also some code
generation tools that may be helpful. More information about these tools can be found on the
External Resources page.

Plugins are different from extensions, which modify or enhance the functionality of the browser
itself. Plugins are also different from search plugins, which plug additional search engines in the
search bar.


={============================================================================
*kt_dev_web_002* url-encode

http://www.url-encode-decode.com/

What is URL encoding?

URL encoding stands for encoding 'certain' characters in a URL by replacing
them with one or more character triplets that consist of the percent character
"%" followed by two hexadecimal digits. The two hexadecimal digits of the
triplet(s) represent the numeric value of the replaced character.

For example, the string: François ,would be encoded as: Fran%C3%A7ois

The "ç" is encoded in UTF-8 as two bytes C3 (hex) and A7 (hex), which are then
written as the three characters "%c3" and "%a7" respectively. This can make a
URI rather long (up to 9 ASCII characters for a single Unicode character), but
the intention is that browsers only need to display the decoded form, and many
protocols can send UTF-8 without the %HH 'escaping'. 

The term URL encoding is a bit inexact because the encoding procedure is not
limited to URLs (Uniform Resource Locators), but can also be applied to any
other URIs (Uniform Resource Identifiers) such as URNs (Uniform Resource
    Names). Therefore, the term percent-encoding should be preferred. 


When and why would you use URL encoding?

When data that has been entered into HTML forms is submitted, the form field
names and values are encoded and sent to the server in an HTTP request message
using method GET or POST, or, historically, via email. The encoding used by
default is based on a very early version of the general URI percent-encoding
rules, with a number of modifications such as newline normalization and
replacing spaces with "+" instead of "%20". The MIME type of data encoded this
way is application/x-www-form-urlencoded, and it is currently defined (still
    in a very outdated manner) in the HTML and XForms specifications. In
addition, the CGI specification contains rules for how web servers decode data
of this type and make it available to applications.

When sent in an HTTP GET request, application/x-www-form-urlencoded data is
included in the query component of the request URI. When sent in an HTTP POST
request or via email, the data is placed in the body of the message, and the
name of the media type is included in the message's Content-Type header. 


={============================================================================
*kt_dev_web_003* qunit

https://qunitjs.com/intro/

You probably know that testing is good, but the first hurdle to overcome when
trying to write unit tests for client-side code is the lack of any actual units;
JavaScript code is written for each page of a website or each module of an
  application and is closely intermixed with back-end logic and related HTML. In
  the worst case, the code is completely mixed with HTML, as inline events
  handlers.

This is likely the case when no JavaScript library for some DOM abstraction is
being used; writing inline event handlers is much easier than using the DOM APIs
to bind those events. More and more developers are picking up a library such as
jQuery to handle the DOM abstraction, allowing them to move those inline events
to distinct scripts, either on the same page or even in a separate JavaScript
file. However, putting the code into separate files doesn’t mean that it is
ready to be tested as a unit.

What is a unit anyway? In the best case, it is a pure function that you can deal
with in some way - a function that always gives you the same result for a given
input. This makes unit testing pretty easy, but most of the time you need to
deal with side effects, which here means DOM manipulations. It's still useful to
figure out which units we can structure our code into and to build unit tests
accordingly.

<equal>
http://api.qunitjs.com/equal/

equal( actual, expected [, message ] )


={============================================================================
*kt_dev_web_003* java scripts

https://developer.mozilla.org/bm/docs/Web/JavaScript


={============================================================================
*kt_dev_web_003* java scripts to check on video element

video.addEventListener("timeupdate", function() {
    equal(video.currentTime, 6, "Unexpected currentTime");
    equal(video.played.length, 1, "Unexpected played range");
    equal(video.played.start(0), 0, "Unexpected start of played range");
    equal(video.played.end(0), 6, "Unexpected end of played range");
    equal(video.seekable.length, 1, "Unexpected seekable range");
    equal(video.seekable.start(0), 0, "Unexpected start of seekable range");
    equal(video.seekable.end(0), 1200, "Unexpected end of seekable range");
    equal(video.buffered.length, 1, "Unexpected buffered range");
    equal(video.buffered.start(0), 0, "Unexpected start of buffered range");
    equal(video.buffered.end(0), 256, "Unexpected end of buffered range");
    start();
});

note: BBC iplayer uses 'mediaPlayerVideo' ALWAYS

(function() {
    video = document.getElementById('mediaPlayerVideo');
    video.addEventListener("ended", function() {
    console.log("ended");
    });
})()

(function() {
    video = document.getElementById('mediaPlayerVideo');
    video.addEventListener("timeupdate", function() {
    console.log("currentTime:", video.currentTime);
    });
})()


<addeventlistener>
http://www.w3schools.com/jsref/met_document_addeventlistener.asp
https://www.w3.org/2003/01/dom2-javadoc/org/w3c/dom/events/EventTarget.html

The document.addEventListener() method attaches an event handler to the
document.

document.addEventListener(event, function, useCapture)

event 	Required. 

A String that specifies the name of the event. Note: Do not use the "on" prefix.
For example, use "click" instead of "onclick".

For a list of all HTML DOM events, look at our complete HTML DOM Event Object
Reference.

function 	Required. 

Specifies the function to run when the event occurs.

When the event occurs, an event object is passed to the function as the first
parameter. The type of the event object depends on the specified event. For
example, the "click" event belongs to the MouseEvent object.


<settimeout>
http://www.w3schools.com/jsref/met_win_settimeout.asp

The setTimeout() method calls a function or evaluates an expression after a
specified number of milliseconds.

Syntax
setTimeout(function,milliseconds,param1,param2,...)

function            Required. 
The function that will be executed

milliseconds        Required. 
The number of milliseconds to wait 'before' executing the code

param1,param2,...   Optional. 
Additional parameters to pass to the function (Not supported in IE9 and earlier)

Return Value: 
A Number, representing the ID value of the timer that is set. Use this value
with the clearTimeout() method to cancel the timer

setTimeout(function(){ x.value="2 seconds" }, 2000);


={============================================================================
*kt_dev_web_004* html standard

https://html.spec.whatwg.org/multipage/index.html

https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement


// https://www.w3.org/Protocols/rfc2616/rfc2616.html
// This document has been superseded. In 2014, RFC2616 was replaced by
// multiple RFCs (7230-7237). See IETF Documents for more information.

https://tools.ietf.org/html/rfc7230

Hypertext Transfer Protocol (HTTP/1.1): Message Syntax and Routing

1.  Introduction

   The Hypertext Transfer Protocol (HTTP) is a stateless application-
   level request/response protocol that uses extensible semantics and
   self-descriptive message payloads for flexible interaction with
   network-based hypertext information systems.  This document is the
   first in a series of documents that collectively form the HTTP/1.1
   specification:

   1.  "Message Syntax and Routing" (this document)

   2.  "Semantics and Content" [RFC7231]

   3.  "Conditional Requests" [RFC7232]

   4.  "Range Requests" [RFC7233]

   5.  "Caching" [RFC7234]

   6.  "Authentication" [RFC7235]

   This HTTP/1.1 specification obsoletes RFC 2616 and RFC 2145 (on HTTP
   versioning).  This specification also updates the use of CONNECT to
   establish a tunnel, previously defined in RFC 2817, and defines the
   "https" URI scheme that was described informally in RFC 2818.


={============================================================================
*kt_dev_web_004* w3-server

http://wiki.nginx.org/Main

Nginx has become one of the most important web servers over the last couple of
years. There's a reason for that. Instead of using the standard threaded- or
process-oriented architecture, it uses a scalable, event-driven (asynchronous)
architecture. 

So not only is it incredibly light weight, it's highly scalable and memory usage
is far better suited for limited resource deployments. Nginx also handles simple
load balancing, fault tolerance, auto-indexing, virtual servers (both name- and
    IP-based), mod_rewrite, access control, and much more. Nginx can also serve
as a reverse proxy and an IMAP/POP3 proxy server.

Surprisingly, Nginx powers a few very high-profile sites, such as: Netflix,
Hulu, Pinterest, Wordpress.com, and AirBnB.

Who is Nginx right for? The nice thing about this particular light weight HTTPD
daemon is that it doesn't perform like a lightweight server. Not only does it
run with minimal resources, it offers plenty of optional modules and addons. You
can find pre-built packages for Linux and BSD for easy installation. So if you
need a powerhouse server, in a lighter weight package, Nginx is the server for
you.

Nginx comes in at a 10 MB installation (versus the Apache 30 MB installation)
and can give you up to a 35 percent performance increase (versus Apache).

// when fails to install nginx, have to stop apache2 first since it holds up
// port 80 already.
// https://unix.stackexchange.com/questions/153980/problems-to-install-nginx-full-on-debian-8

$ sudo service apache2 stop

$ sudo apt-get install nginx

$ sudo service nginx status
● nginx.service - A high performance web server and a reverse proxy server
   Loaded: loaded (/lib/systemd/system/nginx.service; enabled; vendor preset: enabled)
   Active: active (running) since Mon 2019-06-10 21:59:52 BST; 5min ago
     Docs: man:nginx(8)
  Process: 8907 ExecStart=/usr/sbin/nginx -g daemon on; master_process on; (code=exited, status=0/SUCCESS)
  Process: 8904 ExecStartPre=/usr/sbin/nginx -t -q -g daemon on; master_process on; (code=exited, status=0/SUCCESS)
 Main PID: 8908 (nginx)
    Tasks: 5 (limit: 4915)
   CGroup: /system.slice/nginx.service
           ├─8908 nginx: master process /usr/sbin/nginx -g daemon on; master_process on;
           ├─8909 nginx: worker process
           ├─8910 nginx: worker process
           ├─8911 nginx: worker process
           └─8912 nginx: worker process

Jun 10 21:59:51 kit-hdebi systemd[1]: Starting A high performance web server and a reverse proxy server...
Jun 10 21:59:52 kit-hdebi systemd[1]: Started A high performance web server and a reverse proxy server.


$ service nginx restart
$ service nginx reload

However, recommend way is as follows. This should work with any Linux
distributions or Unix like operating systems:

$ nginx -s reload
$ /path/to/full/nginx -s reload


{proxy-pass}
http://nginx.org/en/docs/http/ngx_http_proxy_module.html#proxy_pass

Take a look at nginx's HttpProxyModule, which is where proxy_pass comes from.
The proxy_pass docs say:

This directive sets the address of the proxied server and the URI to which
location will be mapped.

So when you tell Nginx to proxy_pass, you're saying "Pass this request on to
this proxy URL".


<okay>
This is a configuration for local web server and want want to have is when there
are requests to the local server, it would redirect those to the actual server.

wget http://wll1p04345.dev.youview.co.uk/e/pseudolive/bbb/client_manifest.mpd;

To:

wget http://dash.bidi.int.bbc.co.uk/e/pseudolive/bbb/client_manifest.mpd;


location / {
# First attempt to serve request as file, then
# as directory, then fall back to displaying a 404.
# try_files $uri $uri/ /index.html;
# Uncomment to enable naxsi on this location
# include /etc/nginx/naxsi.rules
  proxy_pass http://dash.bidi.int.bbc.co.uk;
}

<not-okay>

location / {
# First attempt to serve request as file, then
# as directory, then fall back to displaying a 404.
try_files $uri $uri/ /index.html;

# Uncomment to enable naxsi on this location
# include /etc/nginx/naxsi.rules
  proxy_pass http://dash.bidi.int.bbc.co.uk;
}


<config>
$ more /etc/nginx/sites-available/default

# Default server configuration
#
server {
	listen 80 default_server;
	listen [::]:80 default_server;

	# SSL configuration
	#
	# listen 443 ssl default_server;
	# listen [::]:443 ssl default_server;
	#
	# Note: You should disable gzip for SSL traffic.
	# See: https://bugs.debian.org/773332
	#
	# Read up on ssl_ciphers to ensure a secure configuration.
	# See: https://bugs.debian.org/765782
	#
	# Self signed certs generated by the ssl-cert package
	# Don't use them in a production server!
	#
	# include snippets/snakeoil.conf;

	root /var/www/html;

	# Add index.php to the list if you are using PHP
	index index.html index.htm index.nginx-debian.html;

	server_name _;

	location / {
		# First attempt to serve request as file, then
		# as directory, then fall back to displaying a 404.
		try_files $uri $uri/ =404;
	}

	# pass PHP scripts to FastCGI server
	#
	#location ~ \.php$ {
	#	include snippets/fastcgi-php.conf;
	#
	#	# With php-fpm (or other unix sockets):
	#	fastcgi_pass unix:/var/run/php/php7.0-fpm.sock;
	#	# With php-cgi (or other tcp sockets):
	#	fastcgi_pass 127.0.0.1:9000;
	#}

	# deny access to .htaccess files, if Apache's document root
	# concurs with nginx's one
	#
	#location ~ /\.ht {
	#	deny all;
	#}
}


$ ll /var/www/html/
total 24K
drwxr-xr-x 3 root root 4.0K Feb 22  2018 ../
-rw-r--r-- 1 root root  11K Feb 22  2018 index.html
-rw-r--r-- 1 root root  612 Jun 10 21:46 index.nginx-debian.html
drwxr-xr-x 2 root root 4.0K Jun 10 21:46 ./


http://localhost
http://192.168.1.72

mv index.html index.apache.html

and now can see nginx landing page:

Welcome to nginx!
If you see this page, the nginx web server is successfully installed and working. Further configuration is required.

For online documentation and support please refer to nginx.org.
Commercial support is available at nginx.com.

Thank you for using nginx.


={============================================================================
*kt_dev_web_005* crome dev tool

https://developers.google.com/web/tools/chrome-devtools/


={============================================================================
*kt_dev_web_005* user agent

YouView devices have a number of software components that use HTTP/1.1 to
communicate over the Internet. HTTP allows a User-Agent header field to be
included in the request. The purpose of the User-Agent header field is to
identify the application that made the request.

In order to allow servers to differentiate between requests from YouView devices
and requests from other HTTP clients, and to provide additional details about
device capabilities and versions, it is necessary to have a standard template
for User-Agent headers on YouView devices.

IETF, RFC 2616 – Hypertext Transfer Protocol -- HTTP/1.1, June 1999.

The design and construction of a User-Agent string for YouView must follow the
requirements of RFC 2616, which defines the form of the User-Agent string. In
addition, the UK DTG D-Book defines tokens which must be included in the
User-Agent string for requests relating to D-Book functionality.

HTTP/1.1 is defined in RFC 2616. The specification states that a User-Agent
header field should be included in the header of requests made. The header field
is formed of one or more product tokens, by convention listed in order of their
significance. The format is defined by the BNF grammar specified in RFC 2616 (in
        sections 14.43, 3.8 and 2.2), part of which is reproduced below.

User-Agent = “User-Agent” “:” 1*( product | comment )
product = token [ “/” product-version ]
product-version = token

That part of the header field following the initial “User-Agent: ” is referred
to here as the User-Agent string.


={============================================================================
*kt_dev_web_005* http-spec-term

https://tools.ietf.org/html/rfc2616#section-1.3

   The terms user agent, client, server, proxy, and origin server have
   the same meaning as in the HTTP/1.1 specification ([RFC2616], Section
   1.3).

1.3 Terminology

   user agent
      The client which initiates a request. These are often browsers,
      editors, spiders (web-traversing robots), or other end user tools.


={============================================================================
*kt_dev_web_005* http-status-code

https://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html

10.5.1 500 Internal Server Error

The server encountered an unexpected condition which prevented it from
fulfilling the request.

10.2.1 200 OK


10.3.5 304 Not Modified

If the client has performed a conditional GET request and access is allowed,
but the document has not been modified, the server SHOULD respond with this
  status code. The 304 response MUST NOT contain a message-body, and thus is
  always terminated by the first empty line after the header fields.

The response MUST include the following header fields:

      - Date, unless its omission is required by section 14.18.1

If a clockless origin server obeys these rules, and proxies and clients add
their own Date to any response received without one (as already specified by
    [RFC 2068], section 14.19), caches will operate correctly.

      - ETag and/or Content-Location, if the header would have been sent
        in a 200 response to the same request
      - Expires, Cache-Control, and/or Vary, if the field-value might
        differ from that sent in any previous response for the same
        variant

If the conditional GET used a strong cache validator (see section 13.3.3), the
response SHOULD NOT include other entity-headers. Otherwise (i.e., the
    conditional GET used a weak validator), the response MUST NOT include
other entity-headers; this prevents inconsistencies between cached
entity-bodies and updated headers.

If a 304 response indicates an entity not currently cached, then the cache
MUST disregard the response and repeat the request without the conditional.

If a cache uses a received 304 response to update a cache entry, the cache
MUST update the entry to reflect any new field values given in the response.


10.4 Client Error 4xx

The 4xx class of status code is intended for cases in which the client seems
to have erred. Except when responding to a HEAD request, the server SHOULD
include an entity containing an explanation of the error situation, and
whether it is a temporary or permanent condition. These status codes are
applicable to any request method. User agents SHOULD display any included
entity to the user.

If the client is sending data, a server implementation using TCP SHOULD be
careful to ensure that the client acknowledges receipt of the packet(s)
containing the response, before the server closes the input connection. If the
client continues sending data to the server after the close, the server's TCP
stack will send a reset packet to the client, which may erase the client's
unacknowledged input buffers before they can be read and interpreted by the
HTTP application.


={============================================================================
*kt_dev_web_005* cookie

https://tools.ietf.org/html/rfc6265

Abstract

   This document defines the HTTP Cookie and Set-Cookie header fields.
   These header fields can be used by HTTP servers to store state
   (called cookies) at HTTP user agents, letting the servers maintain a
   stateful session over the mostly stateless HTTP protocol.  Although
   cookies have many historical infelicities that degrade their security
   and privacy, the Cookie and Set-Cookie header fields are widely used
   on the Internet.  This document obsoletes RFC 2965.

1.  Introduction

   This document defines the HTTP Cookie and Set-Cookie header fields.

   Using the `Set-Cookie header` field, an HTTP server can pass name/value
   pairs and associated `metadata` (called cookies) to a user agent.  When
   the user agent makes subsequent requests to the server, the user
   agent uses the metadata and other information to determine whether to
   return the name/value pairs in the `Cookie header`

   Although simple on their surface, cookies have a number of
   complexities.  For example, the server indicates a scope for each
   cookie when sending it to the user agent.  The scope indicates the
   maximum amount of time in which the user agent should `return` the
   cookie, the servers to which the user agent should return the cookie,
   and the URI schemes for which the cookie is applicable.

3.  Overview

   This section outlines a way for an origin server to send state
   information to a user agent and for the user agent to return the
   state information to the origin server.

   To store state, the origin server includes a `Set-Cookie header` in an
   `HTTP response`  In subsequent requests, the user agent returns a
   Cookie request header to the origin server.  The `Cookie header`
   contains cookies the user agent received in previous Set-Cookie
   headers.  The origin server is free to ignore the Cookie header or
   use its contents for an application-defined purpose.

   == Server -> User Agent ==

   Set-Cookie: SID=31d4d96e407aad42

   == User Agent -> Server ==

   Cookie: SID=31d4d96e407aad42

   The server can `alter the default scope` of the cookie using the Path
   and Domain attributes.  For example, the server can instruct the user
   agent to return the cookie to every path and every subdomain of
   example.com.

   == Server -> User Agent ==

   Set-Cookie: SID=31d4d96e407aad42; Path=/; Domain=example.com

   == User Agent -> Server ==

   Cookie: SID=31d4d96e407aad42

   As shown in the next example, the server can store `multiple cookies`
   at the user agent.  For example, the server can store a session
   identifier as well as the user's preferred language by returning two
   Set-Cookie header fields.  Notice that the server uses the Secure and
   HttpOnly attributes to provide additional security protections for
   the more sensitive session identifier (see Section 4.1.2.)

   == Server -> User Agent ==

   Set-Cookie: SID=31d4d96e407aad42; Path=/; Secure; HttpOnly
   Set-Cookie: lang=en-US; Path=/; Domain=example.com

   == User Agent -> Server ==

   Cookie: SID=31d4d96e407aad42; lang=en-US

   Notice that the Cookie header above contains two cookies, one named
   SID and one named lang.  If the server wishes the user agent to
   persist the cookie `over multiple "sessions"` (e.g., user agent
   restarts), the server can specify an `expiration date` in the Expires
   attribute.

   ...

   Finally, to remove a cookie, the server returns a Set-Cookie header
   with an expiration date in the past.  The server will be successful
   in removing the cookie only if the Path and the Domain attribute in
   the Set-Cookie header match the values used when the cookie was
   created.

5.2.  The Set-Cookie Header

5.4.  The Cookie Header

   The user agent includes stored cookies in the Cookie HTTP request
   header.

   When the user agent generates an HTTP request, the user agent MUST
   NOT attach more than one Cookie header field.

7.3.  Expiration Dates

   Although servers can set the expiration date for cookies to the
   distant future, most user agents do not actually retain cookies for
   multiple decades.  Rather than choosing gratuitously long expiration
   periods, servers SHOULD promote user privacy by selecting reasonable
   cookie expiration periods based on the purpose of the cookie.  For
   example, a typical session identifier might reasonably be set to
   expire in two weeks.


={============================================================================
*kt_dev_web_005* w3-cgi

A CGI (Common Gateway Interface) is a program that runs on a web server. CGIs
are typically called from HTML forms, and usually are designed to run quickly
and return an HTML page someone can use in a browser. 

A CGI script can be written in any language that can read STDIN, write to
STDOUT, and read environment variables, i.e. virtually any programming
language, including C, Perl, or even shell scripting


http://<hostname>/cgi-bin/example-bash.sh

<ex>
#!/bin/bash

# These two lines tell your browser that the rest of the content comming from
# the program is HTML, and should be treated as such. Leaving these lines out
# will often cause your browser to download the output of the program to disk
# as a text file instead of displaying it, since it doesn't understand that it
# is HTML!

echo "Content-type: text/html"
echo ""

# This program uses the echo program to send text to a browser. If you can
# read from STDIN and write to STDOUT, then you can write CGI scripts.

echo "<html><head><title>Welcome</title></head>"
echo "<body>"
echo "Welcome to your Bash CGI!"
echo "</body></html>"

<ex>
#!/bin/bash
echo "Content-type: text/html"
echo ''
echo 'CGI Bash Example'

<ex>
#!/bin/bash
echo "Content-type: text/html"
echo ''
echo 'CGI Bash example<br>'
echo `df -h / | grep -v Filesystem`

<ex>
$ sudo gcc -o /usr/lib/cgi-bin/example-c example-c.c
http://cgi-example.local/cgi-bin/example-c

#include <stdio.h>
int main(void)
{
  printf("Content-Type: text/plain \n\n");
  printf("CGI C Example \n");
}


{process-data}
HTML form that `submits` data to a CGI program

<form action="http://www.example.com/cgi-bin/example.sh" method="get">
Enter a username: <input type="text" name="username"></input><br>
<input type="radio" name="whatToDo" value="remove" checked="checked">Value<br>
<input type="radio" name="whatToDo" value="create">Create<br>
<input type="submit" name="subbtn" value="Submit">
<form> 

Assuming the user entered "John Doe" into the text box and selected the
"create" radio button. 

CGI program sees the data submitted from this form, it sees something like
this:

username=John Doe
whatToDo=create
subbtn=Submit

CGI program that does something with this data. Below is a simple Bash program
that will tell the user what they entered:

// cgi-bin/example.sh
#!/bin/bash

echo "Content-type: text/html"
echo ""

# replaces any occurances of %20 with a space, since when the form data is
# transfered from the browser to the server, spaces are turned into %20 (so
# "Hi there" becomes "Hi%20there"). 

USERNAME=`echo "$QUERY_STRING" | sed -n 's/^.*username=\([^&]*\).*$/\1/p' | sed "s/%20/ /g"
WHATTODO=`echo "$QUERY_STRING" | sed -n 's/^.*whatToDo=\([^&]*\).*$/\1/p' | sed "s/%20/ /g"
echo "<html><head><title>What You Said</title></head>"
echo "<body>Here's what you said:
echo "You entered $USERNAME for username and wanted the action to be $ACTION.
echo "</body></html>"


Since the form uses the GET method to transmit data, the web server takes the
data it receives from the form and puts it in an enviromental variable named
`QUERY_STRING`. It then starts the CGI program referenced in the form, which is
our Bash program.

Script receives the form data as a set of name-value pairs. This set of
name-value pairs is given to you as one long string, which you need to parse. 

The long string is in one of these two formats:

"name1=value1&name2=value2&name3=value3"
"name1=value1;name2=value2;name3=value3" 

So just split on the ampersands or semicolons, then on the equal signs. Then,
   do two more things to each name and value:

Convert all "+" characters to spaces, and
Convert all "%xx" sequences to the single character whose ascii value is "xx",
        in hex. For example, convert "%3d" to "=". 

This is needed because the original long string is URL-encoded, to allow for
equal signs, ampersands, and so forth in the user's input.

So where do you get the long string? That depends on the HTTP method the form
was submitted with:

For GET submissions, it's in the environment variable QUERY_STRING.
For POST submissions, read it from STDIN. The exact number of bytes to read is
in the environment variable CONTENT_LENGTH. 


{post-and-get}
GET data is sent as part of the URL. You may notice when browsing URLs such as
this nicely color-coded example: 

http://www.example.com/cgi-bin/myProgram.sh?action=buy&item=Big%20Table&price=32.99&sub=Submit

GET data is identified by a `?` after the CGI that will handle the data. The
data is made up of the form form_element_name=value separated by ampersands
(&). 

In the example above, we see that an HTML form contained elements named
"action", "item", "price", and "sub" and their values were "buy", "Big Table"
, "32.99", and "Submit". 


<nice-thing-about-get>
One nice thing about GET data is that it doesn't necessarily have to come from
an HTML form. Since it is simply part of a URL, you can create links to CGI
scripts that accept GET data and simple pass the data you want to the program
in the URL of the link, without having to create a form and have the user
click "submit."

For example, say I had a CGI program that displayed a page that showed either
the date or time, depending on what something called "whatToShow" equaled. If
"whatToShow" equals "date" it shows the date, if it equals "time" it shows the
time. One way to access this CGI would be to create an HTML form and have the
user submit this, as shown below:

<form action="myprogram.sh" method="get">
What do you want to do?<br>
<input type="radio" name="whatToDo" value="date">Show the Date<br>
<input type="radio" name="whatToDo" value="time">Show the Time<br>
<input type="submit" name="submit" value="Go">
</form>

Alternatively, since GET data is just part of the URL, I could just create two
links to the CGI, one for the date and one for the time, and get the same
result, but with less typing and a different look:

<a href="myprogram.sh?whatToDo=date">Show the Date</a><br>
<a href="myprogram.sh?whatToDo=time">Show the Time</a>


This trick is very useful for times when your CGI program only accepts some
simple, predefined input that doesn't require a whole form to get, and you
want the user to access the CGI by just clicking a link, instead of having to
fill out and submit an entire form. 


This trick is also useful for debugging CGIs that accept GET data: you can
keep running them with different data without having to keep changing your
HTML form; just change the URL to make the new data you want to submit your
CGI. 


<get-drawbacks>

* It can only send a limited amount of data. URLs (and GET itself) are limited
  in how long they can be, and this limits how much data GET can send.

* The data sent in GET is clearly visible in the URL. While this is great for
  debugging, it may be undesirable in the final product.

* GET can't send any type of data. Its limited to regular characters. So, you
  can't upload files with GET (it would be impracticable to do this given the
  limit on the amount of data you can send with GET, anyway).


Fortunately, an alternative to GET exists which solves most of these problems:
POST. POST data is not sent as part of the URL. Instead, it is sent as its own
separate stream. POST can send any type of data, can send any amount of data
(no limitations of the amount of data like with GET), and the data isn't
easily visible to the user in the URL. 

For more to continue.
http://www.team2053.org/docs/bashcgi/postdata.html


={============================================================================
*kt_dev_web_005* w3-php

https://www.tutorialspoint.com/php/php_get_post.htm

There are two ways the browser client can send information to the web server.

    The GET Method
    The POST Method

Before the browser sends the information, it encodes it using a scheme called
URL encoding. In this scheme, name/value pairs are joined with equal signs and
different pairs are separated by the ampersand.

name1=value1&name2=value2&name3=value3

Spaces are removed and replaced with the + character and any other
nonalphanumeric characters are replaced with a hexadecimal values. After the
information is encoded it is sent to the server.  


The GET Method

The GET method sends the encoded user information appended to the page
request. The page and the encoded information are separated by the ?
character.

http://www.test.com/index.htm?name1=value1&name2=value2

    The GET method produces a long string that appears in your server logs, in
    the browser's Location: box.

    The GET method is restricted to send upto 1024 characters only.

    Never use GET method if you have password or other sensitive information
    to be sent to the server.

    GET can't be used to send binary data, like images or word documents, to
    the server.

    The data sent by GET method can be accessed using QUERY_STRING environment
    variable.

    The PHP provides $_GET associative array to access all the sent
    information using GET method.

Try out following example by putting the source code in test.php script.

<?php
   if( $_GET["name"] || $_GET["age"] ) {
      echo "Welcome ". $_GET['name']. "<br />";
      echo "You are ". $_GET['age']. " years old.";
      
      exit();
   }
?>
<html>
   <body>
   
      <form action = "<?php $_PHP_SELF ?>" method = "GET">
         Name: <input type = "text" name = "name" />
         Age: <input type = "text" name = "age" />
         <input type = "submit" />
      </form>
      
   </body>
</html>


={============================================================================
*kt_dev_web_005* w3-php-man

http://php.net/manual/en/function.touch.php

(PHP 4, PHP 5, PHP 7)
touch — Sets access and modification time of file

Description

bool touch ( string $filename [, int $time = time() [, int $atime ]] )

Attempts to set the access and modification times of the file named in the
filename parameter to the value given in time. Note that the access time is
always modified, regardless of the number of parameters.

If the file does not exist, `it will be created`


http://php.net/manual/en/function.header.php

(PHP 4, PHP 5, PHP 7)
header — Send a raw HTTP header

Description

void header ( string $string [, bool $replace = true [, int $http_response_code ]] )

header() is used to send a raw HTTP header. See the » HTTP/1.1 specification
for more information on HTTP headers.

Remember that header() must be called before any actual output is sent, either
  by normal HTML tags, blank lines in a file, or from PHP. It is a very common
  error to read code with include, or require, functions, or another file
  access function, and have spaces or empty lines that are output before
  header() is called. The same problem exists when using a single PHP/HTML
  file.

<html>
<?php
/* This will give an error. Note the output
 * above, which is before the header() call */
header('Location: http://www.example.com/');
exit;
?>


http://php.net/manual/en/function.file-put-contents.php

(PHP 5, PHP 7)
file_put_contents — Write a string to a file

Description

int file_put_contents ( string $filename , mixed $data [, int $flags = 0 [, resource $context ]] )

This function is identical to calling fopen(), fwrite() and fclose()
successively to write data to a file.

If filename does not exist, the file is created. Otherwise, the existing file
is overwritten, unless the FILE_APPEND flag is set.

http://php.net/manual/en/function.echo.php
http://php.net/manual/en/function.time.php

<ex>
pi@raspberrypi ~/snugupdate-v2-snugberrypi/www $ more time.php
<?php echo time(); ?>


={============================================================================
*kt_dev_web_004* w3-rest

https://www.smashingmagazine.com/2018/01/understanding-using-rest-api/
Understanding And Using REST APIs

If you want to be able to read API documentations and use them effectively,
you’ll first need to understand everything about REST APIs. Let’s get started.

There’s a high chance you came across the term “REST API” if you’ve thought
about getting data from another source on the internet, such as Twitter or
Github. But what is a REST API? What can it do for you? How do you use it?

In this article, you’ll learn everything you need to know about REST APIs to be
able to read API documentations and use them effectively.

What Is A REST API

Let’s say you’re trying to find videos about Batman on Youtube. You open up
Youtube, type “Batman” into a search field, hit enter, and you see a list of
videos about Batman. A REST API works in a similar way. You search for
something, and you get a list of results back from the service you’re requesting
from.

An API is an application programming interface. It is a set of rules that allow
programs to talk to each other. The developer creates the API on the server and
allows the client to talk to it.

REST determines how the API looks like. It stands for 

“Representational State Transfer”. 

It is a set of rules that developers follow when they create their
API. One of these rules states that you should be able to get a piece of data
(called a `resource`) when you link to a specific URL.

Each URL is called a `request` while the data sent back to you is called a
`response`.

The Anatomy Of A Request

It’s important to know that a request is made up of four things:

The endpoint
The method
The headers
The data (or body)

The endpoint (or route) is the url you request for. It follows this structure:

root-endpoint/?

The root-endpoint is the starting point of the API you’re requesting from. The
root-endpoint of Github’s API is https://api.github.com while the root-endpoint
Twitter’s API is https://api.twitter.com.

`The path determines the resource you’re requesting for.` Think of it like an
automatic answering machine that asks you to press 1 for a service, press 2 for
another service, 3 for yet another service and so on.

You can access paths just like you can link to parts of a website. For example,
to get a list of all posts tagged under “JavaScript” on Smashing Magazine, you
navigate to https://www.smashingmagazine.com/tag/javascript/.
https://www.smashingmagazine.com/ is the root-endpoint and /tag/javascript is
the path.

To understand what paths are available to you, you need to look through the API
documentation. For example, let’s say you want to get a list of repositories by
a certain user through Github’s API. The docs tells you to use the the following
path to do so:

/users/:username/repos

Any colons (:) on a path denotes a `variable`. You should replace these values
with actual values of when you send your request. In this case, you should
replace :username with the actual username of the user you’re searching for. If
I’m searching for my Github account, I’ll replace :username with zellwk.

The endpoint to get a list of my repos on Github is this:

https://api.github.com/users/zellwk/repos

The final part of an endpoint is `query parameters` Technically, query parameters
are `not part of the REST architecture`, but you’ll see lots of APIs use them.
So, to help you completely understand how to read and use API’s we’re also going
to talk about them. Query parameters give you the option to modify your request
with key-value pairs. They always begin with a question mark (?). Each parameter
pair is then separated with an ampersand (&), like this:

?query1=value1&query2=value2

When you try to get a list of a user’s repositories on Github, you add three
possible parameters to your request to modify the results given to you:

// github API

https://developer.github.com/v3/repos/#list-your-repositories
List user repositories
List public repositories for the specified user.

GET /users/:username/repos
Parameters
Name        Type      Description
type        string    Can be one of all, owner, member. Default: owner
sort        string    Can be one of created, updated, pushed, full_name. Default: full_name
direction   string    Can be one of asc or desc. Default: asc when using full_name, otherwise desc

If you’d like to get a list the repositories that I pushed to recently, you can
set sort to push.

https://api.github.com/users/zellwk/repos?sort=pushed

How do you know if this endpoint works? Well, it’s time to give it a try!


Testing Endpoints With Curl

You can send a request with any programming language. JavaScript users can use
methods like the Fetch API and jQuery’s Ajax method; Ruby users can use Ruby’s
Net::HTTP class, Python users can use Python Requests; and so on.

For this article, we’ll use the command line utility called cURL. We use cURL
because API documentations are normally written with reference to cURL. If you
understand how to use cURL, you’ll have no problems understanding API
documentations. Then, you can easily perform requests with your preferred
language.

Before you continue, you’ll want to make sure you have cURL installed on your
machine. Open up your Terminal and type curl -version. This command checks the
version of cURL you have installed on your system.

curl --version

If you don’t have cURL installed, you’ll get a “command not found” error. If you
get this error, you will need to install curl before moving on.

To use cURL, you type curl, followed by the endpoint you’re requesting for. For
example, to get Github’s root endpoint, you type the following:

curl https://api.github.com

Once you hit enter, you should get a response from Github that looks like this:

To get a list of a user’s repositories, you modify the endpoint to the correct
path, like what we discussed above. To get a list of my repositories, you can
use this command:

curl https://api.github.com/users/zellwk/repos

If you wish to include query parameters with cURL, make sure you prepend a
backslash (\) before the ? and = characters. This is because ? and = are special
characters in the command line. You need to use \ before them for the
command line to interpret them as normal characters:

curl https://api.github.com/users/zellwk/repos\?sort\=pushed

Try using either commands and perform a request! You’ll get a similar response
to what you’ve seen with Github’s root-endpont (but with a lot more data).

JSON

JSON (JavaScript Object Notation) a common format for sending and requesting
data through a REST API. The response that Github sends back to you is also
formatted as JSON.

A JSON object looks like a JavaScript Object. In JSON, each property and value
must be wrapped with double quotation marks, like this:

{
  "property1": "value1",
  "property2": "value2",
  "property3": "value3"
}

Back To The Anatomy Of A Request

You’ve learned that a request consists of four parts.

The endpoint
The method
The headers
The data (or body)

Let’s go through the rest of what makes up a `request`.

The Method

The method is the type of request you send to the server. You can choose from these five types below:

GET
POST
PUT
PATCH
DELETE

These `request methods` provide meaning for the request you’re making. They are
used to perform four possible actions: Create, Read, Update and Delete (CRUD).

*http-get*
GET

This request is used to get a resource from a server. If you perform a `GET`
request, the server looks for the data you requested and sends it back to you.
In other words, a `GET` request performs a `READ` operation. This is the default
request method.

*http-get-param*
When the GET request method is used, if a client uses the HTTP protocol on a
web server to request a certain resource, the client sends the server certain
GET parameters through the requested URL. These parameters are pairs of names
and their corresponding values, so-called name-value pairs. These are added to
the URL with a “?” sign and tell the server which resources are meant. The
name and value are always separated using a “=” sign.

*http-post*
POST

This request is used to create a new resource on a server. If you perform a
`POST` request, the server creates a new entry in the database and tells you
whether the creation is successful. In other words, a `POST` request performs an
`CREATE` operation.

PUT and PATCH

These two requests are used to update a resource on a server. If you perform a
`PUT` or `PATCH` request, the server updates an entry in the database and tells
you whether the update is successful. In other words, a `PUT` or `PATCH` request
performs an `UPDATE` operation.

DELETE

This request is used to delete a resource from a server. If you perform a
`DELETE` request, the server deletes an entry in the database and tells you
whether the deletion is successful. In other words, a `DELETE` request performs
a `DELETE` operation.

The API lets you know what request method to use each request. For example, to
get a list of a user’s repositories, you need a GET request:

You can set the request method in cURL by writing -X or --request, followed by
the request method. This command below tries to create a repository via cURL:

curl -X POST https://api.github.com/user/repos

Try running this request. You’ll get a response that tells you that
authentication is required. (More on authentication later).

{
  "message": "Requires authentication",
  "documentation_url": "https://developer.github.com/v3"
}


The Headers

Headers are used to provide information to both the client and server. It can be
used for many purposes, such as authentication and providing information about
the body content. You can find a list of valid headers on MDN’s HTTP Headers
Reference.

HTTP Headers are property-value pairs that are separated by a colon. The example
below shows a header that tells the server to expect JSON content.

"Content-Type: application/json". Missing the opening ".


You can send HTTP headers with curl through the -H or --header option. To send
the above header to Github’s API, you use this command:

curl -H "Content-Type: application/json" https://api.github.com

(Note: the Content-Type header is not a requirement for Github’s API to work.
 This is only an example to illustrate how to use a header with cURL).

To view headers you’ve sent, you can use the -v or --verbose option as you send
the request, like this:

curl -H "Content-Type: application/json" https://api.github.com -v


keitee@keitee-mint:~/mw/ethan-as-source-repo$ curl -H "Content-Type: application/json" https://api.github.com -v
* Rebuilt URL to: https://api.github.com/
*   Trying 140.82.118.5...
* TCP_NODELAY set
* Connected to api.github.com (140.82.118.5) port 443 (#0)
* ALPN, offering h2
* ALPN, offering http/1.1
* successfully set certificate verify locations:
*   CAfile: /etc/ssl/certs/ca-certificates.crt
  CApath: /etc/ssl/certs
* (304) (OUT), TLS handshake, Client hello (1):
* (304) (IN), TLS handshake, Server hello (2):
* (304) (IN), TLS Unknown, Certificate Status (22):
* (304) (IN), TLS handshake, Unknown (8):
* (304) (IN), TLS Unknown, Certificate Status (22):
* (304) (IN), TLS handshake, Certificate (11):
* (304) (IN), TLS Unknown, Certificate Status (22):
* (304) (IN), TLS handshake, CERT verify (15):
* (304) (IN), TLS Unknown, Certificate Status (22):
* (304) (IN), TLS handshake, Finished (20):
* (304) (OUT), TLS change cipher, Client hello (1):
* (304) (OUT), TLS Unknown, Certificate Status (22):
* (304) (OUT), TLS handshake, Finished (20):
* SSL connection using unknown / TLS_AES_128_GCM_SHA256
* ALPN, server accepted to use http/1.1
* Server certificate:
*  subject: C=US; ST=California; L=San Francisco; O=GitHub, Inc.; CN=*.github.com
*  start date: Jun 19 00:00:00 2018 GMT
*  expire date: Jul 10 12:00:00 2019 GMT
*  subjectAltName: host "api.github.com" matched cert's "*.github.com"
*  issuer: C=US; O=DigiCert Inc; OU=www.digicert.com; CN=DigiCert SHA2 High Assurance Server CA
*  SSL certificate verify ok.
* (304) (OUT), TLS Unknown, Unknown (23):
> GET / HTTP/1.1
> Host: api.github.com
> User-Agent: curl/7.58.0
> Accept: */*
> Content-Type: application/json
>
* (304) (IN), TLS Unknown, Certificate Status (22):
* (304) (IN), TLS handshake, Newsession Ticket (4):
* (304) (IN), TLS Unknown, Certificate Status (22):
* (304) (IN), TLS handshake, Newsession Ticket (4):
* (304) (IN), TLS Unknown, Unknown (23):
< HTTP/1.1 200 OK
< Date: Wed, 12 Jun 2019 07:50:16 GMT
< Content-Type: application/json; charset=utf-8
< Content-Length: 2165
< Server: GitHub.com
< Status: 200 OK
< X-RateLimit-Limit: 60
< X-RateLimit-Remaining: 48
< X-RateLimit-Reset: 1560329416
< Cache-Control: public, max-age=60, s-maxage=60
< Vary: Accept
< ETag: "7dc470913f1fe9bb6c7355b50a0737bc"
< X-GitHub-Media-Type: github.v3; format=json
< Access-Control-Expose-Headers: ETag, Link, Location, Retry-After, X-GitHub-OTP, X-RateLimit-Limit, X-RateLimit-Remaining, X-RateLimit-Reset, X-OAuth-Scopes, X-Accepted-OAuth-Scopes, X-Poll-Interval, X-GitHub-Media-Type
< Access-Control-Allow-Origin: *
< Strict-Transport-Security: max-age=31536000; includeSubdomains; preload
< X-Frame-Options: deny
< X-Content-Type-Options: nosniff
< X-XSS-Protection: 1; mode=block
< Referrer-Policy: origin-when-cross-origin, strict-origin-when-cross-origin
< Content-Security-Policy: default-src 'none'
< Vary: Accept-Encoding
< X-GitHub-Request-Id: 7226:2DC62:317D:600E:5D00AEB8
<
{
  "current_user_url": "https://api.github.com/user",
  "current_user_authorizations_html_url": "https://github.com/settings/connections/applications{/client_id}",
  "authorizations_url": "https://api.github.com/authorizations",
  "code_search_url": "https://api.github.com/search/code?q={query}{&page,per_page,sort,order}",
* (304) (IN), TLS Unknown, Unknown (23):
  "commit_search_url": "https://api.github.com/search/commits?q={query}{&page,per_page,sort,order}",
  "emails_url": "https://api.github.com/user/emails",
  "emojis_url": "https://api.github.com/emojis",
  "events_url": "https://api.github.com/events",
  "feeds_url": "https://api.github.com/feeds",
  "followers_url": "https://api.github.com/user/followers",
  "following_url": "https://api.github.com/user/following{/target}",
  "gists_url": "https://api.github.com/gists{/gist_id}",
  "hub_url": "https://api.github.com/hub",
  "issue_search_url": "https://api.github.com/search/issues?q={query}{&page,per_page,sort,order}",
  "issues_url": "https://api.github.com/issues",
  "keys_url": "https://api.github.com/user/keys",
  "notifications_url": "https://api.github.com/notifications",
  "organization_repositories_url": "https://api.github.com/orgs/{org}/repos{?type,page,per_page,sort}",
  "organization_url": "https://api.github.com/orgs/{org}",
  "public_gists_url": "https://api.github.com/gists/public",
  "rate_limit_url": "https://api.github.com/rate_limit",
  "repository_url": "https://api.github.com/repos/{owner}/{repo}",
  "repository_search_url": "https://api.github.com/search/repositories?q={query}{&page,per_page,sort,order}",
  "current_user_repositories_url": "https://api.github.com/user/repos{?type,page,per_page,sort}",
* (304) (IN), TLS Unknown, Unknown (23):
  "starred_url": "https://api.github.com/user/starred{/owner}{/repo}",
  "starred_gists_url": "https://api.github.com/gists/starred",
  "team_url": "https://api.github.com/teams",
  "user_url": "https://api.github.com/users/{user}",
  "user_organizations_url": "https://api.github.com/user/orgs",
  "user_repositories_url": "https://api.github.com/users/{user}/repos{?type,page,per_page,sort}",
  "user_search_url": "https://api.github.com/search/users?q={query}{&page,per_page,sort,order}"
}
* Connection #0 to host api.github.com left intact
keitee@keitee-mint:~/mw/ethan-as-source-repo$


Here, * refers to additional information provided by cURL. > refers to request
headers, and < refers to the response headers.


The Data (Or “Body”)

The data (sometimes called “body” or “message”) contains information you want to
be sent to the server. This option is only used with POST, PUT, PATCH or DELETE
requests.

To send data through cURL, you can use the -d or --data option:

curl -X POST <URL> -d property1=value1


To send multiple data fields, you can create multiple -d options:

curl -X POST <URL> -d property1=value1 -d property2=value2

If it makes sense, you can break your request into multiple lines \ to make it easier to read:

curl -X POST <URL> \
  -d property1=value1 \
  -d property2=value2

If you know how to spin up a server, you can make an API and test your own data.
If you don’t know, but feel courageous enough to try, you can follow this
article to learn to create a server with Node, Express, and MongoDB

If you don’t want to spin up your server, you can go to Requestbin.com (it’s
    free!) and click on the “create endpoint”. You’ll be given a URL that you
can use to test requests, like https://requestb.in/1ix963n1 shown in the picture
below.

Make sure you create your own request bin if you want to test your request.
Request bins only remains open for 48 hours after its creation. By the time you
read this article, the bin I created above will be long gone.

Now, try sending some data to your request bin, then refresh your bin’s webpage.
You’ll see some data, like this:

curl -X POST https://requestb.in/1ix963n1 \
  -d property1=value1 \
  -d property2=value2

By default, cURL sends data as if they’re sent through “form fields” on a page.
If you wish to send JSON data, you’ll need to set the Content-Type to
application/json, and you’ll need to format your data as a JSON object, like
this:

curl -X POST https://requestb.in/1ix963n1 \
  -H "Content-Type: application/json" \
  -d '{
  "property1":"value1",
  "property2":"value2"
}'

And that is (almost!) everything you need to know about the structure of a
request.

Now, remember when you tried to send a POST request through Github’s API, you
got a message that says “Requires authentication”? Well, that’s because you’re
not authorized to perform the POST request!


={============================================================================
*kt_dev_web_005* dropbox

https://www.dropbox.com/en/help/201

Force a file or folder to download, or to render on dropbox.com

You can make simple modifications to Dropbox links to share files the way you
want.  Force a file or folder to download

To force a browser to download a file or folder rather than display it, you
can use dl=1 as a query parameter in your URL. For example:
https://www.dropbox.com/s/a1b2c3d4ef5gh6/example.docx?dl=1

Note: The original shared link URL may contain query string parameters already
      (for example, dl=0). App developers should be sure to properly parse the
      URL and add or modify parameters as needed.


==============================================================================
Copyright: see |ktkb|                              vim:tw=100:ts=3:ft=help:norl:
