*kt_dev_qt*                                                                tw=100

kt.dev.qt

/^[#=]{
Use #{ for a group and ={ for a item

|kt_dev_qt_0001| qt-book
|kt_dev_qt_0001| qt-edit-encoding
|kt_dev_qt_0001| qt-edit-view


={============================================================================
|kt_dev_qt_0001| qt-book

http://wiki.qt.io/Books

Learning Qt 5 (Video)
Authors: Symeon Huang
Publish: April 2017
ISBN: 978-1787285972

An easy to follow, example-based, comprehensive introduction to all the major
features in Qt Available from Packt


# ============================================================================
#{
={============================================================================
|kt_dev_qt_0001| qt-creator-project

http://doc.qt.io/qtcreator/creator-project-creating.html

In addition, you can import projects as generic projects that do not use
qmake, Qbs, or CMake. This enables you to use Qt Creator as a code editor and
to fully control the steps and commands used to build the project.


Device	
An embedded device or a mobile device. For more information, see Target
Platforms.

Kit	
Qt Creator groups build and run specific settings as kits to make
cross-platform development easier. Each kit consists of a set of values that
define one environment, such as a device, tool chain, Qt version, and debugger
command to use. Configure kits at Tools > Options > Build & Run > Kits.

Import Project

Import Existing Project
Import an existing project that does not use any of the supported build
systems: qmake, Qbs, CMake, or Autotools. This enables you to use Qt Creator
as a code editor


={============================================================================
|kt_dev_qt_0001| qt-edit-encoding

<edit-encoding>
To show the file encoding of the current file on the editor toolbar (6),
select Tools > Options > Text Editor > Display > Display file encoding. To
  change the encoding, click it on the toolbar and select new encoding in the
  Text Encoding dialog. To reload the file with the selected encoding, select
  Reload with Encoding. To save the file with the new encoding, select Save
  with Encoding.


={============================================================================
|kt_dev_qt_0001| qt-edit-view

You can view multiple files simultaneously in the following ways:

To split the editor view into a top and bottom view, select Window > Split, press Ctrl+E, 2, or select the  (Split) button and then select Split.
Split command creates views below the currently active editor view.

To split the editor view into adjacent views, select Window > Split Side by Side, press Ctrl+E, 3, or select Split > Split Side by Side.
Side by side split command creates views to the right of the currently active editor view.

To open the editor in a detached window, press Ctrl+E, 4, or select Window > Open in New Window.
The new window behaves basically in the same way as the editor area in the main window. For example, you can split this window, as well. Documents are opened in the currently active editor window.

To move between split views and detached editor windows, select Window > Go to Next Split or Window or press Ctrl+E, O.

To remove a split view, place the cursor within the view you want to remove and select Window > Remove Current Split, press Ctrl+E, 0, or select the  (Remove Split) button. To remove all but the currently selected split view, select Window > Remove All Splits or press Ctrl+E, 1.


={============================================================================
|kt_dev_qt_0001| qt-edit-reparse

Reparsing Externally Changed Files

If source files are modified from outside Qt Creator, the opened files will be
reparsed automatically. For all other files, you can use Tools > C++ > Reparse
Externally Changed Files to update the code model.


==============================================================================
Copyrightobjdump see |ktkb|                        vim:tw=100:ts=3:ft=help:norl:
