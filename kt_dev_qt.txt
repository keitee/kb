*kt_dev_qt*                                                                tw=100

kt.dev.qt

/^[#=]{
Use #{ for a group and ={ for a item

|kt_dev_qt_0001| qt-book
|kt_dev_qt_0001| qt-creator-command
|kt_dev_qt_0001| qt-creator-project
|kt_dev_qt_0001| qt-edit-navigate
|kt_dev_qt_0001| qt-edit-encoding
|kt_dev_qt_0001| qt-edit-view


={============================================================================
|kt_dev_qt_0001| qt-book

http://wiki.qt.io/Books

Learning Qt 5 (Video)
Authors: Symeon Huang
Publish: April 2017
ISBN: 978-1787285972

An easy to follow, example-based, comprehensive introduction to all the major
features in Qt Available from Packt


={============================================================================
|kt_dev_qt_0001| qt-install

https://wiki.qt.io/Install_Qt_5_on_Ubuntu

Adjust permission, run the installer and follow the instruction to complete
the installation.

chmod +x qt-opensource-linux-x64-5.7.0.run
./qt-opensource-linux-x64-5.7.0.ru

http://doc.qt.io/qt-5/linux.html
Requirements for Development Host

The Qt installers for Linux assume that a C++ compiler, debugger, make, and
other development tools are provided by the host operating system. In
addition, building graphical Qt applications requires OpenGL libraries and
headers installed. Most Linux distributions do not install all of these by
default, but setting up a development environment is still straightforward.

Use the following commands to install the basic requirements for building Qt applications:

Debian/Ubuntu (apt-get)

sudo apt-get install build-essential libgl1-mesa-dev


={============================================================================
|kt_dev_qt_0001| qt-widget


int main(int argc, char *argv[])
{
  // The following line creates a `QApplication` object. This object manages
  // application-wide resources and is necessary to run any Qt program that
  // uses Qt Widgets. It constructs an application object with argc command
  // line arguments run in argv. (For GUI applications that do not use Qt
  // Widgets, you can use QGuiApplication instead.)

  QApplication EditorApp(argc, argv);

  // The following line creates the Notepad object. This is the object for
  // which the wizard created the class and the UI file. The user interface
  // contains visual elements that are called widgets in Qt. Examples of
  // widgets are text edits, scroll bars, labels, and radio buttons. A widget
  // can also be a container for other widgets; a dialog or a main application
  // window, for example.

  Notepad Editor;

  // The following line shows the Notepad widget on the screen in its own
  // window. Widgets can also function as containers. An example of this is
  // QMainWindow which often contains several types of widgets. Widgets are
  // not visible by default; the function show() makes the widget visible.

  Editor.show();

  // The following line makes the QApplication enter its event loop. When a Qt
  // application is running, events are generated and sent to the widgets of
  // the application. Examples of events are mouse presses and key strokes.

  return EditorApp.exec();
}


class Notepad : public QMainWindow
{
    Q_OBJECT
};


<action-and-slot>


={============================================================================
|kt_dev_qt_0001| qt-quick


# ============================================================================
#{
={============================================================================
|kt_dev_qt_0001| qt-creator-command

kyoupark@kit-debian64:~$ cat ~/.local/share/applications/DigiaQt-qtcreator-community.desktop
[Desktop Entry]
Type=Application
Exec=/home/kyoupark/Qt/Tools/QtCreator/bin/qtcreator
Name=Qt Creator (Community)
GenericName=The IDE of choice for Qt development.
Icon=QtProject-qtcreator
StartupWMClass=qtcreator
Terminal=false
Categories=Development;IDE;Qt;
MimeType=text/x-c++src;text/x-c++hdr;text/x-xsrc;application/x-designer;application/vnd.qt.qmakeprofile;application/vnd.qt.xml.resource;text/x-qml;text/x-qt.qml;text/x-qt.qbs;


={============================================================================
|kt_dev_qt_0001| qt-creator-project

http://doc.qt.io/qtcreator/creator-project-creating.html

In addition, you can import projects as generic projects that do not use
qmake, Qbs, or CMake. This enables you to use Qt Creator as a code editor and
to fully control the steps and commands used to build the project.


Device	
An embedded device or a mobile device. For more information, see Target
Platforms.

Kit	
Qt Creator groups build and run specific settings as kits to make
cross-platform development easier. Each kit consists of a set of values that
define one environment, such as a device, tool chain, Qt version, and debugger
command to use. Configure kits at Tools > Options > Build & Run > Kits.

Import Project

Import Existing Project
Import an existing project that does not use any of the supported build
systems: qmake, Qbs, CMake, or Autotools. This enables you to use Qt Creator
as a code editor


={============================================================================
|kt_dev_qt_0001| qt-edit-navigate

{code-model}
http://doc.qt.io/qtcreator/creator-clang-codemodel.html

Activating Clang Code Model

If you build Qt Creator yourself, ensure that the plugin is also built, as described in the Qt Creator README file.

To activate the plugin:

Select Help > About Plugins > C++ > ClangCodeModel to enable the plugin.

Restart Qt Creator to be able to use the plugin.


Checking Code Syntax

As you write code, Qt Creator checks code syntax. When Qt Creator spots a
syntax error in your code it underlines it and shows error details when you
move the mouse pointer over the error. Similarly, when you are working on an
instance of a JavaScript object notation (JSON) entity, Qt Creator underlines
errors in JSON data structure.


When using the Clang code model, errors and warnings are additionally marked
with icons and annotated. If a Clang fix-it is available, you can execute it
by clicking the  icon and pressing Enter.

To specify the position where the annotations are displayed, select 

Tools > Options > Text Editor > Display > Annotations next to lines, 
      
and then select whether to display the annotations directly next to the code,
aligned to the right of the code, or in the right margin.


Searching with the Locator

To activate the locator:

Press Ctrl+K (Cmd+K on macOS).

Using Locator Filters

The locator enables you to browse not only files, but any items defined by
locator filters. By default, the locator contains filters for:

Locating any open document (o)

Locating files anywhere on your file system (f)

Locating files belonging to your project (p), such as source, header resource, and .ui files, or to any project (a)

Locating class (c), `enum, and function (m) definitions` in your project or
anywhere referenced from your project (:)

Locating symbols in the current document (.)
Locating a specific line and column in the document displayed in your editor
(l <line_number>:<column_number>)

Opening help topics, including Qt documentation (?)

Performing web searches (r)
Running text editing macros that you record and save (rm). For more
information, see Using Text Editing Macros

Executing shell commands (!)
Executing version control system commands (git). For more information, see
Using Version Control Systems

Running external tools (x)

To use a specific locator filter, `type the assigned prefix followed by space.`
The prefix is usually a single character. Then type the search string
(typically, a filename or class name) or the command to execute.

Filters locating files also accept paths, such as tools/*main.cpp. 
                                                         
Filters locating class and function definitions also accept namespaces, such
as Utils::*View.


To jump to a line and column in the current file, select the line and column
indicator (5) or press Ctrl+L (or Cmd+L on macOS) to open the locator. Enter
the line number and column number in the locator, separated by a colon (:).


Moving to Symbol Definition or Declaration

You can move directly to the definition or the declaration of a symbol by
holding the Ctrl key and clicking the symbol. If you have multiple splits
opened, you can open the link in the next split by holding Ctrl and Alt while
clicking the symbol.

To enable this moving function, select Tools > Options > Text Editor >
Behavior > Enable mouse navigation.

You can also select the symbol and press F2, or right-click the symbol and
select Follow Symbol Under Cursor to move to its definition or declaration.

This feature is supported for namespaces, classes, functions, variables,
include statements, and macros.

To switch between the definition and declaration of a function, place the
cursor on either and press `Shift+F2` or right-click and select Switch Between
Function Declaration/Definition. For example, this allows you to navigate from
anywhere within a function body directly to the function declaration.

Links are opened in the same split by default. To open links in the next
split, prepend Ctrl+E to the shortcut. For example, press Ctrl+E,F2 to follow
the symbol in the next split. If necessary, the view is automatically split.
To change the default behavior, select Tools > Options > Text Editor > Display
> Always open links in another split. Additional symbols are displayed and
switching between definition and declaration is done in another split. If you
change the default behavior, the shortcuts for opening link targets in the
next split are used to open them in the current split.


Generic Highlighting

Generic highlighting is based on highlight definition files that are provided
by the Kate Editor. You can download highlight definition files for use with
Qt Creator. For more information about the definition files, see
KDE-Files.org.


={============================================================================
|kt_dev_qt_0001| qt-edit-encoding

<edit-encoding>
To show the file encoding of the current file on the editor toolbar (6),
select Tools > Options > Text Editor > Display > Display file encoding. To
  change the encoding, click it on the toolbar and select new encoding in the
  Text Encoding dialog. To reload the file with the selected encoding, select
  Reload with Encoding. To save the file with the new encoding, select Save
  with Encoding.


={============================================================================
|kt_dev_qt_0001| qt-edit-view

You can view multiple files simultaneously in the following ways:

To split the editor view into a top and bottom view, select Window > Split, press Ctrl+E, 2, or select the  (Split) button and then select Split.
Split command creates views below the currently active editor view.

To split the editor view into adjacent views, select Window > Split Side by Side, press Ctrl+E, 3, or select Split > Split Side by Side.
Side by side split command creates views to the right of the currently active editor view.

To open the editor in a detached window, press Ctrl+E, 4, or select Window > Open in New Window.
The new window behaves basically in the same way as the editor area in the main window. For example, you can split this window, as well. Documents are opened in the currently active editor window.

To move between split views and detached editor windows, select Window > Go to Next Split or Window or press Ctrl+E, O.

To remove a split view, place the cursor within the view you want to remove and select Window > Remove Current Split, press Ctrl+E, 0, or select the  (Remove Split) button. To remove all but the currently selected split view, select Window > Remove All Splits or press Ctrl+E, 1.


={============================================================================
|kt_dev_qt_0001| qt-edit-reparse

Reparsing Externally Changed Files

If source files are modified from outside Qt Creator, the opened files will be
reparsed automatically. For all other files, you can use Tools > C++ > Reparse
Externally Changed Files to update the code model.


==============================================================================
Copyrightobjdump see |ktkb|                        vim:tw=100:ts=3:ft=help:norl:
