
/** MHV terminate function.  It calls the terminate function for all MHV
 * drivers that are linked into the MHV driver table.
 *
 * \retval ERR_OK            successful
 * \retval ERR_SYS           Failure
 */
extern pfmerr_t
mhvTerminate(void);
/*\}*/

/*****************************************************************************/
/*                 Application Session Management.                           */
/*****************************************************************************/
/** \name Application Session Management.
<ISession>
extern pfmerr_t mhvSessionLaunch(const char *applicationName,
    FMhvFileOpenedCb cbFn, void *cbArg);
extern pfmerr_t mhvSessionSpawn(const char *applicationName,
    FMhvFileOpenedCb cbFn, void *cbArg);
extern pfmerr_t mhvSessionOpenSub(const char *applicationName,
    FMhvFileOpenedCb cbFn, void *cbArg);
extern pfmerr_t mhvSessionQuit(const char *applicationName,
    FMhvFileOpenedCb cbFn, void *cbArg);
<not-used> extern void mhvSessionGetCurrentInfo(char *vol_name, char *path);
extern pfmerr_t mhvSessionResolveName(const char *in, char *out, int maxLen, int *calculated);
extern void mhvSessionCancel(void);
void mhvSessionPop(void);
void mhvSessionConvert(void);
<not-external-use> extern uint16_t mhvMediaDefService(void);
// it is the part of session File Access Functions.                                    */
pfmerr_t mhvFileCheck(const char *fileName, FMhvFileCheckCb cbFn, void *cbArg, EMhvFileType fileType);
pfmerr_t mhvFileOpen(const char *fileName, int cachePriority, FMhvFileOpenedCb cbFn, void *cbArg, EMhvFileType fileType);
extern pfmerr_t mhvFileClose(HMhvFile file);
extern pfmerr_t mhvFileSetCachePriority(HMhvFile file, int cp);
extern pfmerr_t mhvFileLock(HMhvFile obj, void **opData, uint32_t *oiLength);
extern pfmerr_t mhvFileUnlock(HMhvFile obj);




<IMedia>
// extern uint16_t mhvMediaCurService(void);
// extern pfmerr_t mhvSessionSetRTGrahics(bool on_off);
// extern pfmerr_t mhvMediaLock(void);
// extern pfmerr_t mhvMediaUnlock(void);
// pfmerr_t mhvMediaContinuance(void);
// extern pfmerr_t mhvMediaDisinheritVideo(void);
// extern pfmerr_t mhvMediaDisinheritAudio(void);
// extern pfmerr_t mhvWindowSetWidescreenAlignment(EMhvWidescreenAlignmentMode alignment);
// extern pfmerr_t mhvWindowSetAspectRatio(EMhvAspectRatio ar);
// extern pfmerr_t mhvWindowMapCoordinates(int x, int y, int *ox, int *oy);
//
// extern void mhvMediaPictureLock(void);
// extern void mhvMediaPictureUnlock(void);
// extern void mhvMediaOnMuteKeyPress(void);
// extern void mhvMediaOnAudPmtChange(uint32_t ui_pmt_data);
// extern void mhvMediaOnVidPmtChange(uint32_t ui_pmt_data);
// extern void mhvMediaOnAudLangChange(void);
// extern void mhvMediaOnAfdChange(long afd);
// extern void mhvMediaPrefChange(void);
// extern void mhvSetFullResetFlag( bool reset_flag );
// extern void mhvMediaResetInternalState(bool on_reboot);
// extern void mhvMediaInitInternalState(uint16_t def_onid, uint16_t def_tsid, uint16_t def_sid);
// extern void mhvResetInOutVideoWindows(void);


/*****************************************************************************/
/*                 IFrame rendering Functions.                               */
/*****************************************************************************/
<covered>
// extern pfmerr_t mhvIFrameCreate(HMhvIFrame* hiframe, EMhvIFramePlane plane);
// extern pfmerr_t mhvIFrameSetData(HMhvIFrame hiframe, void *ipData, uint32_t iLength);
// extern pfmerr_t mhvIFrameSetDimensions(HMhvIFrame hiframe, int x, int y,
//     int offset_x, int offset_y,
//     int w, int h, int scale_x, int scale_y,
//     EMhvWidescreenAlignmentMode scaleMode);
// extern void mhvIFrameDestroy(HMhvIFrame hiframe);
// extern bool mhvWasIFrameDisplayed( void );
// extern void mhvResetIFrameDisplayFlag( void );
// extern bool mhvIFrameIsMPEG2(void *ipData, uint32_t iLength);
// extern bool mhvIFrameIsH264(void *ipData, uint32_t iLength);

/*****************************************************************************/
/*                 Stream Access Functions.                                  */
/*****************************************************************************/
/** \name Stream Access Functions.
 * \{
 */

/** Plays a file as a stream with in-memory media data.
 * The differences between this and a real MhvStream are:
 * - No components can be set
 * - No events can be subscribed (other than the start/stop)
 * - a loop count is specified.
 * Other than that, the file can be paused/resumed or stopped with the Stream
 * functions and the volume can be controlled as normal.
 * \param fil      Handle to file.
 * \param loops    Number of times to loop (0 means infinite looping)
 * \param cbFn     Callback invoked for events.
 * \param cbArg    User argument to pass to callbacks.
 * \retval ERR_OK Locked
 * \retval ERR_INV unknown file handle.
 */
extern pfmerr_t
mhvFilePlay(HMhvStream h,
    int loops,
    FMhvStreamEventCb cbFn,
    void *cbArg,
    bool bNoisy);

/*Stream Termination Type.*/
typedef enum _EMhvStreamTerminationType
{
    eMHV_STREAM_TERMINATE_INVALID = 0,
    eMHV_STREAM_TERMINATE_FREEZE = 1,
    eMHV_STREAM_TERMINATE_DISAPPEAR = 2
} EMhvStreamTerminationType;

/** Acquire content associtaed with a named stream.
 *
 * \param streamName    name of stream.
 * \param cachePriority cache priority associated with content.
 * \param cbFn          function to invoke on completion.
 * \param cbArg         argument to pass to callback function.
 * \retval ERR_OK    Acquisition in progress.
 * \retval ERR_STATE A session operation is in progress.
 */
extern pfmerr_t
mhvStreamOpen(const char *streamName, int cachePriority,
    FMhvStreamOpenedCb cbFn, void *cbArg);

extern pfmerr_t
mhvStreamFileOpen(const char *fileName, int cachePriority,
    FMhvStreamOpenedCb cbFn, void *cbArg, EMhvFileType fileType);

pfmerr_t
mhvStreamIPOpen(const char *name, int cachePriority,
    FMhvStreamOpenedCb cbFn, void *cbArg,
    EMhvStreamTerminationType streamEndType, bool doPreBuffer, HMhvStream* h,
    int counterPos);

/** Returns true if an IP stream is actually playing
 */
extern bool
mhvStreamIPPlaying(void);

/** Closes a stream object. The handle becomes invalid for further calls.
 * \param h stream handle.
 * \retval ERR_OK Done
 * \retval ERR_INV unknown stream handle.
 */
extern pfmerr_t
mhvStreamClose(HMhvStream h);

/** Starts a stream object playing and enables components and reception of
 * stream events and triggers. The events and triggers will be sent to the
 * registered callback function. Two 'special' events are always sent:
 * MHV_EVENT_STARTED and MHV_EVENT_STOPPED are not generated by calls to
 * mhvStreamSetTrigger(), but are always sent when the stream starts and stops.
 *
 * \param h      Handle to stream
 * \param loop   loop count
 * \param cbFn   Callback invoked for events.
 * \param cbArg  User argument to pass to callbacks.
 * \param bNoisy if false don't generate stream start event
 */
extern pfmerr_t
mhvStreamPlay(HMhvStream h,
    int loop,
    FMhvStreamEventCb cbFn,
    void *cbArg,
    bool bNoisy);

/** Stops a stream and prevents firing of events and triggers. Also disables
 * presentation of any enabled media components.
 * \param h      Handle to stream
 * \retval ERR_OK Done
 * \retval ERR_INV unknown stream handle.
 * \retval ERR_STATE not playing.
 */
extern pfmerr_t
mhvStreamStop(HMhvStream h);

extern pfmerr_t
mhvStreamPause(HMhvStream h);

extern pfmerr_t
mhvStreamResume(HMhvStream h);

extern pfmerr_t
mhvStreamRestart(HMhvStream h);

/** Select Audio by tag. -1 is default, any other negative value is off.
 * Should be called when audio object is activated/deactivated.
 * \param h      Handle to stream
 * \param tag    tag value.
 */
extern pfmerr_t
mhvStreamSetAudio(HMhvStream h, int32_t tag);

/** Select Video by tag. -1 is default, any other negative value is off.
 * Should be called when video object is activated/deactivated.
 * \param h      Handle to stream
 * \param tag    tag value.
 */
extern pfmerr_t
mhvStreamSetVideo(HMhvStream h, int32_t tag);

/** Set the window parameters used to display video.
 * The height and width of the window are used to to crop.
 */
extern pfmerr_t
mhvStreamSetWindow(HMhvStream hn, int x, int y,
    int offset_x, int offset_y,
    int w, int h, int scale_x, int scale_y);

extern pfmerr_t
mhvStreamSetVolume(HMhvStream h, int percent);


/** Set the stream position in 'counter unit' resolution.
 * only applicable to non-linear streams
 * \param h        handle to stream
 * \param position new position in the stream
 * \param doPrebuffer - flag indicating if prebuffering is to be done or not
 * \retval ERR_INV if the stream does not exist or the stream isn't non-linear
 */
extern pfmerr_t
mhvStreamSetPosition(HMhvStream h, int position, bool doPrebuffer);

/** Set the stream position in 'counter unit' resolution.
 * only applicable to non-linear streams
 * \param h        handle to stream
 * \param [out] position current position in the stream
 * \retval ERR_INV if the stream does not exist or the stream isn't non-linear
 */
extern pfmerr_t
mhvStreamGetPosition(HMhvStream h, int* position);

/** Set the max stream position in 'counter unit' resolution.
 * only applicable to non-linear streams
 * \param h        handle to stream
 * \param [out] position max position in the stream
 * \retval ERR_INV if the stream does not exist or the stream isn't non-linear
 */
extern pfmerr_t
mhvStreamGetMaxPosition(HMhvStream h, int* position);

/** Set the stream end position in 'counter unit' resolution.
 * Stream playback will stop at this point.
 * only applicable to non-linear streams
 * \param h        handle to stream
 * \param position current position in the stream
 * \retval ERR_INV if the stream does not exist or the stream isn't non-linear
 */
extern pfmerr_t
mhvStreamSetEndPosition(HMhvStream h, int position);

/** Set a counter trigger at a specified time on a stream. The trigger will
 * only fire while the stream is playing, and will persist while the stream
 * persists.
 * \param h     handle to stream
 * \param nId   Id of trigger
 * \param [in] pValue, time of trigger, if null then remove an existing trigger
 * \param cbfn function to notify trigger on
 * \param cbarg notification data
 * \retval ERR_INV if the stream does not exist or the stream isn't non-linear
 */
extern pfmerr_t
mhvStreamSetTrigger(HMhvStream h, int nId, int * pValue,
    FMhvStreamTriggerCb cbfn, void* cbarg);

/** Subscribe to a named event within a stream. The trigger will only fire
 * while the stream is playing, and will persist while the stream persists.
 * \param h     handle to stream
 * \param name  Name of the event. NULL will subscribe all available events.
 * \param oh    Output handle to trigger.
 * \param version -1 if not important, otherwise the last version seen
 */
extern pfmerr_t
mhvStreamEventSubscribe(HMhvStream h, const char *name, HMhvEvent *oh, int evId, int version);

extern pfmerr_t
mhvStreamEventGetVersion(HMhvEvent h, int* evId, int *version);

/** Destroy previously set or subscribed trigger.
 * \param h     handle to trigger
 * \retval ERR_OK Done
 * \retval ERR_INV unknown trigger handle.
 */
extern pfmerr_t
mhvStreamCancelEvent(HMhvEvent h);

/** Change the sid of the stream - used for non-destructive tune to manage
 * the currently runniing audio and video streams.
 * \param h     handle to trigger
 * \param sid   sid to change to
 * \retval ERR_OK Done
 * \retval ERR_INV unknown trigger handle.
 */
extern pfmerr_t
mhvStreamSetSid(HMhvStream h, int32_t sid);

/** Get the sid of the stream - used for non-destructive tune to manage
 * the currently runniing audio and video streams.
 * \param h     handle to trigger
 * \param sid   The sid of the stream
 * \retval ERR_OK Done
 * \retval ERR_INV unknown trigger handle or sid is null.
 */
extern pfmerr_t
mhvStreamGetSid(HMhvStream h, int32_t* sid);


/*\}*/
/** Return the current system aspect ratio as either 4:3 or 16:9
 * \retval EMhvAspectRatio 4:3 or 16:9 only
 */
EMhvAspectRatio mhvSystemGetAspectRatio(void);


/*
    BBC MHEG channel have quarter video at MHEG screen.
    If exit key selected then sometimes can see quarter video async problem.
    Because SetSize() api called late, so shortly quarter video remained after cleared MHEG graphic.
    When clear window called, video value should set to original size.
*/
extern void
mhvResetInOutVideoWindows(void);

/**************************************************************************
*             C Callable wrapper interfaces for Class Based Media implementation
***************************************************************************
*/



/*****************************************************************************/
/*                 Hybrid file system Functions.                             */
/*****************************************************************************/
/** \name Hybrid file system Functions.
 * \{
 */

/**Set the mappings for a given path.
 * \param pathNameBuf path to add the mappings against
 * \param pathNameSize length of path name
 * \param mappingBuf buffer as defined in DBook 6.0 13.10.9b.1
 * \param mappingSize length of mapping string
 * \retval ERR_OK Done
 * \retval ERR_INV failed to set mapping
 */
extern pfmerr_t
mhvSetHybridFile(uint8_t *pathNameBuf, int pathNameSize, uint8_t *mappingBuf , int mappingSize);
/*\}*/

/*****************************************************************************/
/*                          Network functions.                               */
/*****************************************************************************/

// TODO Please revise the placement of connection check code

typedef enum _EMhvICConnectionStatus
{
    MHV_IC_CONN_ACTIVE = 0,
    MHV_IC_CONN_INACTIVE = 1,
    MHV_IC_CONN_DISABLED = 2  // Note, disabled means the user has selected that MHEG not have access.  We don't have a menu for this.
} EMhvICConnectionStatus;

/**
 * Returns network connection status.
 * @return Network status, ex. IC_CONN_ACTIVE
 */
extern EMhvICConnectionStatus
mhvNetworkCheckICConnectionStatus(void);

/**
 * Store a cookie where
 * \param [in] m_identity is the cookie in the form name,domain/path?
 * \param [in] value is the value of the cookie
 * \param [in] expires as MJD or 0.  Will not be used for processing but may be returned to server
 * \param [in] secure ?if true then the cookie can only be returned on https connections
 */
extern void
mhvNetworkSetCookie(const char* identity, const char* value, unsigned long expiry, bool secure);

/**
 * Store a cookie where
 * \param [in] m_identity is the cookie in the form name,domain/path?
 * \param [in]  value_buf_len is the length of the string passed in for cookie value.  If 0 then cookie value may be null.
 * \param [out] value is the value of the cookie.  May be null if cookie_len is 0.
 * \param [out] actual_value_len, is the length of the cookie value.  If this is less than cookie_len then the content of value is undefined.
 * \param [out] expires as MJD or 0.  Will not be used for processing but may be returned to server
 * \param [out] secure ?if true then the cookie can only be returned on https connections
 * \return true if the cookie was found
 */
extern bool
mhvNetworkGetCookie(const char* identity, size_t value_buf_len,
    char* value, size_t* actual_value_len, unsigned long* expiry, bool* secure);

/** Post data to an HTTP URL
 * \param pUrlStr       The URL
 * \param pRequestBody  The data to post (encoded in name-value pairs like an HTML form )
 * \param fn            Callback function
 * \param arg           Argument for callback function
 * \retval ERR_OK Done
 * \retval ERR_INV Failed
 */
pfmerr_t
mhvNetworkPostData(const char* pUrlStr,
    const char* pRequestBody,
    FMhvPostCompleteCb fn,
    void *arg);

// Ensure mhv is locked to prevent deadly embrace in some callback cases
void mhvGetMHVLock();
void mhvReleaseMHVLock();


Copyright: see |ktkb|  vim:tw=100:ts=3:ft=help:norl:

