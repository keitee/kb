*kt_dev_07*                                                                tw=100

kt.dev.splunk

/^[#=]{
Use #{ for a group and ={ for a item

|kt_dev_splunk_001| splunk-tutorial
*kt_dev_splunk_001* splunk-operators
*kt_dev_splunk_001* splunk-search-language
*kt_dev_splunk_001* splunk-search-tip
*kt_dev_splunk_001* splunk-stat
*kt_dev_splunk_001* splunk-eval
*kt_dev_splunk_001* splunk-rex
*kt_dev_splunk_001* splunk-aggregate-functions

# ============================================================================
#{
={============================================================================
*kt_dev_splunk_001* splunk-tutorial

http://docs.splunk.com/Documentation/Splunk/latest/SearchTutorial/WelcometotheSearchTutorial

Where is the data stored?

The process of transforming the data is called indexing. During indexing, the
incoming data is processed to enable fast searching and analysis. The
processed results are stored in the index as events.

The index is a flat file repository for the data. For this tutorial, the index
resides on the computer where you access your Splunk deployment.

Events are stored in the index as a group of files that fall into two
categories:

 Raw data, which is the data that you add to the Splunk deployment. The raw
 data is stored in a compressed format.  
 
 Index files, which include some metadata files that point to the raw data.
 These files reside in sets of directories, called buckets, that are organized
 by age.

By default, all of your data is put into a single, preconfigured index. There
are several other indexes used for internal purposes.


<sourcetype>
http://docs.splunk.com/Documentation/Splunk/6.6.2/Data/Whysourcetypesmatter
Why source types matter

The source type is one of the default fields that Splunk software assigns to
all incoming data. It tells Splunk software what kind of data you have, so
that it can format the data intelligently during indexing. Source types also
let you categorize your data for easier searching.

Source types determine how incoming data is formatted Because the source type
controls how Splunk software formats incoming data, it is important that you
assign the correct source type to your data. That way, the `indexed` version of
the data (the `event data`) looks the way you want, with appropriate
timestamps and event breaks. This facilitates easier searching of the data
later.

Splunk software comes with a large number of predefined source types. When
consuming data, Splunk software will usually select the correct source type
automatically. If your data is specialized, you might need to manually select
a different predefined source type. If your data is unusual, you might need to
create a new source type with customized event processing settings. And if
your data source contains heterogeneous data, you might need to assign the
source type on a per-event (rather than a per-source) basis.

Like any other field, you can also use the source type field to search event
data, once the data has been indexed. You will use it a lot in your searches
since the source type is a key way to categorize your data.

<field>
When you add data to the Splunk platform the data is indexed. As part of the
index process, information is extracted from your data and formatted as name
and value pairs, called fields.

Fields are searchable name and value pairings that distinguish one event from
another. Not all events have the same fields and field values. Use fields to
write more tailored searches to retrieve the specific events that you want.


<default-field>
the default fields host, source, and sourcetype.


Search with fields

When you search for fields, you use the syntax field_name=field_value.

 Field names are case sensitive, but field values are not.

 You can use wildcards in field values.

 Quotation marks are required when the field values include spaces.

Interesting Fields are fields that appear in at least 20% of the events.


The Fields sidebar displays the number of `unique values for each field` in
the events. These are the same numbers that appear in the Select Fields dialog
box.

<ex>
sourcetype=access_* status=200 action=purchase
sourcetype=access_* status!=200 action=purchase
(error OR fail* OR severe) OR (status=404 OR status=500 OR status=503)


={============================================================================
*kt_dev_splunk_001* splunk-operators

<ex>
buttercupgames (error OR fail* OR severe)

The AND operator is implied when you type in multiple keywords. For example,
typing "buttercupgames error" is the same as typing "buttercupgames AND
  error".

Notice that you `must` capitalize Boolean operators. The asterisk ( * )
character is used as a wildcard character to match fail, failure, failed,
failing, and so forth.

When evaluating Boolean expressions, `precedence` is given to terms inside
parentheses. NOT clauses are evaluated before OR clauses. AND clauses have the
lowest precedence.


={============================================================================
*kt_dev_splunk_001* splunk-search-language

Splunk developed the Search Processing Language (SPL) to use with Splunk
software. SPL encompasses all the search commands and their functions,
arguments, and clauses. One way to learn the SPL language is by using the
  Search Assistant.

There are two modes for the Search Assistant: Compact and Full. The default
mode is Compact.

To change to it Full.

Splunk Cloud	Select Your_Name > User Settings.

The pipe character indicates that you are about to use a command. The results
of the search to the left of the pipe are used as the input to the command to
the right of the pipe. You can pass the results of one command into another
command in a series, or pipeline, of search commands.


sourcetype=access_* status=200 action=purchase | top categoryId

The top command is a `transforming command.` Transforming commands organize
the search results into a table.


<subsearch>

Let's find the single most frequent shopper on the Buttercup Games online
store, and what that shopper has purchased.

Example 1 shows how to find the most frequent shopper without a subsearch.
Example 2 shows how to find the most frequent shopper with a subsearch.


Example 1: Search without a subsearch

> sourcetype=access_* status=200 action=purchase | top limit=1 clientip

The limit=1 argument specifies to return 1 value. The clientip `argument`
specifies the field to return.


> sourcetype=access_* status=200 action=purchase clientip=87.194.216.51 | stats count, dc(productId), values(productId) by clientip

This search uses the count() function to return the total count of the
purchases for the shopper. The dc() function is the distinct_count function.
Use this function to count the number of different, or unique, products that
the shopper bought. The values argument is used to display the actual product
IDs in the results.

The drawback to this approach is that you have to run two searches each time
you want to build this table. The top purchaser is not likely to be the same
person at any given time range.


Example 2: Search with a subsearch

> sourcetype=access_* status=200 action=purchase | top limit=1 clientip | table clientip

A subsearch is enclosed in square brackets [ ] and `processed first` when the
search is parsed.

> sourcetype=access_* status=200 action=purchase `[search sourcetype=access_* status=200 action=purchase | top limit=1 clientip | table clientip]` | 
stats count, dc(productId), values(productId) by clientip

Because the top command returns the count and percent fields, the table
command is used to keep only the clientip value.


You can make the information more understandable by `renaming` the columns.

> sourcetype=access_* status=200 action=purchase [search sourcetype=access_* status=200 action=purchase | top limit=1 clientip | table clientip] |
stats count AS "Total Purchased", dc(productId) AS "Total Products", values(productId) AS "Products ID" by clientip | rename clientip AS "VIP Customer"


={============================================================================
*kt_dev_splunk_001* splunk-search-tip

Add linebreak to search text in search box

Use 'shift + enter' to add a line break into the search text box without
executing a search


To see info about all fields try:

* | fieldsummary | fields field

or just

* | fieldsummary


={============================================================================
*kt_dev_splunk_001* splunk-stat

<stat-command>
http://docs.splunk.com/Documentation/SplunkCloud/6.6.0/SearchReference/Stats

Description

Calculates aggregate statistics over the results set, such as average, count,
and sum. This is similar to SQL aggregation. If stats is used without a `by`
  clause only one row is returned, which is the aggregation over the entire
  incoming result set. If you use a by clause one row is returned for each
  distinct value specified in the by clause.

Syntax

Simple: stats (stats-function(field) [AS field])... [BY field-list]

Complete: stats [partitions=<num>] [allnum=<bool>] [delim=<string>] ( <stats-agg-term>... | <sparkline-agg-term>... ) [<by-clause>]


by-clause
Syntax: BY <field-list>
Description: The name of one or more fields to group by. You cannot use a
wildcard character to specify multiple fields with similar names. You must
specify each field separately.


Stats function options

stats-function
Syntax: avg() | c() | count() | dc() | distinct_count() | earliest() | estdc()
| estdc_error() | exactperc<int>() | first() | last() | latest() | list() |
max() | median() | min() | mode() | p<int>() | perc<int>() | range() | stdev()
| stdevp() | sum() | sumsq() | upperperc<int>() | values() | var() | varp()

Description: Functions used with the stats command. Each time you invoke the
stats command, you can use more than one function. However, you can only use
one by clause.  For a list of stats functions with descriptions and examples,
see Statistical and charting functions.
http://docs.splunk.com/Documentation/SplunkCloud/6.6.0/SearchReference/CommonStatsFunctions


values(X)

Description

Returns the list of all `distinct values of the field X` as a multivalue entry.
The order of the values is lexicographical.

Usage

 By default there is no limit to the number of values returned. Users with the
 appropriate permissions can specify a limit in the limits.conf file. You
 specify the limit in the [stats | sistats] stanza using the maxvalues
 setting.

 This function processes field values as strings.

 You can use the values(X) function with the chart, stats, and timechart
 commands.

Basic examples

| makeresults count=10000 | streamstats count AS rowNumber | stats values(rowNumber) AS numbers


={============================================================================
*kt_dev_splunk_001* splunk-eval

http://docs.splunk.com/Documentation/SplunkCloud/6.6.0/Search/Usetheevalcommandandfunctions

Use the eval command and functions

The eval command enables you to devise arbitrary expressions that use
automatically extracted fields to create a new field that takes the value that
is the result of the expression's evaluation. The eval command is immensely
versatile and useful. But while some eval expressions are relatively simple,
they often can be quite complex.

> sourcetype=access_* status=200 | stats count AS views count(eval(action="addtocart")) AS addtocart count(eval(action="purchase")) AS purchases by productName | eval viewsToPurchases=(purchases/views)*100 | eval cartToPurchases=(purchases/addtocart)*100 | table productName views addtocart purchases viewsToPurchases cartToPurchases | rename productName AS "Product Name", views AS "Views", addtocart as "Adds To Cart", purchases AS "Purchases"
>
The eval command is used to define two new fields. These fields contain the conversion rates.

The viewToPurchases field calculates the number of customers who viewed the
product to the number of customers who purchased the product. The calculation
returns a percentage.

The cartToPurchases field calculates the number of customers who added the
product to their cart to the number of customers who purchased the product.
The calculation returns a percentage.


={============================================================================
*kt_dev_splunk_001* splunk-rex

http://docs.splunk.com/Documentation/SplunkCloud/6.6.0/SearchReference/Rex

Use this command to either extract fields using regular expression named
groups, or replace or substitute characters in a field using sed expressions.

The rex command matches the value of the specified field against the
unanchored regular expression and extracts the named groups into fields of the
corresponding names. If a field is not specified, the regular expression is
applied to the _raw field. Note: Running rex against the _raw field might have
a performance impact.

When mode=sed, the given sed expression used to replace or substitute
characters is applied to the value of the chosen field. If a field is not
specified, the sed expression is applied to _raw. This sed-syntax is also used
to mask sensitive data at index-time. Read about using sed to anonymize data
in the Getting Data In Manual.

Use the rex command for `search-time field extraction` or string replacement and
character substitution.

Syntax

rex [field=<field>] ( <regex-expression> [max_match=<int>] [offset_field=<string>] ) | (mode=sed <sed-expression>)

regex-expression
Syntax: "<string>"
Description: The PCRE regular expression that defines the information to match
and extract from the specified field. `Quotation marks are required.`

> component="TESTS_FOUND" version=Q004.001.55.19C | rex field=message "^\"?(?<prio>[1-9]{1})\s\d*\s\d*\s(?<pdate>[0-9:]*\s*[0-9:]*)(?<msg>.*$)"  | table logid mac prio pdate msg

2017-10-30 12:53:00.0,0.000000,R019.087.39.00U,R019,87.39.00,sky_trials,ams-drx890,0019fb0baf64,Brentwood,96f4a24f37f9494280bfbf7dc0d652e1,INFO,INGEST_SIZE,0x0,INGEST,0x0,NONE,,NONE,0,ingest_size: 334254096

={============================================================================
*kt_dev_splunk_001* splunk-aggregate-functions

http://docs.splunk.com/Documentation/SplunkCloud/6.6.0/SearchReference/Aggregatefunctions

Aggregate functions summarize the values from each event to create a single,
meaningful value. Common aggregate functions include Average, Count, Minimum,
Maximum, Standard Deviation, Sum, and Variance.

Most aggregate functions are used with numeric fields. However, there are some
functions that you can use with either alphabetic string fields or numeric
fields. The function descriptions indicate which functions you can use with
alphabetic strings.

count(X) or c(X)

Description

Returns the number of occurrences of the `field X.` To indicate a specific field
value to match, format X as `eval(field="value").` Processes field values as
strings. To use this function, you can specify count(X), or the abbreviation
c(X).

Usage

You can use the count(X) function with the chart, stats, and timechart
commands, and also with sparkline() charts.

Basic examples

The following example returns the count of events where status has the value
"404". This example uses an eval expression with the count function.

...count(eval(status="404")) AS count_status BY sourcetype


=}============================================================================
Copyright: see |ktkb|                              vim:tw=100:ts=3:ft=help:norl:
