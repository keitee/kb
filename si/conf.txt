60:NDS: ^[00:18:59]0946685939.975555 !MIL   -aem          < p:00000078 t:013610c0 T:AEM_INPUT_MONITOR_THREAD M:aem_userinput.c F:AEM_InputMonitorThread L:00517 > KEY_PRESS: code=0x(RECORD)e403

684:NDS: ^[00:19:02]0946685942.555124 !ENTER -P_Planner    < p:00000078 t:0114cde0 T:SBM_CLIENT M:planner_common.c F:PLANNER_SBM_CONFLICT_NotifyListener L:01882 > |-> PLANNER_SBM_CONFLICT_NotifyListener

1059:NDS: ^[00:19:02]0946685942.698638 !ENTER -P_Planner    < p:00000078 t:2afd3c80 T:PLANNER_CB3 M:planner_callback.c F:PLANNER_ExecuteUserCallback L:00193 > |-> PLANNER_ExecuteUserCallback
1063:NDS: ^[00:19:02]0946685942.699132 !INFO  -P_Planner    < p:00000078 t:2afd3c80 T:PLANNER_CB3 M:planner_callback.c F:PLANNER_ExecuteUserCallback L:00209 > Executing the callback of type 6.

1055:NDS: ^[00:19:02]0946685942.698077 !ENTER -P_Planner    < p:00000078 t:2b00a520 T:PLANNER_MAIN M:planner_common.c F:PLANNER_ConflictNotificationHandler L:01738 > |-> PLANNER_ConflictNotificationHandler

1219:NDS: ^[00:19:02]0946685942.762986 !ENTER -P_Planner    < p:00000078 t:2b00a520 T:PLANNER_MAIN M:planner_common.c F:PLANNER_MapImminentConflictType L:03538 > |-> PLANNER_MapImminentConflictType

PLANNER_ConflictNotificationHandler
	PLANNER_MapImminentConflictType
	
1251:NDS: ^[00:19:02]0946685942.935997 !INFO  -P_Planner    < p:00000078 t:2afd3c80 T:PLANNER_CB3 M:planner_callback.c F:PLANNER_ExecuteUserCallback L:00209 > Executing the callback of type 8.
1252:NDS: ^[00:19:02]0946685942.936133 !WARN  -J_PLANNER    < p:00000078 t:2afd3c80 T:PLANNER_CB3 M:natPlannerCommon.c F:PLANNER_JAVA_Conflict_ResolverCb L:03031 > Could not find booking usertag in ABP  Vtable :0x0
1253:NDS: ^[00:19:02]0946685942.943077 !MIL   -EPG_CONF     < p:00000078 t:2afd3c80 T:PLANNER_CB3 M:ConflictResolver F:notifyConflict L:00115 > PlannerConflictType=3 Imminent Tuner, ConflictStatus=1, conflict=com.nds.fusion.plannerimpl.PlannerImminentTunerConflictImpl

typedef enum planner_cb_ev_msg_events   {
    PLANNER_EV_CB_KILL_THREAD = 0U,
    PLANNER_EV_CB_USERTAG_STATUS,
    PLANNER_EV_CB_USERTAG_HANDLE_STATUS,
    PLANNER_EV_CB_USERTAG_STATUS_HANDLE,
    PLANNER_EV_CB_USERTAG_HANDLE,
    PLANNER_EV_CB_USERTAG_HANDLE_UINT32,
    PLANNER_EV_CB_HANDLE_STATUS,
    PLANNER_EV_CB_NOARG,
    PLANNER_EV_CB_CONFLICT, '8'
    PLANNER_EV_CB_REMINDER,
    PLANNER_EV_CB_RESUME_RECORDING,
    PLANNER_EV_CB_READY_STATUS,
    PLANNER_EV_CB_PROPERTY_CHANGED, 
    PLANNER_EV_CB_CHECK_CONFLICT,
    PLANNER_EV_CB_LAST
}PLANNER_EV_CB_MSG_EVENTS;

typedef enum PLANNER_API_ConflictTypeTag
{
    PLANNER_API_CONFLICTTYPE_UNDEF = 0U,
    PLANNER_API_CONFLICTTYPE_BOOKING_TIME,      /**< Caused by insufficent resources at record time when adding a new booking */
    PLANNER_API_CONFLICTTYPE_CHANNEL_CHANGE,    /**< Caused by insufficent resources when changing the Live play. */
    PLANNER_API_CONFLICTTYPE_IMMINENT_TUNER,    /**< Caused by insufficent resources for an imminent recording. i.e clash with Live */
    PLANNER_API_CONFLICTTYPE_IMMINENT_DISK,     /**< Caused by imminent insufficent disk resources for current recordings */
    PLANNER_API_CONFLICTTYPE_BOOKING_DISK_FAIL, /**< Caused by insufficent disk resources at booking time */
    PLANNER_API_CONFLICTTYPE_PDL_REPLACEMENT_DISK, /**< Caused by imminent insufficient disk resources for PDL recording replacement with PVOD asset */
    PLANNER_API_CONFLICTTYPE_REMINDER_BOOKING,  /**< Caused by clashing reminders. */
    PLANNER_API_CONFLICTTYPE_LIVE_RESERVATION,  /**< Caused by insufficient resources when reserving resources for an interactive application */
    PLANNER_API_CONFLICTTYPE_IMMINENT_LIVE_RESERVATION, /**< Caused by insufficient resources for an imminent recording, when an interactive application is running. */
    PLANNER_API_CONFLICTTYPE_UPDATED,            /* Caused by automatic conflict update */
    PLANNER_API_CONFLICTTYPE_RESOLVED,            /* Caused by automatic conflict resolve, ie) without the resolver intervention */
    PLANNER_API_CONFLICTTYPE_IMMEDIATE_RECORDING, /* Caused by booking a second child event while watching an interactive application and recording the current child event.*/
    PLANNER_API_CONFLICTTYPE_QUOTA_CHANGE, /**< Caused by imminent insufficient disk resources when moving an asset to the user disk quota */
    PLANNER_API_CONFLICTTYPE_EXTEND_DISK_QUOTA, /**< Caused by when the viewer performs SFRB for a past event, and the user disk quota does not contain enough space for the new booking  */
    PLANNER_API_CONFLICTTYPE_LASTVALUE
} PLANNER_API_ConflictType;

typedef enum RMF_CONFLICT_TYPE_TAG
{
	RMF_CONFLICT_TYPE_UNDEF = 0,

	/*! Used for checking whether starting live viewing on a given channel
	is expected to succeed. A conflict is also detected if tuning to that
	channel will immediately cause an imminent live conflict. 
	@see #RMF_CONFLICT_TYPE_IMMINENT_LIVE */
	RMF_CONFLICT_TYPE_LIVE_TUNE,

	/*! Used for checking whether starting a live reservation (iApp) on a given channel
	is expected to succeed. A conflict is also detected if tuning to that
	channel will immediately cause an imminent live reservation conflict 
	@see #RMF_CONFLICT_TYPE_IMMINENT_LIVE_RESERVATION */
	RMF_CONFLICT_TYPE_LIVE_RESERVATION,

	/*! Predicted tuner conflict between booked programs */
	RMF_CONFLICT_TYPE_TUNER_BOOKING,	

	/*! Predicted disk quota conflict for booked programs*/
	RMF_CONFLICT_TYPE_DISK_BOOKING,		

	/*! Indicates that an imminent conflict is detected on the user disk quota. 
	This is an unsolicited conflict raised by RMF. The subject of the conflict subject, is either the
	lowest priority consuming job or the current job requesting for disk space on the user quota. */
	RMF_CONFLICT_TYPE_DISK_IMMINENT,

	/*! Predicted reminder conflict */
	RMF_CONFLICT_TYPE_REMINDER_BOOKING,	

	/*! Predicted disk conflict for already-recorded programs in transitions between quotas. */
	RMF_CONFLICT_TYPE_DISK_SAVE,

	/*! Indicates that an imminent conflict has been detected on live job. This is an unsolicited
	conflict raised by RMF. The subject of the conflict is the live job for which the conflict was raised. */
	RMF_CONFLICT_TYPE_IMMINENT_LIVE,		

	/*! Indicates that an imminent conflict has been detected on live reservation (iApp) job. This is an unsolicited
	conflict raised by RMF. The subject of the conflict is the live reservation job for which the conflict was raised. */
	RMF_CONFLICT_TYPE_IMMINENT_LIVE_RESERVATION,		

	/*! Indicates that an imminent conflict has been detected on RB record job. This is an unsolicited
	conflict raised by RMF for RB record job which is not shared with live job. The  subject of the conflict is the RB job
	for which the conflict was raised. */
	RMF_CONFLICT_TYPE_IMMINENT_RB,	

	/*! Unsolicited conflict that indicates a quota conflict caused by changing the
	job's quota (e.g. saving a PVOD asset from system quota to user quota).
	
	Relevant queries:
		- #E_RMF_CONFLICT_QUERY_TYPE_CONFLICT_SUBJECT
		- #E_RMF_CONFLICT_QUERY_TYPE_DISK_SPACE_SUGGESTION_OFFER
		- #E_RMF_CONFLICT_QUERY_TYPE_DISK_SPACE_WARNING_OFFER
	*/
	RMF_CONFLICT_TYPE_QUOTA_CHANGE,

	/*! Used for checking whether child event recording is expected	to succeed. */
	RMF_CONFLICT_TYPE_IMMEDIATE_RECORDING,

	/*! Used for checking extend disk quota conflict */
	RMF_CONFLICT_TYPE_EXTEND_DISK_QUOTA,	

	RMF_CONFLICT_TYPE_LAST	 
} RMF_CONFLICT_TYPE;


#
# APP -> PLANNER -> SBM C -> SBM S -> RMF
#

PLANNER_JAVA_Conflict_ResolverCb

PLANNER_ExecuteUserCallback
{
	case PLANNER_EV_CB_CONFLICT:
		l_payload->data.conflict.listener( l_payload->user_tag, l_payload->data.conflict.conflict_user_tag, 
						l_payload->data.conflict.handle, l_payload->data.conflict.conflict_type );
		break;
}
			
PLANNER_PRV_NotifyConflictListenersInAllSessions
{
	PLANNER_PRV_NotifyConflictListeners
}

PLANNER_SBM_CONFLICT_ConflictControlListener_Handler
{
	PLANNER_PRV_NotifyConflictListenersInAllSessions
}

/* PLANNER_EV_CONFLICT_CONTROL_LISTENER */
PLANNER_ConflictControlListener_Handler,
PLANNER_ConflictControlListener_Handler
{
	PLANNER_SBM_CONFLICT_ConflictControlListener_Handler
}
	
PLANNER_ProceedToActiveStateHandler
	SBM_CONFLICT_RegisterResolver(PLANNER_SBM_CONFLICT_NotifyListener,
			 PLANNER_SBM_CONFLICT_ConflictControlListener,
			 PLANNER_SBM_CONFLICT_QueryControlListener,
			 PLANNER_SBM_CONFLICT_RequestResultListener))

SBM_CLIENT_CONFLICT_NotifyListener # call PLANNER
SBM_CLIENT_CONFLICT_ConflictControlListener
SBM_CLIENT_CONFLICT_QueryControlListener
SBM_CLIENT_CONFLICT_RequestResultListener
			 
SBM_USERBOOKING_ProceedToActiveStateHandler			 
	# SBM_SERVER_CONFLICT_NotifyListener, # post SBM_USERBOOKING_EV_CONFLICT_NOTIFICATION -> SBM_USERBOOKING_ConflictNotificationHandler
	RMF_CONFLICT_RegisterResolver(
                SBM_SERVER_CONFLICT_NotifyListener,
                SBM_SERVER_CONFLICT_ConflictControlListener,
                SBM_SERVER_CONFLICT_QueryControlListener,
                SBM_SERVER_CONFLICT_RequestResultListener,
                &g_sbm_userbooking_conflict_resolver_handle))
				
		
PLAYER_SM_VRM_JobCreated
{
	PLAYER_Common_GetRMFJobHandle( l_vrm->job_handle, &l_rmf_handle );
		# get RMF JOB handle through VRM_JOB_QUERY_GetInfo
		
	PLANNER_API_Session_CheckForConflict( l_rmf_handle, PLANNER_API_CONFLICTTYPE_CHANNEL_CHANGE, PLAYER_CheckForConflictListener );
	{
		if( PLANNER_API_CONFLICTTYPE_CHANNEL_CHANGE == type )
		{
			l_rmf_conflict_type = RMF_CONFLICT_TYPE_LIVE_TUNE;
		}
		
		if(SBM_USERBOOKING_STATUS_OK!=SBM_USERBOOKING_CheckForConflict( g_planner_SBM_ub_client_id,
										 job, locator, conflict_check_tag,
										 l_rmf_conflict_type, l_payload_id,
										 (SBM_USERBOOKING_CheckForConflictCb) PLANNER_NotifySBMCheckForConflictFinished))
		
		# TO SBM SERVER
		SBM_SERVER_USERBOOKING_CheckForConflict
			RMF_CONFLICT_GetConflictHandle(&(l_conflict->conflict_handle))
		
	}
	
}


PLANNER_NotifySBMCheckForConflictFinished

PLAYER_CheckForConflictListener

PLAYER_STATE_ACTION g_PLAYER_VRM_State_AConflictCheck[] =
{
  { PLAYER_EVT_CONFLICT_CHECK,PLAYER_SM_VRM_ConflictCheck },
  { PLAYER_EVT_SLOT_READY,    PLAYER_SM_VRM_SlotReady },
  { PLAYER_EVT_JOB_DESTROYED, PLAYER_SM_VRM_JobDestroyed },
  { PLAYER_EVT_NEW_LIVE,      PLAYER_SM_VRM_NewLive },
  { PLAYER_EVT_NEW_CGMSA,     PLAYER_SM_VRM_NewCGMSA },
  { PLAYER_EVT_REC_RB_ALARM,   PLAYER_SM_VRM_CreateRecRB },
  { PLAYER_EVT_SERVICE_OBJECT, PLAYER_SM_VRM_GetSessionFlagsValue },
  PLAYER_END_STATE_TABLE
};


PLAYER_SM_VRM_ConflictCheck
{
	if( false == l_conflict_data->conflict )
	{
	PLAYER_SM_VRM_TryCreateRBTimer(PLAYER_REC_RB_DELAY, context_data);
	
	PLAYER_SM_VRM_StartJob
		VRM_JOB_Start
	}
}


# from RMF to PLAYER
PLANNER_NotifySBMCheckForConflictFinished
	PLAYER_CheckForConflictListener
		post PLAYER_EVT_CONFLICT_CHECK

# 	
PLAYER_SM_VRM_ConflictCheck	
	if( false == l_conflict_data->conflict )
		PLAYER_SM_VRM_StartJob(job_data, context_data, payload_data)
	

	
	
	
#
# APP side ( refer to 'file:///C:/ktpark/NDSUK/kb/fusion/component/javadoc/com/nds/fusion/planner/PlannerConflict.html')
#

# creat a resolver
PlannerTestConflictResolver plannerConflictResolver = new PlannerTestConflictResolver();

# Register a conflict resolver for planner booking conflicts 
resolverHandle = plannerSession.registerConflictResolver(PlannerConflictResolver conflictResolver, Object userTag)
					# PLANNER_JAVA_ApiSessionRegisterConflictResolver
					#	PLANNER_API_Session_RegisterConflictResolver( PLANNER_JAVA_Conflict_ResolverCb )
					#	
					# PLANNER_JAVA_Conflict_ResolverCb	
					#	CALL notifyConflict
						
# get conflict type and if there's the conflit expected then get a conflict
plannerConflictResolver.getConflictType()
plannerConflictResolver.getConflict()

# get details of conflict
PlannerBookedProgramme conflictPrgm =  bookedProgrammeConflict.getNewBookedProgrammeCausingConflict();

# send it back resolution depending on user's selection
bookedProgrammeConflict.commitConflictResolution(PlannerConflict.RESOLUTION_CANCEL);


# PlannerConflictResolver.java
/**
  * This interface defines the functionality which will be called when
  * planner booking conflicts occur.
  */
public interface PlannerConflictResolver
{
	interface PlannerConflictType
	{
		/** Caused by insufficent resources at record time when adding a new booking. */
		# A booking time conflict will occur when a call to
		# PlannerSession.addScheduledBookedProgramme(Object,SystemLocator,int,int,PlannerAddBookedProgrammeListener) or
		# PlannerSession.addManualBookedProgramme(Object,SystemLocator,SystemTime,int,int,PlannerAddBookedProgrammeListener)
		#
		# There are 4 options to resolve the conflict. (from public interface PlannerConflict)
		# 1) RESOLUTION_CANCEL: cancel the new booking to resolve the conflict.
		# 2) RESOLUTION_BASIC: cancel all other bookings which conflict with the
		# the new one to resolve the conflict.
		# 3) RESOLUTION_ADVANCED: manual selection of bookings to delete to
		# resolve the conflict.
		# 4) RESOLUTION_CONTINUE: continue the booking once the conflict has been
		# automatically resolved.  This is signalled by the conflict callback function returning 
        # status CONFLICT_ALREADY_RESOLVED.
		
		public static final int	BOOKING_TIME				= 1;

		/** Caused by insufficent resources when changing the Live play. */
		# A channel change conflict will occur when a call to PlayerSession.play
		# has insufficient resources (tuners) to change channels.
		#
		# There are 2 options to resolve the conflict.
		# 1) RESOLUTION_CANCEL: cancel the new channel change to resolve the conflict.
		# 2) RESOLUTION_ADVANCED: manual selection of bookings to delete to resolve the conflict.
		
		public static final int	CHANNEL_CHANGE				= 2;

		/** Caused by insufficent resources for an imminent recording i.e clash with Live. */
		# An imminent tuner conflict will occur when a new recording is about to start, but
		# there are insufficient resources (tuners) to start the recording.
		#
		#There is 1 option to resolve the conflict.
		# 1) RESOLUTION_ADVANCED: manual selection of bookings to delete to resolve the conflict.		
		
		public static final int	IMMINENT_TUNER				= 3;

		/** Caused by imminent insufficent disk resources for current recordings. */
		# An Imminent Disk Conflict will occur when the system detects insufficent disk resources
		# for current recordings, on individual disk quotas.
		#
		#  There is one option to resolve this conflict.
		#
		# 1) RESOLUTION_ADVANCED: manual selection of bookings to delete to resolve the conflict.
	
		public static final int	IMMINENT_DISK				= 4;

		/** Caused by insufficent disk resources at booking time. */
		public static final int	BOOKING_DISK_FAIL			= 5;

		/** Caused by imminent insufficient disk resources for PDL recording replacement with PVOD asset */
		public static final int	PDL_REPLACEMENT_DISK		= 6;

		/** Caused by clashing reminders */
		public static final int	REMINDER_BOOKING			= 7;

		/** Caused by insufficient resources when reserving resources for an interactive application */
		public static final int	LIVE_RESERVATION			= 8;

		/** Caused by insufficent resources for an imminent recording, when an interactive application is running. */
		public static final int	IMMINENT_LIVE_RESERVATION	= 9;

		/** Caused by booking a second child event while watching an interactive application and recording the current child event.*/
		public static final int	IMMEDIATE_RECORDING			= 12;

		/** Caused by imminent insufficient disk resources when moving an asset to the user disk quota */
		public static final int	QUOTA_CHANGE				= 13;

		/**< Caused by when the viewer performs SFRB for a past event, and the user disk quota does not contain enough space for the new booking  */
		public static final int	EXTEND_DISK_QUOTA			= 14;
	}


	interface ConflictStatus
	{
		/** New conflict that needs to be resolved */
		public static final int	TO_RESOLVE	= 1;

		/** Conflict has been resolved without the need for a conflict resolution, eg. by a schedule change */
		public static final int	RESOLVED	= 2;

		/** Conflict has been updated. The user will need to make fresh calls to {@link PlannerConflict#getBookedProgrammeConflictList} */
		/** and then {@link PlannerConflict#selectConflictsForDeletion}. */
		public static final int	UPDATED		= 3;
	}
	
	public void notifyConflict(Object resolverUserTag,
							   Object bookingUserTag,
							   PlannerConflict conflict,
							   int type,		# the PlannerConflictResolver.PlannerConflictType
							   int status)		# status - the PlannerConflictResolver.ConflictStatus
}

#
# Check if adding a new booking will result in a conflict. Currently, this function can only be used to check 
# whether changing the type of an EXISTING scheduled event (e.g. from a reminder to a recording) will result in a conflict.	
#
class PlannerSessionImpl
	public void checkForBookingConflict(Object userTag,SystemLocator programLocator,int bookingType,PlannerCheckForConflictListener checkForConflictListener,boolean callResolver)

PLANNER_JAVA_ApiSessionCheckForBookingConflict		
	PLANNER_API_Session_CheckForBookingConflict
		SBM_USERBOOKING_CheckForBookingConflict( PLANNER_NotifySBMCheckForBookingConflictFinished )

static VRM_FSM_ENTRY LiveEntries[] =	
{
	VRM_FSM_E( E_LIVE_STATE_STARTING,							
				E_LIVE_INPUT_RMF_ACQUIRE_RESOURCES,
				E_LIVE_STATE_ALLOCATING_RESOURCES,
				(VRM_FSM_ACTION)LiveAction_AllocatingResourcesState ),
				
	VRM_FSM_E( E_LIVE_STATE_RESOURCES_ALLOCATED,		
				E_LIVE_INPUT_PANEL_CONFIGURE,
				E_LIVE_STATE_CONFIGURING,
				(VRM_FSM_ACTION)LiveAction_ConfiguringState ),				
}
				
LiveAction_AllocatingResourcesState
{
	VRM_RMF_AssignLiveResources
		RMF_ALLOCATE_ControlPermissions
		RMF_ALLOCATE_GetMdmHandle
		
	fsm_input = E_LIVE_INPUT_RMF_RESOURCES_ALLOCATED;
}
	
LiveAction_ConfiguringState
	LiveNotifyClient( E_VRM_SRV_EVENT_ENGINE_JOB_LIVE_MCON_CREATED, pThis )

VRM_RMF_AssignLiveResources
VRM_RMF_AssignPlayResources
VRM_RMF_RecordGetSharingInfo
	RMF_ALLOCATE_GetMdmHandle
	