*kt_dev_04*                                                                tw=100

KT KB. DEVELOPMENT. WEB.

/^[#=]{
Use #{ for a group and ={ for a item

|kt_dev_web_001| NPAPI


# ============================================================================
#{
={============================================================================
*kt_dev_web_001* NAPI

{js-to-native}
You can bundle an NPAPI plugin with your extension, allowing you to call into native binary code
from JavaScript. 

NPAPI is being phased out. Consider using alternatives. NPAPI is a really big hammer that should
only be used when no other approach will work. 

Code running in an NPAPI plugin has the full permissions of the current user and is not sandboxed or
shielded from malicious input by Google Chrome in any way. You should be especially cautious when
processing input from untrusted sources, such as when working with content scripts or
XMLHttpRequest. 

How to develop an NPAPI plugin is outside the scope of this document. See Mozilla's NPAPI plugin
reference for information on how to do that. 

https://developer.mozilla.org/en-US/Add-ons/Plugins

<what-plugin-is>
Plugins are shared libraries that users can install to display content that the application itself
can't display natively. For example, the Adobe Reader plugin lets the user open PDF files directly
inside the browser, and the QuickTime and RealPlayer plugins are used to play special format videos
in a web page.

Plugins are now a legacy technology. They are not available on most mobile devices. Mozilla
encourages website developers to avoid using plugins wherever possible. If there are plugin features
which are not available in the web platform, we encourage developers to post their use cases to
mozilla.dev.platform project list, so that Mozilla can prioritize web platform work to make those
use cases possible.

Plugins are written using NPAPI, the cross-browser API for plugins. The main source of documentation
for NPAPI is the Gecko Plugin API Reference. To make your plugin scriptable from web pages, use
npruntime.

Plugins can be written completely from scratch using C APIs (usually in C or C++) or they may be
built on a plugin framework such as Firebreath, JUCE, or QtBrowserPlugin. There are also some code
generation tools that may be helpful. More information about these tools can be found on the
External Resources page.

Plugins are different from extensions, which modify or enhance the functionality of the browser
itself. Plugins are also different from search plugins, which plug additional search engines in the
search bar.


==============================================================================
Copyright: see |ktkb|                              vim:tw=100:ts=3:ft=help:norl:
