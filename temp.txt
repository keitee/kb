*kt_linux*                                                           tw=100

/^[#=]{ 

aWed 18 Dec 2013 09:47:23 GMT

KT KB. Linux

={============================================================================
*kt_linux_core_107* shared library

LPI 41.

{static-library}
<ar-command>
The archive also records various attributes of each of the component object files, including file
permissions, numeric user and group IDs, and last modification time.

r (replace): Insert an object file into the archive, replacing any previous object file of the same
             name. This is the standard method for creating and updating an archive. Thus, we might
             build an archive with the following commands:

$ cc -g -c mod1.c mod2.c mod3.c
$ ar r libdemo.a mod1.o mod2.o mod3.o

t (table of contents): Display a table of contents of the archive. By default, this lists just the
                       names of the object files in the archive. By adding the v (verbose) modifier,
                       we additionally see all of the other attributes recorded in the archive for
                       each object file, as in the following example:

$ ar tv libdemo.a
rw-r--r-- 1000/100 1001016 Nov 15 12:26 2009 mod1.o
rw-r--r-- 1000/100 406668 Nov 15 12:21 2009 mod2.o
rw-r--r-- 1000/100 46672 Nov 15 12:21 2009 mod3.o

<how-to-link-static>

1. The first is to name the static library as part of the link command, as in the following:

$ cc -g -c prog.c
$ cc -g -o prog prog.o libdemo.a

2. can place the library in one of the 'standard' directories searched by the linker (e.g.,
    /usr/lib), and then specify the library name; the filename of the library without the lib prefix
and .a suffix using the –l option:

$ cc -g -o prog prog.o -ldemo

3. If the library resides in a directory not normally searched by the linker, we can specify that
the linker should search this additional directory using the –L option:

$ cc -g -o prog prog.o -Lmylibdir -ldemo

Although a static library may contain many object modules, the linker includes only those modules
that the program requires.


{downside-of-static}
1. Duplicates in disk and ram spce.

2. If a change is required perhaps a security or bug fix to an object module in a static library,
  then all executables using that module must be relinked in order to incorporate the change. This
  disadvantage is further compounded by the fact that the system administrator needs to be aware of
  which applications were linked against the library.


{what-is-shared}
Although the code of a shared library is shared among multiple processes, its variables are not.
Each process that uses the library has its own copies of the global and static variables that are
defined within the library.


{further-advantages}
@ Because overall program size is smaller, in some cases, programs can be loaded into memory and
started more quickly. This point holds true only for large shared libraries that are already in use
by another program.

@ Such changes can be carried out even while running programs are using an existing version of the
shared library.


{cost-of-shared}
@ Shared libraries are more complex than static libraries, both at the conceptual level, and at the
practical level of creating shared libraries and building the programs that use them.

@ Shared libraries must be compiled to use position-independent code, which has a performance
overhead on most architectures because it requires the use of an extra register 

@ Symbol relocation must be performed at run time. During symbol relocation, references to each
symbol (a variable or function) in a shared library need to be modified to correspond to the actual
run-time location at which the symbol is placed in virtual memory. Take a little more time to
execute.


{create-shared}
$ gcc -g -c -fPIC -Wall mod1.c mod2.c mod3.c
$ gcc -g -shared -o libfoo.so mod1.o mod2.o mod3.o

or 

$ gcc -g -fPIC -Wall mod1.c mod2.c mod3.c -shared -o libfoo.so

Unlike static libraries, it is not possible to add or remove individual object modules from a
previously built shared library. As with normal executables, the object files within a shared
library no longer maintain distinct identities.


{position-independent-code}
These changes allow the code to be located at any virtual address at run time. This is necessary for
shared libraries, since there is no way of knowing at link time where the shared library code will
be located in memory.

In order to determine whether an existing object file has been compiled with the –fPIC option, we
can check for the presence of the name _GLOBAL_OFFSET_TABLE_ in the object file’s symbol table,
    using either of the following commands:

$ nm mod1.o | grep _GLOBAL_OFFSET_TABLE_
$ readelf -s mod1.o | grep _GLOBAL_OFFSET_TABLE_

{dynamic-linker}
Must have some mechanism for identifying the shared library that it needs at run time. This is done
by embedding the name of the shared library inside the executable during the link phase. DT_NEEDED
tag in ELF.

The dynamic linking, which is the task of resolving the embedded library name at run time. This task
is performed by the dynamic linker (also called the dynamic linking loader or the run-time linker).
The dynamic linker is itself a shared library, named /lib/ld-linux.so.2, which is employed by every
ELF executable that uses shared libraries.

$ ls -l /lib/ld-linux.so.2 
lrwxrwxrwx 1 root root 25 Oct 17 00:50 /lib/ld-linux.so.2 -> i386-linux-gnu/ld-2.13.so

<standard-dirs>
Some of these rules specify a set of standard directories in which shared libraries normally reside.

To inform the dynamic linker that a shared library resides in a nonstandard directory

If LD_LIBRARY_PATH is defined, then the dynamic linker searches for the shared library in the
directories it lists before looking in the standard library directories.

$ LD_LIBRARY_PATH=. ./prog

Creates an environment variable definition within the process executing prog.


{soname}

$ readelf -d /lib/ld-linux.so.2 | grep SONAME
 0x0000000e (SONAME)                     Library soname: [ld-linux.so.2]


-------------------------------------------------------------------------------
Copyright: see |ktkb|  vim:tw=100:ts=3:ft=help:norl:

